{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b363f9d5e9173714c3783ce622c6992b4d013116","modified":1518073130000},{"_id":"source/.DS_Store","hash":"0de846ddfb9758e830050c3057d38aa5145a532c","modified":1558448832988},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1551148085640},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1551148085640},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1551148085641},{"_id":"themes/pure/.DS_Store","hash":"dd397b7c707cf46ea4923ad50b9a3ac9cd6507ce","modified":1551150786316},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1551148085640},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1551148085643},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1551148085663},{"_id":"themes/pure/_config.yml","hash":"7abba94ba5f2c9be71783573c5856818635b1890","modified":1552461139500},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1518073130000},{"_id":"source/_posts/Idea使用骨架生成项目卡住的解决办法.md","hash":"a880bc51df5f822ec2ba0a257b607870d3c55fa1","modified":1520593495000},{"_id":"source/_posts/Iedis破解思路.md","hash":"2fda52d53e2c29648acc7977b85958c2fea679b2","modified":1518073130000},{"_id":"source/_posts/Insert-ignore-和update-导致的死锁问题分析.md","hash":"03d39792ab6df79ffedc10315e6c99b72d8761dc","modified":1551269639560},{"_id":"source/_posts/JDK1-7-ConcurrentHashMap的源码解读.md","hash":"a359b7161371a7017eb19577a3f215bc32301d9d","modified":1551151232824},{"_id":"source/_posts/Innodb中的锁总结.md","hash":"497064908a8bd43951ac4f3768cb244991a12789","modified":1558446812681},{"_id":"source/_posts/Java中的多线程和锁实现原理.md","hash":"ceb5db4358322c3ea4ea56ff34419afce10bb577","modified":1553334054721},{"_id":"source/_posts/Java根据指定的country和lang格式化时间.md","hash":"a0751b3d071096482e00dedd828a05dbe452528d","modified":1518073139000},{"_id":"source/_posts/Linux Shell--cut命令.md","hash":"0e36ed49b92a29be7eac543a0625746f4990303f","modified":1518073130000},{"_id":"source/_posts/Source-Tree-配置支持gerrit-review.md","hash":"a5c4f9440fdd4d9ccdfec7629aeaa3b9eac58356","modified":1518073139000},{"_id":"source/_posts/一种适合后端代码的GIT分支管理办法.md","hash":"09a8c97e2f84f89b70618c6d4453781656448e7d","modified":1558447372867},{"_id":"source/_posts/javaagent-的使用.md","hash":"3130b8e1cca948c999c816563caa93178cb6cfc4","modified":1518073130000},{"_id":"source/_posts/proto变量类型与java类型对照表.md","hash":"01549882bcb1446dfc5dbc3d4a18b07712ea335c","modified":1518073130000},{"_id":"source/_posts/proto文件.md","hash":"4ce99b40ea476d19771e61a72c107976aaa72c42","modified":1518073130000},{"_id":"source/_posts/抽奖业务设计.md","hash":"1de3fc829f5402f55dbf82b4e3aadc79a2736089","modified":1518073139000},{"_id":"source/_posts/自定义ClassLoader实现一个支持热加载的应用启动器.md","hash":"777c54400067f88228821f1a041972b937d7fcb4","modified":1552812411535},{"_id":"source/_discarded/hello-world.md","hash":"3edaf1bb11ffd0790a7f30e7519071ef1843080a","modified":1551151089184},{"_id":"source/_posts/谈谈多语言设计（一）之-客户端多语言与服务端多语言.md","hash":"5c8c929083e11937ff07a402c002853b95f0c591","modified":1520507414000},{"_id":"source/_posts/谈谈多语言设计（三）Spring-i18n-拓展之自定义MessageSource.md","hash":"29df69f7f554d22d0e02476b62987cd9915491d3","modified":1523607110000},{"_id":"source/_posts/谈谈多语言设计（二）之Spring多语言.md","hash":"9d81894394e2fecbaeff7eb690f883ef0e22afdf","modified":1520507364000},{"_id":"source/images/pasted-0.png","hash":"e6436b4a9411d63291959e0e3668eccb6ccf7c33","modified":1518073139000},{"_id":"source/images/pasted-2.png","hash":"e56a6beef50c1940bf8a543b4d365bed2e385773","modified":1520593326000},{"_id":"source/tags/index.md","hash":"871239a9e748e6d5806e48f67beecd23993ef64e","modified":1518073130000},{"_id":"themes/pure/.git/config","hash":"7ec6421043b0f1135362e6c04e1f42251478e733","modified":1551148085636},{"_id":"themes/pure/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1551148085634},{"_id":"themes/pure/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1551148076641},{"_id":"themes/pure/.git/index","hash":"32f62bf3dc56297147c5ca59c27abde6c33d0436","modified":1551319239490},{"_id":"themes/pure/.git/packed-refs","hash":"3e4115f1d0063c159b1a24e7f2cfdcacd383de4f","modified":1551148085631},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1551148085677},{"_id":"themes/pure/source/.DS_Store","hash":"066107190a2df6b36aaa563e0599a9f592bf1f43","modified":1551150786312},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1551148085681},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1551148085662},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1551148085661},{"_id":"themes/pure/layout/categories.ejs","hash":"2084974ba68f799216a8b216752f7fc87c693cc0","modified":1551148085662},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1551148085661},{"_id":"themes/pure/layout/category.ejs","hash":"68632e8ac45088a929ca82b6cca8ba60323d6aac","modified":1551148085662},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1551148085662},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1551148085662},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1551148085662},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1551148085663},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1551148085663},{"_id":"themes/pure/layout/tag.ejs","hash":"6e4e6660cf58beb3e5e2e52b59c51393e4796c36","modified":1551148085663},{"_id":"themes/pure/layout/tags.ejs","hash":"4c0b797a45cf238be367932927edc88599aa3255","modified":1551148085663},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1551148085663},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1551148085645},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1551148085645},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1551148085645},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1551148085645},{"_id":"source/images/pasted-1.png","hash":"78eadd28d41b2d07d52cd349e8d62b18035ef795","modified":1520507280000},{"_id":"source/images/pasted-3.png","hash":"288acfbd57dcb83126f48b80c5e4284c1dda3b23","modified":1523606914000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1551148085665},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1551148085664},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1551148085666},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1551148085666},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1551148085667},{"_id":"themes/pure/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1551148076643},{"_id":"themes/pure/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1551148076642},{"_id":"themes/pure/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1551148076644},{"_id":"themes/pure/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1551148076643},{"_id":"themes/pure/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1551148076644},{"_id":"themes/pure/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1551148076642},{"_id":"themes/pure/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1551148076644},{"_id":"themes/pure/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1551148076642},{"_id":"themes/pure/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1551148076643},{"_id":"themes/pure/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1551148076645},{"_id":"themes/pure/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1551148076644},{"_id":"themes/pure/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1551148076641},{"_id":"themes/pure/.git/logs/HEAD","hash":"445319e50aac6003670b4192f3838a170dfd0208","modified":1551148085635},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1551148085643},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1551148085643},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1551148085643},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1551148085644},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1551148085644},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1551148085644},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1551148085644},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1551148085644},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1551148085645},{"_id":"themes/pure/source/images/.DS_Store","hash":"2aade9c1a57f08b578dcd46ab22b1954577fd9b4","modified":1551150829151},{"_id":"themes/pure/source/images/avatar.jpg","hash":"410abfef391bb413fc4a8e9afa79c8027a7a27bc","modified":1551150632721},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1551148085687},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1551148085689},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1551148085688},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1551148085689},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1551148085689},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1551148085682},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1551148085682},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1551148085684},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1551148085647},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1551148085683},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1551148085647},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1551148085647},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1551148085648},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1551148085648},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1551148085659},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1551148085659},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1551148085659},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1551148085659},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1551148085659},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1551148085648},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1551148085649},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1551148085648},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1551148085649},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1551148085649},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1551148085649},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1551148085649},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1551148085650},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1551148085651},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1551148085650},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1551148085651},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1551148085654},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"289ee342d19ab3a58cc02a644d44e1795a50ad17","modified":1551149987000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1551148085654},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1551148085654},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1551148085657},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1551148085658},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1551148085658},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1551148085658},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1551148085658},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1551148085658},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1551148085658},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1551148085658},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1551148085660},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1551148085660},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1551148085661},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1551148085660},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1551148085660},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1551148085660},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1551148085692},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1551148085690},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1551148085691},{"_id":"themes/pure/.git/refs/heads/master","hash":"acadee1d4d226b371a3bf4ad2be7e333316f601e","modified":1551148085634},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1551148085680},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1551148085681},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1551148085685},{"_id":"themes/pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1506599251000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1551148085686},{"_id":"themes/pure/source/images/donate/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1551150809562},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1551148085686},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1551148085691},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1551148085683},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1551148085651},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1551148085651},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1551148085652},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1551148085652},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1551148085652},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1551148085652},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1551148085653},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1551148085652},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1551148085653},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1551148085653},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1551148085653},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1551148085653},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1551148085655},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1551148085654},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1551148085655},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1551148085657},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1551148085657},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1551148085655},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1551148085655},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1551148085655},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1551148085656},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1551148085655},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1551148085656},{"_id":"themes/pure/.git/objects/pack/pack-32effd909a5cd283dcaa722683d850e9d0ae278a.idx","hash":"bb5cdfe64672650a33341558aa4c60c1d63fdf77","modified":1551148085623},{"_id":"themes/pure/source/images/donate/weipayimg.png","hash":"82427f10d8f616d3ea8c9d4446412db1b416d31b","modified":1506672644000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"ff9da0f35a16049bd1310d72d3ef7bbae14661f9","modified":1506672522000},{"_id":"themes/pure/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1551148085634},{"_id":"themes/pure/.git/logs/refs/heads/master","hash":"445319e50aac6003670b4192f3838a170dfd0208","modified":1551148085635},{"_id":"themes/pure/.git/logs/refs/remotes/origin/HEAD","hash":"445319e50aac6003670b4192f3838a170dfd0208","modified":1551148085633},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1551148085676},{"_id":"themes/pure/.git/objects/pack/pack-32effd909a5cd283dcaa722683d850e9d0ae278a.pack","hash":"e4cd67b5d09733154352be3395ef358e0c0f2f3d","modified":1551148085622},{"_id":"public/baidusitemap.xml","hash":"42f5d177fec05df6e67f0f1383b9199ba54fded9","modified":1558503474702},{"_id":"public/atom.xml","hash":"f548d2737117a62edb3ff0bdc99d156c1759dcd2","modified":1558503474702},{"_id":"public/sitemap.xml","hash":"9de51686366deb6c0fca3b06c39bfdfa450351f0","modified":1558503475090},{"_id":"public/content.json","hash":"247eb7848955f613df83de62b5d3d993e2e542e5","modified":1558503475090},{"_id":"public/categories/index.html","hash":"7e404b9b047804cfd7c6174c59f95cdeab79d3f6","modified":1558503475362},{"_id":"public/tags/index.html","hash":"bb5a1ba7a0f33060a89e26028be32ec09edad4a4","modified":1558503475362},{"_id":"public/2019/05/21/一种适合后端代码的GIT分支管理办法/index.html","hash":"01dc3c5955705a59887eaa1882d9524d9952db2b","modified":1558503475651},{"_id":"public/2019/02/28/Innodb中的锁总结/index.html","hash":"016595d541f4e5ce72d22da7226116e1de5cb52c","modified":1558503475651},{"_id":"public/2019/02/26/JDK1-7-ConcurrentHashMap的源码解读/index.html","hash":"2d58de7eaa95862bb143376e991a6a7b80819b59","modified":1558503475663},{"_id":"public/2018/04/13/谈谈多语言设计（三）Spring-i18n-拓展之自定义MessageSource/index.html","hash":"ecd866e6ca61f37ed4a36ee29da4a23b40a4e1ac","modified":1558503475663},{"_id":"public/2019/02/27/Insert-ignore-和update-导致的死锁问题分析/index.html","hash":"70416bf336406a851bca6dbdb3e951277297bda6","modified":1558503475664},{"_id":"public/2019/03/17/自定义ClassLoader实现一个支持热加载的应用启动器/index.html","hash":"86ca12814a17218623afed470ade8e5e5d99b718","modified":1558503475664},{"_id":"public/2018/03/09/Idea使用骨架生成项目卡住的解决办法/index.html","hash":"cd14c3eeb431bdce742662edb17148f5d2aa8b48","modified":1558503475664},{"_id":"public/2018/02/07/Source-Tree-配置支持gerrit-review/index.html","hash":"c5fdd76598d155c12defafcb91de6964b4e2fa62","modified":1558503475664},{"_id":"public/2017/12/16/抽奖业务设计/index.html","hash":"7b65ab7dab24c8a7ea45ba265e6ecaf44df9f418","modified":1558503475664},{"_id":"public/2017/10/16/Java根据指定的country和lang格式化时间/index.html","hash":"985bcda04395901a9e8bc1c99344c332c3566ab1","modified":1558503475664},{"_id":"public/2017/10/12/Iedis破解思路/index.html","hash":"94b098ccb65e36114d56d5051cbfb6c85c64d4ff","modified":1558503475664},{"_id":"public/2017/10/11/proto变量类型与java类型对照表/index.html","hash":"3a6f9f4f7faa1529ae2c19533af4f3e75874fc91","modified":1558503475665},{"_id":"public/2017/10/10/proto文件/index.html","hash":"12c8ccd17f76914a1e6d230b338f58b262cb6fbb","modified":1558503475665},{"_id":"public/2017/10/10/javaagent-的使用/index.html","hash":"e381d72762fe7b8105520decff09b079e6237ceb","modified":1558503475665},{"_id":"public/2017/02/23/Linux Shell--cut命令/index.html","hash":"bb81348c7e9d2300ae5f401a713691b37b9a96a6","modified":1558503475665},{"_id":"public/archives/index.html","hash":"c9c0e47f7f98a4d34cc7aebf5d1595c29ed3af25","modified":1558503475665},{"_id":"public/2018/03/07/谈谈多语言设计（一）之-客户端多语言与服务端多语言/index.html","hash":"d5ef354ba7ea68376496e847c56f692dfa189d60","modified":1558503475665},{"_id":"public/archives/2017/index.html","hash":"6754a94f7ebd683560f0bb8d22412964766f9e97","modified":1558503475666},{"_id":"public/archives/2017/02/index.html","hash":"745e11fc7516890bc600ae74e03c629ea37bfd41","modified":1558503475666},{"_id":"public/archives/2017/10/index.html","hash":"3fc248de2f17cfb1f79f3a6ae6b22ec70be28aa8","modified":1558503475666},{"_id":"public/archives/2017/12/index.html","hash":"f0647b11b51352de1afa01cd7a08695d9f418b4d","modified":1558503475666},{"_id":"public/2018/03/08/谈谈多语言设计（二）之Spring多语言/index.html","hash":"f4b394a45193cdf56f76b6c946b7e157e5080d9e","modified":1558503475666},{"_id":"public/archives/2018/index.html","hash":"c81f157e30aa1add7c6d204555d23e733e72ce29","modified":1558503475666},{"_id":"public/archives/2018/02/index.html","hash":"e429530228db8cdac3543b64602f2633e7fbc6e7","modified":1558503475666},{"_id":"public/2019/03/11/Java中的多线程和锁实现原理/index.html","hash":"d971680c92c70d3d9f09da7d5335527ed5248444","modified":1558503475666},{"_id":"public/archives/2018/03/index.html","hash":"08299074995d127834ea81824d0d4e1c391d9084","modified":1558503475666},{"_id":"public/archives/page/2/index.html","hash":"30b5f87cec9ff56a2813b97c711e2f3c2b37f6cd","modified":1558503475679},{"_id":"public/archives/2019/index.html","hash":"356ba1d51f59c82d8bd32f310a4cc8b143a4a158","modified":1558503475679},{"_id":"public/archives/2018/04/index.html","hash":"f077c6cde8b5daff75951d2cfc72e02b9185bb1b","modified":1558503475679},{"_id":"public/archives/2019/02/index.html","hash":"2b4de0a457708a72356f00a789fadc3005d7c52b","modified":1558503475679},{"_id":"public/categories/逆向/index.html","hash":"3fb5e7dde1dde43664a66f9f02bad5d8354f95e2","modified":1558503475679},{"_id":"public/archives/2019/05/index.html","hash":"19d6e5166b6a0979a03789e2105c81b2f8e605c6","modified":1558503475679},{"_id":"public/archives/2019/03/index.html","hash":"f97dba720a3f9b29af5df9e66641bba828199022","modified":1558503475680},{"_id":"public/categories/工具使用/index.html","hash":"3c20900fa5bd6b6bb0e80ab715dac7d419d6cf41","modified":1558503475680},{"_id":"public/categories/死锁/index.html","hash":"9c0e501ef3552182b5e085cdca2d6db867fb6218","modified":1558503475680},{"_id":"public/categories/linux/index.html","hash":"709c9b36c6a827a4b929211cfa3a83564fcb107a","modified":1558503475680},{"_id":"public/categories/源码解读/index.html","hash":"7e4f65020dff5fa7a0577ccaa8a6ab350fa9e46a","modified":1558503475680},{"_id":"public/categories/jdk/index.html","hash":"f326389585f50a2f93c96ec9ba45f826496c2659","modified":1558503475680},{"_id":"public/categories/java/index.html","hash":"5db161177f182c32efe3106fb94674a716d04d3b","modified":1558503475680},{"_id":"public/categories/JDK/index.html","hash":"f7f3e5dc889aca03ab040b3706d8f94b5f5755f3","modified":1558503475680},{"_id":"public/categories/数据库/index.html","hash":"4b18293c541c67ddc2c9061e3faea76189522631","modified":1558503475680},{"_id":"public/index.html","hash":"50133a09bf343fff06d8500755d61c97ca3cfa6a","modified":1558503475680},{"_id":"public/categories/源码解读/JDK/index.html","hash":"d1323893c250e0081485d429daaff60bb20d283a","modified":1558503475680},{"_id":"public/categories/架构总结/index.html","hash":"0dd1c2a721917b07395016ef8e582fc4d7927fca","modified":1558503475680},{"_id":"public/categories/开发规范/index.html","hash":"6e34e867f1a82c4bb4533bddf918eb52f417f7a3","modified":1558503475680},{"_id":"public/tags/java逆向/index.html","hash":"acc51f82193bdceb47a1a441e7d78806f5a039e7","modified":1558503475680},{"_id":"public/page/2/index.html","hash":"423d9ae04fe30ea37ced059c73c926d499778fb2","modified":1558503475680},{"_id":"public/tags/Idea/index.html","hash":"e8f9448a063be7976f611ef3925919b863ea7c4f","modified":1558503475680},{"_id":"public/tags/MySQL/index.html","hash":"b0e3220506999842abb0d810f6b9e38542e8d093","modified":1558503475680},{"_id":"public/tags/J-U-C/index.html","hash":"1d55e9821775d94916d56056b285adf9ba9deec8","modified":1558503475680},{"_id":"public/tags/Innodb/index.html","hash":"76b0b1f71782d9e2327f0ca2feddeaf2f706152f","modified":1558503475681},{"_id":"public/tags/innodb/index.html","hash":"bf7fa5199a4d239be77c9b512ebd31444e6c94d0","modified":1558503475681},{"_id":"public/tags/ConcurrentHashMap/index.html","hash":"1267b9e496984d4b6e33685d347de95f0d6cca5d","modified":1558503475681},{"_id":"public/tags/archetypeCatalog/index.html","hash":"21b6dac2844b5698bb87341989160fa4d21ac04e","modified":1558503475681},{"_id":"public/tags/java/index.html","hash":"6e742f4e8874c254ece912203051c345fb8669e2","modified":1558503475681},{"_id":"public/tags/业务开发/index.html","hash":"df38f69aba1d0b58c20d9e667d531453552c2dd0","modified":1558503475681},{"_id":"public/tags/linux/index.html","hash":"8223e7edf7a539fb9bfbb94917f5bb63548ee6d9","modified":1558503475681},{"_id":"public/tags/shell/index.html","hash":"bcc2629d09112bbc8af64c9aff6d53b33623bb5a","modified":1558503475681},{"_id":"public/tags/synchronized/index.html","hash":"09e79dc54205cf1f30f98b2992d06c5440bd3a13","modified":1558503475681},{"_id":"public/tags/AQS/index.html","hash":"8f02658e8fbcffbc308507692b6aaaf93d9dc8d2","modified":1558503475681},{"_id":"public/tags/多线程/index.html","hash":"28f18a9583a1593cfa3fdf9b9cb291e570b9ba45","modified":1558503475681},{"_id":"public/tags/Protobuf/index.html","hash":"b002d2b02746761bdc8facedc5c0a63e7e6b322c","modified":1558503475681},{"_id":"public/tags/rpc/index.html","hash":"130b613fc0372b0f8dc29b4998199427411fb9eb","modified":1558503475682},{"_id":"public/tags/开发规范/index.html","hash":"6a1a714fb23cbf4be8e208341f79f2bc7a6f7121","modified":1558503475682},{"_id":"public/tags/GIT/index.html","hash":"7715a9465a0e15a388c7ad32a4f914ed1bc4a507","modified":1558503475682},{"_id":"public/tags/代码管理/index.html","hash":"ec20793b66f1eff3d8e18f362f0ca6a7f4c53c27","modified":1558503475682},{"_id":"public/tags/ClassLoader/index.html","hash":"b261888ee65fb3d0a76bba125f5251d7bcbfadea","modified":1558503475682},{"_id":"public/tags/热加载/index.html","hash":"7f2a5b27700bffea1c8d49dc4198d4a5ce041bb8","modified":1558503475682},{"_id":"public/tags/多语言/index.html","hash":"7e6a759fcb3da483b1cbfe0608b0bfc8aa9b4d66","modified":1558503475682},{"_id":"public/tags/i18n/index.html","hash":"8be472148b47adc72c4ac2f90e58268ef1f8323f","modified":1558503475682},{"_id":"public/CNAME","hash":"b363f9d5e9173714c3783ce622c6992b4d013116","modified":1558503475686},{"_id":"public/images/pasted-0.png","hash":"e6436b4a9411d63291959e0e3668eccb6ccf7c33","modified":1558503475686},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1558503475686},{"_id":"public/images/avatar.jpg","hash":"410abfef391bb413fc4a8e9afa79c8027a7a27bc","modified":1558503475687},{"_id":"public/images/pasted-2.png","hash":"e56a6beef50c1940bf8a543b4d365bed2e385773","modified":1558503475687},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1558503475687},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1558503475687},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1558503475687},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1558503475687},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1558503475687},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1558503475687},{"_id":"public/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1558503475687},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1558503475687},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1558503475687},{"_id":"public/images/pasted-1.png","hash":"78eadd28d41b2d07d52cd349e8d62b18035ef795","modified":1558503475726},{"_id":"public/images/pasted-3.png","hash":"288acfbd57dcb83126f48b80c5e4284c1dda3b23","modified":1558503475729},{"_id":"public/images/donate/weipayimg.png","hash":"82427f10d8f616d3ea8c9d4446412db1b416d31b","modified":1558503475736},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1558503475743},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1558503475743},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1558503475743},{"_id":"public/fonts/README.html","hash":"27d62f4fccb8fd6c1e0c2246522f0e4a12c58dc6","modified":1558503475743},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1558503475743},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1558503475743},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1558503475743},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1558503475743},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1558503475744},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1558503475744},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1558503475744},{"_id":"public/images/donate/alipayimg.png","hash":"ff9da0f35a16049bd1310d72d3ef7bbae14661f9","modified":1558503475745}],"Category":[{"name":"工具使用","_id":"cjvysq8bf0004kg8819swj8ct"},{"name":"逆向","_id":"cjvysq8bp0009kg88hd3mwubf"},{"name":"死锁","_id":"cjvysq8bt000ekg885d2kk008"},{"name":"源码解读","_id":"cjvysq8bw000lkg88p2av9i5k"},{"name":"数据库","_id":"cjvysq8c1000rkg880yhzci5x"},{"name":"jdk","_id":"cjvysq8ci000xkg88lah1wk9h"},{"name":"linux","_id":"cjvysq8ck0014kg88ftcjsv5w"},{"name":"开发规范","_id":"cjvysq8cn0019kg88ivt3lakl"},{"name":"JDK","parent":"cjvysq8bw000lkg88p2av9i5k","_id":"cjvysq8co001ekg889nb9n9w2"},{"name":"java","_id":"cjvysq8cp001ikg88p55bn0hu"},{"name":"JDK","_id":"cjvysq8cq001lkg88cxci9ddx"},{"name":"架构总结","_id":"cjvysq8cr001pkg884a34wfhi"}],"Data":[],"Page":[{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2019-02-26T03:02:51.871Z","updated":"2018-02-08T06:58:50.000Z","path":"categories/index.html","_id":"cjvysq8b30000kg88up2buk7z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 分类\nlayout: tags\ncomments: false\n---\n","date":"2019-02-26T03:02:47.683Z","updated":"2018-02-08T06:58:50.000Z","path":"tags/index.html","_id":"cjvysq8bc0002kg88vbq6e2gh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Idea使用骨架生成项目卡住的解决办法","author":"Jiacan Liao","date":"2018-03-09T11:01:00.000Z","_content":"&emsp;&emsp;Idea在使用骨架生成项目时（Create from archetype）有时候会发现卡住了，控制台停留在\n\n```\n[INFO] Generating project in Batch mode\n```\n\n通过debug日志发现是搜索archetype-catalog.xml卡住了\n\n```\n[INFO] Generating project in Batch mode\n[DEBUG] Searching for remote catalog: http://repo.maven.apache.org/maven2/archetype-catalog.xml\n```\n解决方法：\n\n&emsp;&emsp; 修改archetypeCatalog参数，archetypeCatalog=internal。Idea可以在maven的runner配置中指定。如图：\n\n![upload successful](/images/pasted-2.png)\n\narchetypeCatalog参数取值可以从maven的文档查到.[Generate project using an alternative catalog\n](http://maven.apache.org/archetype/maven-archetype-plugin/examples/generate-alternative-catalog.html)\n\narchetypeCatalog 可配置的值有\n\n- internal to use the internal catalog only.\n- local to use the local catalog only.\n- remote to use the maven's remote catalog.\n\n```\nNo catalog is currently provided.\nThe default value is remote,local. Thus the local catalog is shown just after the remote one.\n```\n\n默认是remote,local. 这里解决方法其实有两个，\n一个就是上面所说修改archetypeCatalog=internal,直接使用网络。另外一个就是修改远程仓库，如使用阿里的镜像。\n\n","source":"_posts/Idea使用骨架生成项目卡住的解决办法.md","raw":"title: Idea使用骨架生成项目卡住的解决办法\nauthor: Jiacan Liao\ntags:\n  - Idea\n  - archetypeCatalog\ncategories:\n  - 工具使用\ndate: 2018-03-09 19:01:00\n---\n&emsp;&emsp;Idea在使用骨架生成项目时（Create from archetype）有时候会发现卡住了，控制台停留在\n\n```\n[INFO] Generating project in Batch mode\n```\n\n通过debug日志发现是搜索archetype-catalog.xml卡住了\n\n```\n[INFO] Generating project in Batch mode\n[DEBUG] Searching for remote catalog: http://repo.maven.apache.org/maven2/archetype-catalog.xml\n```\n解决方法：\n\n&emsp;&emsp; 修改archetypeCatalog参数，archetypeCatalog=internal。Idea可以在maven的runner配置中指定。如图：\n\n![upload successful](/images/pasted-2.png)\n\narchetypeCatalog参数取值可以从maven的文档查到.[Generate project using an alternative catalog\n](http://maven.apache.org/archetype/maven-archetype-plugin/examples/generate-alternative-catalog.html)\n\narchetypeCatalog 可配置的值有\n\n- internal to use the internal catalog only.\n- local to use the local catalog only.\n- remote to use the maven's remote catalog.\n\n```\nNo catalog is currently provided.\nThe default value is remote,local. Thus the local catalog is shown just after the remote one.\n```\n\n默认是remote,local. 这里解决方法其实有两个，\n一个就是上面所说修改archetypeCatalog=internal,直接使用网络。另外一个就是修改远程仓库，如使用阿里的镜像。\n\n","slug":"Idea使用骨架生成项目卡住的解决办法","published":1,"updated":"2018-03-09T11:04:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8b60001kg88zwqgecna","content":"<p>  Idea在使用骨架生成项目时（Create from archetype）有时候会发现卡住了，控制台停留在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Generating project in Batch mode</span><br></pre></td></tr></table></figure>\n<p>通过debug日志发现是搜索archetype-catalog.xml卡住了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Generating project in Batch mode</span><br><span class=\"line\">[DEBUG] Searching for remote catalog: http://repo.maven.apache.org/maven2/archetype-catalog.xml</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p>   修改archetypeCatalog参数，archetypeCatalog=internal。Idea可以在maven的runner配置中指定。如图：</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>archetypeCatalog参数取值可以从maven的文档查到.<a href=\"http://maven.apache.org/archetype/maven-archetype-plugin/examples/generate-alternative-catalog.html\" target=\"_blank\" rel=\"noopener\">Generate project using an alternative catalog<br>\n</a></p>\n<p>archetypeCatalog 可配置的值有</p>\n<ul>\n<li>internal to use the internal catalog only.</li>\n<li>local to use the local catalog only.</li>\n<li>remote to use the maven’s remote catalog.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No catalog is currently provided.</span><br><span class=\"line\">The default value is remote,local. Thus the local catalog is shown just after the remote one.</span><br></pre></td></tr></table></figure>\n<p>默认是remote,local. 这里解决方法其实有两个，<br>\n一个就是上面所说修改archetypeCatalog=internal,直接使用网络。另外一个就是修改远程仓库，如使用阿里的镜像。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  Idea在使用骨架生成项目时（Create from archetype）有时候会发现卡住了，控制台停留在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Generating project in Batch mode</span><br></pre></td></tr></table></figure>\n<p>通过debug日志发现是搜索archetype-catalog.xml卡住了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Generating project in Batch mode</span><br><span class=\"line\">[DEBUG] Searching for remote catalog: http://repo.maven.apache.org/maven2/archetype-catalog.xml</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p>   修改archetypeCatalog参数，archetypeCatalog=internal。Idea可以在maven的runner配置中指定。如图：</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p>archetypeCatalog参数取值可以从maven的文档查到.<a href=\"http://maven.apache.org/archetype/maven-archetype-plugin/examples/generate-alternative-catalog.html\" target=\"_blank\" rel=\"noopener\">Generate project using an alternative catalog<br>\n</a></p>\n<p>archetypeCatalog 可配置的值有</p>\n<ul>\n<li>internal to use the internal catalog only.</li>\n<li>local to use the local catalog only.</li>\n<li>remote to use the maven’s remote catalog.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No catalog is currently provided.</span><br><span class=\"line\">The default value is remote,local. Thus the local catalog is shown just after the remote one.</span><br></pre></td></tr></table></figure>\n<p>默认是remote,local. 这里解决方法其实有两个，<br>\n一个就是上面所说修改archetypeCatalog=internal,直接使用网络。另外一个就是修改远程仓库，如使用阿里的镜像。</p>\n"},{"title":"Iedis破解思路","author":"Jiacan Liao","date":"2017-10-12T07:01:00.000Z","_content":"\n> Iedis是IDEA上的一个收费redis插件，java编写的，既然是java写的，收费这些自然是很容易绕过的。由于Java太容易被反编译，作者还是做了些代码混淆和字符串加密。\n> \n\n### 利用JD-GUI反编译出来的代码片段\n\n可以看出类名和字符串都被混淆和加密了，从代码上很难去定位和分析他的注册流程。\n```\npackage com.seventh7.widget.iedis.config;\n\nimport com.intellij.icons.AllIcons.General;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.ui.Messages;\n\nclass i\n  extends e\n{\n  private static final String[] ib;\n  private static final String[] jb;\n  \n  i(n paramn)\n  {\n    super(a(20539, 52876), a(20539, 52876), AllIcons.General.Remove, a(20537, 55341), paramn);\n  }\n  \n  void a(AnActionEvent paramAnActionEvent, P paramP)\n  {\n    String str1 = String.format(a(20538, 25199), new Object[] { paramP.f() });\n    String str2 = a(20536, 20012);\n    try\n    {\n      if (Messages.showOkCancelDialog(a(), str1, str2, Messages.getQuestionIcon()) == 0) {\n        com.seventh7.widget.iedis.d.e.a().a(a(), paramP.b());\n      }\n    }\n    catch (RuntimeException localRuntimeException)\n    {\n      throw d(localRuntimeException);\n    }\n  }\n  \n```\n### 破解的2个思路\n- 还原代码中的所有加密字符串，根据字符串的内定位到相关的代码，利用javassist修改class文件，将文件替换掉原来的文件\n- 逆向出他的认证算法，然后做个注册机之类的。iedis是采用服务器认证的，每次启动都要去服务器查询激活，所以注册机不适合。但是我们可以本地架设一个认证服务。\n\n> 架设认证服务器还是比较简单的，下面还是主要研究一下第一种思路。\n\n### 还原字符串\n从那些混淆的代码去定位软件的运行逻辑很难下手，但是我们可以换个思路，将软件运行过程中字符串都打印出来，这样我们基本上就可以得到一份软件的运行日志，对java程序进行运行时插入语句看似很麻烦，其实JVM默认就支持javaagent，写个javaagent即可达到效果，javaagent的使用可以参考[《javaagent-的使用》](http://liaojiacan.me/2017/10/10/javaagent-%E7%9A%84%E4%BD%BF%E7%94%A8/)\n\n1. 编写javaagent程序\n   \n```\n/**\n * 给iedis的加密字符串函数 插入打印代码\n */\npublic class IedisTransformer implements ClassFileTransformer {\n\n\tprivate final static String IDEA_LIB=\"/Applications/IntelliJ IDEA.app/Contents/lib/*\";\n\tprivate final static String IDEIS_LIB=\"/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*\";\n\n\tpublic IedisTransformer() {\n\t\ttry {\n\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);\n\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);\n\t\t} catch (NotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n\t\tif(className.startsWith(\"com/seventh7/widget/iedis\")){\n\t\t\ttry {\n\t\t\t\tCtClass clazz = ClassPool.getDefault().makeClass(new ByteArrayInputStream(classfileBuffer));\n\t\t\t\tCtMethod[] methods = clazz.getDeclaredMethods();\n\t\t\t\tCtClass string = ClassPool.getDefault().getCtClass(String.class.getName());\n\t\t\t\tfor(CtMethod method :methods){\n\n\t\t\t\t\tif(method.getLongName().startsWith(\"com.seventh7.widget.iedis.a.p.f\")){\n\t\t\t\t\t\tSystem.out.println(\"Inject :: SUCCESS!\");\n\t\t\t\t\t\tmethod.insertBefore(\"if(true){return true;} \");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(method.getReturnType().equals(string)){\n\t\t\t\t\t\tString name = method.getLongName();\n\t\t\t\t\t\tSystem.out.println(\"transform the iedis method:\"+name);\n\t\t\t\t\t\tmethod.insertAfter(\"System.out.println(\\\"--------------------\\\");\" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(\\\"\"+name+\"\\\"); \" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(java.util.Arrays.toString($args)); \" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(\\\"return:\\\"+$_);\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn clazz.toBytecode();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (NotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (CannotCompileException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n```\n2. 修改System.out，把所有的print打印到我们指定的文件中 /tmp/system.out\n\n```\npublic class Main {\n\tpublic static void premain(String agentOps, Instrumentation inst) {\n\t\tPrintStream out = null;\n\t\ttry {\n\t\t\tout = new PrintStream(\"/tmp/system.out\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.setOut(out);\n\t\tSystem.setErr(out);\n\n\t\tif (\"iedis\".equals(agentOps)){\n\t\t\tinst.addTransformer(new IedisTransformer());\n\t\t}else if(\"injectPrint\".equals(agentOps)) {\n\t\t\tinst.addTransformer(new InjectPrintTransformer());\n\t\t}else {\n\t\t\tinst.addTransformer(new SimpleTransformer());\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(helloWorld());\n\t}\n\n\tpublic static String helloWorld(){\n\t\treturn \"This is a javaagent!\";\n\t}\n}\n\n```\n\n\n3. 配置idea启动配置，加入我们的javaagent\n\n```\n#修改idea.vmoptions文件加入下面一行配置\n-javaagent:/Users/liaojiacan/Workspace/tools/decomplie/javaagent/javaagent-1.0-SNAPSHOT.jar=iedis\n-Xms128m\n-Xmx750m\n-XX:ReservedCodeCacheSize=240m\n-XX:+UseCompressedOops\n-Dfile.encoding=UTF-8\n-XX:+UseConcMarkSweepGC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-ea\n-Dsun.io.useCanonCaches=false\n-Djava.net.preferIPv4Stack=true\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:-OmitStackTraceInFastThrow\n-Xverify:none\n\n-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log\n-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof\n-Xbootclasspath/a:../lib/boot.jar\n```\n启动Idea 后我们可以在/tmp/system.out中可以看到这些关键的日志\n```\n--------------------\ncom.seventh7.widget.iedis.L.a(java.lang.String)\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\ncom.seventh7.widget.iedis.B.a()\nreturn:186b474e0ffffffb70ffffff96680ffffffc0240ffffff89456b0fffffffa320ffffffa70ffffff92\n--------------------\ncom.seventh7.widget.iedis.x.a(byte[])\nreturn:MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZm\nZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=\n--------------------\ncom.seventh7.widget.iedis.L.a(java.lang.String)\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\n\ncom.seventh7.widget.iedis.L.a(java.lang.String)\n[https://www.codesmagic.com/q2?t=MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZmZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=]\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13938, -6118]\nreturn:trailing\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13937, -25088]\nreturn:daysLeft\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13939, 7216]\nreturn:popup\n\n\n```\n从上面的日志可以看出一些关键点：\n\n- https://www.codesmagic.com/q2?t= 是注册的服务器\n\n- com.seventh7.widget.iedis.a.o 这个类是很关键的类\n\n- 认证服务器返回的认证结果为\n {\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n\n\n> 查看反编译的代码，可以看出这个类是一个抽象类，他的唯一子类是com.seventh7.widget.iedis.a.p，根据外面获取到的运行日志，大概可以推断出 f这个方法是认证的方法。\n\n\n```\npackage com.seventh7.widget.iedis.a;\n\nimport com.seventh7.widget.iedis.b.d.a;\nimport java.util.Map;\nimport java.io.IOException;\nimport com.seventh7.widget.iedis.L;\n\nclass p extends o\n{\n    private static final String[] kb;\n    private static final String[] lb;\n    \n    //基本上可以推断出 这个就是认证的方法，最直接的方法就是直接return true\n    @Override\n    protected boolean f() throws IOException {\n        //this.d() 是调用https://www.codesmagic.com/q2去注册的\n        //Map的返回值{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n        final Map d = this.d();\n        //trailing\n        final boolean booleanValue = L.a(d, b(-13938, -6118));\n        //this.d()执行后的异常信息。\n        final a[] b = av.b();\n        //daysLeft\n        final int b2 = L.b(d, b(-13937, -25088));\n        //popup\n        final boolean booleanValue2 = L.a(d, b(-13939, 7216));\n        boolean booleanValue3 = false;\n        Label_0104: {\n            Label_0074: {\n                boolean b3;\n                try {\n                    b3 = (booleanValue3 = booleanValue);\n                    if (b != null) {\n                        break Label_0104;\n                    }\n                    if (b3) {\n                        break Label_0074;\n                    }\n                    break Label_0074;\n                }\n                catch (IOException ex) {\n                    throw b(ex);\n                }\n                try {\n                    if (b3) {\n                        this.a(b2, booleanValue2);\n                        return false;\n                    }\n                }\n                catch (IOException ex2) {\n                    throw b(ex2);\n                }\n            }\n            //actived\n            booleanValue3 = L.a(d, b(-13940, 8507));\n        }\n        final boolean b4 = booleanValue3;\n        \n        //如果已经过了试用，就检测激活\n        Label_0122: {\n            boolean b5;\n            try {\n                final boolean b6;\n                b5 = (b6 = b4);\n                // b = av.b()\n                if (b != null) {\n                    return b6;\n                }\n                if (!b5) {\n                    break Label_0122;\n                }\n                return true;\n            }\n            catch (IOException ex3) {\n                throw b(ex3);\n            }\n            try {\n                if (!b5) {\n                    this.c();\n                    return false;\n                }\n            }\n            catch (IOException ex4) {\n                throw b(ex4);\n            }\n        }\n        return true;\n    }\n    \n    private static IOException b(final IOException ex) {\n        return ex;\n    }\n\n  \n}\n\n```\n\n从上面的分享结果可以看出，有两种破解思路\n\n- 方法一 修改 com.seventh7.widget.iedis.a.p.f 永远return true\n\n- 方法二 搭建一个认证服务器，本地替换host，认证服务器返回的结果为\n\n\n```\n{ \"trailing\": false, \"popup\": true, \"activated\": true, \"daysLeft\": 0 }\n```\n\n方法一的实现\n\n```\npublic class IedisCracker {\n\n\tprivate final static String IDEA_LIB=\"/Applications/IntelliJ IDEA.app/Contents/lib/*\";\n\tprivate final static String IDEIS_LIB=\"/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*\";\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);\n\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);\n\n\t\t\tCtClass clazz = ClassPool.getDefault().getCtClass(\"com.seventh7.widget.iedis.a.p\");\n\n\t\t\tCtMethod[] mds = clazz.getDeclaredMethods();\n\t\t\tfor(CtMethod method : mds){\n\t\t\t\tif(method.getLongName().startsWith(\"com.seventh7.widget.iedis.a.p.f\")){\n\t\t\t\t\tSystem.out.println(\"Inject :: SUCCESS!\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmethod.insertBefore(\"if(true){return true;} \");\n\t\t\t\t\t} catch (CannotCompileException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclazz.writeFile(\"/tmp/p.class\");\n\n\t\t} catch (NotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (CannotCompileException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n","source":"_posts/Iedis破解思路.md","raw":"title: Iedis破解思路\nauthor: Jiacan Liao\ntags:\n  - java逆向\ncategories:\n  - 逆向\ndate: 2017-10-12 15:01:00\n---\n\n> Iedis是IDEA上的一个收费redis插件，java编写的，既然是java写的，收费这些自然是很容易绕过的。由于Java太容易被反编译，作者还是做了些代码混淆和字符串加密。\n> \n\n### 利用JD-GUI反编译出来的代码片段\n\n可以看出类名和字符串都被混淆和加密了，从代码上很难去定位和分析他的注册流程。\n```\npackage com.seventh7.widget.iedis.config;\n\nimport com.intellij.icons.AllIcons.General;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.ui.Messages;\n\nclass i\n  extends e\n{\n  private static final String[] ib;\n  private static final String[] jb;\n  \n  i(n paramn)\n  {\n    super(a(20539, 52876), a(20539, 52876), AllIcons.General.Remove, a(20537, 55341), paramn);\n  }\n  \n  void a(AnActionEvent paramAnActionEvent, P paramP)\n  {\n    String str1 = String.format(a(20538, 25199), new Object[] { paramP.f() });\n    String str2 = a(20536, 20012);\n    try\n    {\n      if (Messages.showOkCancelDialog(a(), str1, str2, Messages.getQuestionIcon()) == 0) {\n        com.seventh7.widget.iedis.d.e.a().a(a(), paramP.b());\n      }\n    }\n    catch (RuntimeException localRuntimeException)\n    {\n      throw d(localRuntimeException);\n    }\n  }\n  \n```\n### 破解的2个思路\n- 还原代码中的所有加密字符串，根据字符串的内定位到相关的代码，利用javassist修改class文件，将文件替换掉原来的文件\n- 逆向出他的认证算法，然后做个注册机之类的。iedis是采用服务器认证的，每次启动都要去服务器查询激活，所以注册机不适合。但是我们可以本地架设一个认证服务。\n\n> 架设认证服务器还是比较简单的，下面还是主要研究一下第一种思路。\n\n### 还原字符串\n从那些混淆的代码去定位软件的运行逻辑很难下手，但是我们可以换个思路，将软件运行过程中字符串都打印出来，这样我们基本上就可以得到一份软件的运行日志，对java程序进行运行时插入语句看似很麻烦，其实JVM默认就支持javaagent，写个javaagent即可达到效果，javaagent的使用可以参考[《javaagent-的使用》](http://liaojiacan.me/2017/10/10/javaagent-%E7%9A%84%E4%BD%BF%E7%94%A8/)\n\n1. 编写javaagent程序\n   \n```\n/**\n * 给iedis的加密字符串函数 插入打印代码\n */\npublic class IedisTransformer implements ClassFileTransformer {\n\n\tprivate final static String IDEA_LIB=\"/Applications/IntelliJ IDEA.app/Contents/lib/*\";\n\tprivate final static String IDEIS_LIB=\"/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*\";\n\n\tpublic IedisTransformer() {\n\t\ttry {\n\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);\n\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);\n\t\t} catch (NotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t@Override\n\tpublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n\t\tif(className.startsWith(\"com/seventh7/widget/iedis\")){\n\t\t\ttry {\n\t\t\t\tCtClass clazz = ClassPool.getDefault().makeClass(new ByteArrayInputStream(classfileBuffer));\n\t\t\t\tCtMethod[] methods = clazz.getDeclaredMethods();\n\t\t\t\tCtClass string = ClassPool.getDefault().getCtClass(String.class.getName());\n\t\t\t\tfor(CtMethod method :methods){\n\n\t\t\t\t\tif(method.getLongName().startsWith(\"com.seventh7.widget.iedis.a.p.f\")){\n\t\t\t\t\t\tSystem.out.println(\"Inject :: SUCCESS!\");\n\t\t\t\t\t\tmethod.insertBefore(\"if(true){return true;} \");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(method.getReturnType().equals(string)){\n\t\t\t\t\t\tString name = method.getLongName();\n\t\t\t\t\t\tSystem.out.println(\"transform the iedis method:\"+name);\n\t\t\t\t\t\tmethod.insertAfter(\"System.out.println(\\\"--------------------\\\");\" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(\\\"\"+name+\"\\\"); \" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(java.util.Arrays.toString($args)); \" +\n\t\t\t\t\t\t\t\t\t\" System.out.println(\\\"return:\\\"+$_);\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn clazz.toBytecode();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (NotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (CannotCompileException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n```\n2. 修改System.out，把所有的print打印到我们指定的文件中 /tmp/system.out\n\n```\npublic class Main {\n\tpublic static void premain(String agentOps, Instrumentation inst) {\n\t\tPrintStream out = null;\n\t\ttry {\n\t\t\tout = new PrintStream(\"/tmp/system.out\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.setOut(out);\n\t\tSystem.setErr(out);\n\n\t\tif (\"iedis\".equals(agentOps)){\n\t\t\tinst.addTransformer(new IedisTransformer());\n\t\t}else if(\"injectPrint\".equals(agentOps)) {\n\t\t\tinst.addTransformer(new InjectPrintTransformer());\n\t\t}else {\n\t\t\tinst.addTransformer(new SimpleTransformer());\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(helloWorld());\n\t}\n\n\tpublic static String helloWorld(){\n\t\treturn \"This is a javaagent!\";\n\t}\n}\n\n```\n\n\n3. 配置idea启动配置，加入我们的javaagent\n\n```\n#修改idea.vmoptions文件加入下面一行配置\n-javaagent:/Users/liaojiacan/Workspace/tools/decomplie/javaagent/javaagent-1.0-SNAPSHOT.jar=iedis\n-Xms128m\n-Xmx750m\n-XX:ReservedCodeCacheSize=240m\n-XX:+UseCompressedOops\n-Dfile.encoding=UTF-8\n-XX:+UseConcMarkSweepGC\n-XX:SoftRefLRUPolicyMSPerMB=50\n-ea\n-Dsun.io.useCanonCaches=false\n-Djava.net.preferIPv4Stack=true\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:-OmitStackTraceInFastThrow\n-Xverify:none\n\n-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log\n-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof\n-Xbootclasspath/a:../lib/boot.jar\n```\n启动Idea 后我们可以在/tmp/system.out中可以看到这些关键的日志\n```\n--------------------\ncom.seventh7.widget.iedis.L.a(java.lang.String)\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\ncom.seventh7.widget.iedis.B.a()\nreturn:186b474e0ffffffb70ffffff96680ffffffc0240ffffff89456b0fffffffa320ffffffa70ffffff92\n--------------------\ncom.seventh7.widget.iedis.x.a(byte[])\nreturn:MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZm\nZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=\n--------------------\ncom.seventh7.widget.iedis.L.a(java.lang.String)\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\n\ncom.seventh7.widget.iedis.L.a(java.lang.String)\n[https://www.codesmagic.com/q2?t=MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZmZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=]\nreturn:{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13938, -6118]\nreturn:trailing\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13937, -25088]\nreturn:daysLeft\n--------------------\ncom.seventh7.widget.iedis.a.p.b(int,int)\n[-13939, 7216]\nreturn:popup\n\n\n```\n从上面的日志可以看出一些关键点：\n\n- https://www.codesmagic.com/q2?t= 是注册的服务器\n\n- com.seventh7.widget.iedis.a.o 这个类是很关键的类\n\n- 认证服务器返回的认证结果为\n {\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n\n\n> 查看反编译的代码，可以看出这个类是一个抽象类，他的唯一子类是com.seventh7.widget.iedis.a.p，根据外面获取到的运行日志，大概可以推断出 f这个方法是认证的方法。\n\n\n```\npackage com.seventh7.widget.iedis.a;\n\nimport com.seventh7.widget.iedis.b.d.a;\nimport java.util.Map;\nimport java.io.IOException;\nimport com.seventh7.widget.iedis.L;\n\nclass p extends o\n{\n    private static final String[] kb;\n    private static final String[] lb;\n    \n    //基本上可以推断出 这个就是认证的方法，最直接的方法就是直接return true\n    @Override\n    protected boolean f() throws IOException {\n        //this.d() 是调用https://www.codesmagic.com/q2去注册的\n        //Map的返回值{\"trailing\":true,\"daysLeft\":9,\"popup\":true,\"activated\":false}\n        final Map d = this.d();\n        //trailing\n        final boolean booleanValue = L.a(d, b(-13938, -6118));\n        //this.d()执行后的异常信息。\n        final a[] b = av.b();\n        //daysLeft\n        final int b2 = L.b(d, b(-13937, -25088));\n        //popup\n        final boolean booleanValue2 = L.a(d, b(-13939, 7216));\n        boolean booleanValue3 = false;\n        Label_0104: {\n            Label_0074: {\n                boolean b3;\n                try {\n                    b3 = (booleanValue3 = booleanValue);\n                    if (b != null) {\n                        break Label_0104;\n                    }\n                    if (b3) {\n                        break Label_0074;\n                    }\n                    break Label_0074;\n                }\n                catch (IOException ex) {\n                    throw b(ex);\n                }\n                try {\n                    if (b3) {\n                        this.a(b2, booleanValue2);\n                        return false;\n                    }\n                }\n                catch (IOException ex2) {\n                    throw b(ex2);\n                }\n            }\n            //actived\n            booleanValue3 = L.a(d, b(-13940, 8507));\n        }\n        final boolean b4 = booleanValue3;\n        \n        //如果已经过了试用，就检测激活\n        Label_0122: {\n            boolean b5;\n            try {\n                final boolean b6;\n                b5 = (b6 = b4);\n                // b = av.b()\n                if (b != null) {\n                    return b6;\n                }\n                if (!b5) {\n                    break Label_0122;\n                }\n                return true;\n            }\n            catch (IOException ex3) {\n                throw b(ex3);\n            }\n            try {\n                if (!b5) {\n                    this.c();\n                    return false;\n                }\n            }\n            catch (IOException ex4) {\n                throw b(ex4);\n            }\n        }\n        return true;\n    }\n    \n    private static IOException b(final IOException ex) {\n        return ex;\n    }\n\n  \n}\n\n```\n\n从上面的分享结果可以看出，有两种破解思路\n\n- 方法一 修改 com.seventh7.widget.iedis.a.p.f 永远return true\n\n- 方法二 搭建一个认证服务器，本地替换host，认证服务器返回的结果为\n\n\n```\n{ \"trailing\": false, \"popup\": true, \"activated\": true, \"daysLeft\": 0 }\n```\n\n方法一的实现\n\n```\npublic class IedisCracker {\n\n\tprivate final static String IDEA_LIB=\"/Applications/IntelliJ IDEA.app/Contents/lib/*\";\n\tprivate final static String IDEIS_LIB=\"/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*\";\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);\n\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);\n\n\t\t\tCtClass clazz = ClassPool.getDefault().getCtClass(\"com.seventh7.widget.iedis.a.p\");\n\n\t\t\tCtMethod[] mds = clazz.getDeclaredMethods();\n\t\t\tfor(CtMethod method : mds){\n\t\t\t\tif(method.getLongName().startsWith(\"com.seventh7.widget.iedis.a.p.f\")){\n\t\t\t\t\tSystem.out.println(\"Inject :: SUCCESS!\");\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmethod.insertBefore(\"if(true){return true;} \");\n\t\t\t\t\t} catch (CannotCompileException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclazz.writeFile(\"/tmp/p.class\");\n\n\t\t} catch (NotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (CannotCompileException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n","slug":"Iedis破解思路","published":1,"updated":"2018-02-08T06:58:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bc0003kg88phingq15","content":"<blockquote>\n<p>Iedis是IDEA上的一个收费redis插件，java编写的，既然是java写的，收费这些自然是很容易绕过的。由于Java太容易被反编译，作者还是做了些代码混淆和字符串加密。</p>\n</blockquote>\n<h3 id=\"利用jd-gui反编译出来的代码片段\"><a class=\"markdownIt-Anchor\" href=\"#利用jd-gui反编译出来的代码片段\"></a> 利用JD-GUI反编译出来的代码片段</h3>\n<p>可以看出类名和字符串都被混淆和加密了，从代码上很难去定位和分析他的注册流程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.seventh7.widget.iedis.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.intellij.icons.AllIcons.General;</span><br><span class=\"line\">import com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class=\"line\">import com.intellij.openapi.ui.Messages;</span><br><span class=\"line\"></span><br><span class=\"line\">class i</span><br><span class=\"line\">  extends e</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  private static final String[] ib;</span><br><span class=\"line\">  private static final String[] jb;</span><br><span class=\"line\">  </span><br><span class=\"line\">  i(n paramn)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    super(a(20539, 52876), a(20539, 52876), AllIcons.General.Remove, a(20537, 55341), paramn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  void a(AnActionEvent paramAnActionEvent, P paramP)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    String str1 = String.format(a(20538, 25199), new Object[] &#123; paramP.f() &#125;);</span><br><span class=\"line\">    String str2 = a(20536, 20012);</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      if (Messages.showOkCancelDialog(a(), str1, str2, Messages.getQuestionIcon()) == 0) &#123;</span><br><span class=\"line\">        com.seventh7.widget.iedis.d.e.a().a(a(), paramP.b());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (RuntimeException localRuntimeException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      throw d(localRuntimeException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"破解的2个思路\"><a class=\"markdownIt-Anchor\" href=\"#破解的2个思路\"></a> 破解的2个思路</h3>\n<ul>\n<li>还原代码中的所有加密字符串，根据字符串的内定位到相关的代码，利用javassist修改class文件，将文件替换掉原来的文件</li>\n<li>逆向出他的认证算法，然后做个注册机之类的。iedis是采用服务器认证的，每次启动都要去服务器查询激活，所以注册机不适合。但是我们可以本地架设一个认证服务。</li>\n</ul>\n<blockquote>\n<p>架设认证服务器还是比较简单的，下面还是主要研究一下第一种思路。</p>\n</blockquote>\n<h3 id=\"还原字符串\"><a class=\"markdownIt-Anchor\" href=\"#还原字符串\"></a> 还原字符串</h3>\n<p>从那些混淆的代码去定位软件的运行逻辑很难下手，但是我们可以换个思路，将软件运行过程中字符串都打印出来，这样我们基本上就可以得到一份软件的运行日志，对java程序进行运行时插入语句看似很麻烦，其实JVM默认就支持javaagent，写个javaagent即可达到效果，javaagent的使用可以参考<a href=\"http://liaojiacan.me/2017/10/10/javaagent-%E7%9A%84%E4%BD%BF%E7%94%A8/\">《javaagent-的使用》</a></p>\n<ol>\n<li>编写javaagent程序</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 给iedis的加密字符串函数 插入打印代码</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IedisTransformer implements ClassFileTransformer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final static String IDEA_LIB=&quot;/Applications/IntelliJ IDEA.app/Contents/lib/*&quot;;</span><br><span class=\"line\">\tprivate final static String IDEIS_LIB=&quot;/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic IedisTransformer() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);</span><br><span class=\"line\">\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif(className.startsWith(&quot;com/seventh7/widget/iedis&quot;))&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tCtClass clazz = ClassPool.getDefault().makeClass(new ByteArrayInputStream(classfileBuffer));</span><br><span class=\"line\">\t\t\t\tCtMethod[] methods = clazz.getDeclaredMethods();</span><br><span class=\"line\">\t\t\t\tCtClass string = ClassPool.getDefault().getCtClass(String.class.getName());</span><br><span class=\"line\">\t\t\t\tfor(CtMethod method :methods)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tif(method.getLongName().startsWith(&quot;com.seventh7.widget.iedis.a.p.f&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;Inject :: SUCCESS!&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertBefore(&quot;if(true)&#123;return true;&#125; &quot;);</span><br><span class=\"line\">\t\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tif(method.getReturnType().equals(string))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tString name = method.getLongName();</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;transform the iedis method:&quot;+name);</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertAfter(&quot;System.out.println(\\&quot;--------------------\\&quot;);&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(\\&quot;&quot;+name+&quot;\\&quot;); &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(java.util.Arrays.toString($args)); &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(\\&quot;return:\\&quot;+$_);&quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn clazz.toBytecode();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改System.out，把所有的print打印到我们指定的文件中 /tmp/system.out</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tpublic static void premain(String agentOps, Instrumentation inst) &#123;</span><br><span class=\"line\">\t\tPrintStream out = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tout = new PrintStream(&quot;/tmp/system.out&quot;);</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.setOut(out);</span><br><span class=\"line\">\t\tSystem.setErr(out);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (&quot;iedis&quot;.equals(agentOps))&#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new IedisTransformer());</span><br><span class=\"line\">\t\t&#125;else if(&quot;injectPrint&quot;.equals(agentOps)) &#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new InjectPrintTransformer());</span><br><span class=\"line\">\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new SimpleTransformer());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(helloWorld());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String helloWorld()&#123;</span><br><span class=\"line\">\t\treturn &quot;This is a javaagent!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>配置idea启动配置，加入我们的javaagent</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改idea.vmoptions文件加入下面一行配置</span><br><span class=\"line\">-javaagent:/Users/liaojiacan/Workspace/tools/decomplie/javaagent/javaagent-1.0-SNAPSHOT.jar=iedis</span><br><span class=\"line\">-Xms128m</span><br><span class=\"line\">-Xmx750m</span><br><span class=\"line\">-XX:ReservedCodeCacheSize=240m</span><br><span class=\"line\">-XX:+UseCompressedOops</span><br><span class=\"line\">-Dfile.encoding=UTF-8</span><br><span class=\"line\">-XX:+UseConcMarkSweepGC</span><br><span class=\"line\">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class=\"line\">-ea</span><br><span class=\"line\">-Dsun.io.useCanonCaches=false</span><br><span class=\"line\">-Djava.net.preferIPv4Stack=true</span><br><span class=\"line\">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class=\"line\">-XX:-OmitStackTraceInFastThrow</span><br><span class=\"line\">-Xverify:none</span><br><span class=\"line\"></span><br><span class=\"line\">-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log</span><br><span class=\"line\">-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof</span><br><span class=\"line\">-Xbootclasspath/a:../lib/boot.jar</span><br></pre></td></tr></table></figure>\n<p>启动Idea 后我们可以在/tmp/system.out中可以看到这些关键的日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.B.a()</span><br><span class=\"line\">return:186b474e0ffffffb70ffffff96680ffffffc0240ffffff89456b0fffffffa320ffffffa70ffffff92</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.x.a(byte[])</span><br><span class=\"line\">return:MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZm</span><br><span class=\"line\">ZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">[https://www.codesmagic.com/q2?t=MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZmZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=]</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13938, -6118]</span><br><span class=\"line\">return:trailing</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13937, -25088]</span><br><span class=\"line\">return:daysLeft</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13939, 7216]</span><br><span class=\"line\">return:popup</span><br></pre></td></tr></table></figure>\n<p>从上面的日志可以看出一些关键点：</p>\n<ul>\n<li>\n<p><a href=\"https://www.codesmagic.com/q2?t=\" target=\"_blank\" rel=\"noopener\">https://www.codesmagic.com/q2?t=</a> 是注册的服务器</p>\n</li>\n<li>\n<p>com.seventh7.widget.iedis.a.o 这个类是很关键的类</p>\n</li>\n<li>\n<p>认证服务器返回的认证结果为<br>\n{“trailing”:true,“daysLeft”:9,“popup”:true,“activated”:false}</p>\n</li>\n</ul>\n<blockquote>\n<p>查看反编译的代码，可以看出这个类是一个抽象类，他的唯一子类是com.seventh7.widget.iedis.a.p，根据外面获取到的运行日志，大概可以推断出 f这个方法是认证的方法。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.seventh7.widget.iedis.a;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.seventh7.widget.iedis.b.d.a;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import com.seventh7.widget.iedis.L;</span><br><span class=\"line\"></span><br><span class=\"line\">class p extends o</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static final String[] kb;</span><br><span class=\"line\">    private static final String[] lb;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //基本上可以推断出 这个就是认证的方法，最直接的方法就是直接return true</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected boolean f() throws IOException &#123;</span><br><span class=\"line\">        //this.d() 是调用https://www.codesmagic.com/q2去注册的</span><br><span class=\"line\">        //Map的返回值&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">        final Map d = this.d();</span><br><span class=\"line\">        //trailing</span><br><span class=\"line\">        final boolean booleanValue = L.a(d, b(-13938, -6118));</span><br><span class=\"line\">        //this.d()执行后的异常信息。</span><br><span class=\"line\">        final a[] b = av.b();</span><br><span class=\"line\">        //daysLeft</span><br><span class=\"line\">        final int b2 = L.b(d, b(-13937, -25088));</span><br><span class=\"line\">        //popup</span><br><span class=\"line\">        final boolean booleanValue2 = L.a(d, b(-13939, 7216));</span><br><span class=\"line\">        boolean booleanValue3 = false;</span><br><span class=\"line\">        Label_0104: &#123;</span><br><span class=\"line\">            Label_0074: &#123;</span><br><span class=\"line\">                boolean b3;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    b3 = (booleanValue3 = booleanValue);</span><br><span class=\"line\">                    if (b != null) &#123;</span><br><span class=\"line\">                        break Label_0104;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (b3) &#123;</span><br><span class=\"line\">                        break Label_0074;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    break Label_0074;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (IOException ex) &#123;</span><br><span class=\"line\">                    throw b(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (b3) &#123;</span><br><span class=\"line\">                        this.a(b2, booleanValue2);</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (IOException ex2) &#123;</span><br><span class=\"line\">                    throw b(ex2);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //actived</span><br><span class=\"line\">            booleanValue3 = L.a(d, b(-13940, 8507));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final boolean b4 = booleanValue3;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //如果已经过了试用，就检测激活</span><br><span class=\"line\">        Label_0122: &#123;</span><br><span class=\"line\">            boolean b5;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                final boolean b6;</span><br><span class=\"line\">                b5 = (b6 = b4);</span><br><span class=\"line\">                // b = av.b()</span><br><span class=\"line\">                if (b != null) &#123;</span><br><span class=\"line\">                    return b6;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (!b5) &#123;</span><br><span class=\"line\">                    break Label_0122;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (IOException ex3) &#123;</span><br><span class=\"line\">                throw b(ex3);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (!b5) &#123;</span><br><span class=\"line\">                    this.c();</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (IOException ex4) &#123;</span><br><span class=\"line\">                throw b(ex4);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static IOException b(final IOException ex) &#123;</span><br><span class=\"line\">        return ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的分享结果可以看出，有两种破解思路</p>\n<ul>\n<li>\n<p>方法一 修改 com.seventh7.widget.iedis.a.p.f 永远return true</p>\n</li>\n<li>\n<p>方法二 搭建一个认证服务器，本地替换host，认证服务器返回的结果为</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;trailing&quot;: false, &quot;popup&quot;: true, &quot;activated&quot;: true, &quot;daysLeft&quot;: 0 &#125;</span><br></pre></td></tr></table></figure>\n<p>方法一的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IedisCracker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final static String IDEA_LIB=&quot;/Applications/IntelliJ IDEA.app/Contents/lib/*&quot;;</span><br><span class=\"line\">\tprivate final static String IDEIS_LIB=&quot;/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCtClass clazz = ClassPool.getDefault().getCtClass(&quot;com.seventh7.widget.iedis.a.p&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCtMethod[] mds = clazz.getDeclaredMethods();</span><br><span class=\"line\">\t\t\tfor(CtMethod method : mds)&#123;</span><br><span class=\"line\">\t\t\t\tif(method.getLongName().startsWith(&quot;com.seventh7.widget.iedis.a.p.f&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;Inject :: SUCCESS!&quot;);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertBefore(&quot;if(true)&#123;return true;&#125; &quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tclazz.writeFile(&quot;/tmp/p.class&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Iedis是IDEA上的一个收费redis插件，java编写的，既然是java写的，收费这些自然是很容易绕过的。由于Java太容易被反编译，作者还是做了些代码混淆和字符串加密。</p>\n</blockquote>\n<h3 id=\"利用jd-gui反编译出来的代码片段\"><a class=\"markdownIt-Anchor\" href=\"#利用jd-gui反编译出来的代码片段\"></a> 利用JD-GUI反编译出来的代码片段</h3>\n<p>可以看出类名和字符串都被混淆和加密了，从代码上很难去定位和分析他的注册流程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.seventh7.widget.iedis.config;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.intellij.icons.AllIcons.General;</span><br><span class=\"line\">import com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class=\"line\">import com.intellij.openapi.ui.Messages;</span><br><span class=\"line\"></span><br><span class=\"line\">class i</span><br><span class=\"line\">  extends e</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  private static final String[] ib;</span><br><span class=\"line\">  private static final String[] jb;</span><br><span class=\"line\">  </span><br><span class=\"line\">  i(n paramn)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    super(a(20539, 52876), a(20539, 52876), AllIcons.General.Remove, a(20537, 55341), paramn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  void a(AnActionEvent paramAnActionEvent, P paramP)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    String str1 = String.format(a(20538, 25199), new Object[] &#123; paramP.f() &#125;);</span><br><span class=\"line\">    String str2 = a(20536, 20012);</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      if (Messages.showOkCancelDialog(a(), str1, str2, Messages.getQuestionIcon()) == 0) &#123;</span><br><span class=\"line\">        com.seventh7.widget.iedis.d.e.a().a(a(), paramP.b());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (RuntimeException localRuntimeException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      throw d(localRuntimeException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"破解的2个思路\"><a class=\"markdownIt-Anchor\" href=\"#破解的2个思路\"></a> 破解的2个思路</h3>\n<ul>\n<li>还原代码中的所有加密字符串，根据字符串的内定位到相关的代码，利用javassist修改class文件，将文件替换掉原来的文件</li>\n<li>逆向出他的认证算法，然后做个注册机之类的。iedis是采用服务器认证的，每次启动都要去服务器查询激活，所以注册机不适合。但是我们可以本地架设一个认证服务。</li>\n</ul>\n<blockquote>\n<p>架设认证服务器还是比较简单的，下面还是主要研究一下第一种思路。</p>\n</blockquote>\n<h3 id=\"还原字符串\"><a class=\"markdownIt-Anchor\" href=\"#还原字符串\"></a> 还原字符串</h3>\n<p>从那些混淆的代码去定位软件的运行逻辑很难下手，但是我们可以换个思路，将软件运行过程中字符串都打印出来，这样我们基本上就可以得到一份软件的运行日志，对java程序进行运行时插入语句看似很麻烦，其实JVM默认就支持javaagent，写个javaagent即可达到效果，javaagent的使用可以参考<a href=\"http://liaojiacan.me/2017/10/10/javaagent-%E7%9A%84%E4%BD%BF%E7%94%A8/\">《javaagent-的使用》</a></p>\n<ol>\n<li>编写javaagent程序</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 给iedis的加密字符串函数 插入打印代码</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IedisTransformer implements ClassFileTransformer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final static String IDEA_LIB=&quot;/Applications/IntelliJ IDEA.app/Contents/lib/*&quot;;</span><br><span class=\"line\">\tprivate final static String IDEIS_LIB=&quot;/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic IedisTransformer() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);</span><br><span class=\"line\">\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif(className.startsWith(&quot;com/seventh7/widget/iedis&quot;))&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tCtClass clazz = ClassPool.getDefault().makeClass(new ByteArrayInputStream(classfileBuffer));</span><br><span class=\"line\">\t\t\t\tCtMethod[] methods = clazz.getDeclaredMethods();</span><br><span class=\"line\">\t\t\t\tCtClass string = ClassPool.getDefault().getCtClass(String.class.getName());</span><br><span class=\"line\">\t\t\t\tfor(CtMethod method :methods)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tif(method.getLongName().startsWith(&quot;com.seventh7.widget.iedis.a.p.f&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;Inject :: SUCCESS!&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertBefore(&quot;if(true)&#123;return true;&#125; &quot;);</span><br><span class=\"line\">\t\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tif(method.getReturnType().equals(string))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tString name = method.getLongName();</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;transform the iedis method:&quot;+name);</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertAfter(&quot;System.out.println(\\&quot;--------------------\\&quot;);&quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(\\&quot;&quot;+name+&quot;\\&quot;); &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(java.util.Arrays.toString($args)); &quot; +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&quot; System.out.println(\\&quot;return:\\&quot;+$_);&quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\treturn clazz.toBytecode();</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改System.out，把所有的print打印到我们指定的文件中 /tmp/system.out</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tpublic static void premain(String agentOps, Instrumentation inst) &#123;</span><br><span class=\"line\">\t\tPrintStream out = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tout = new PrintStream(&quot;/tmp/system.out&quot;);</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.setOut(out);</span><br><span class=\"line\">\t\tSystem.setErr(out);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (&quot;iedis&quot;.equals(agentOps))&#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new IedisTransformer());</span><br><span class=\"line\">\t\t&#125;else if(&quot;injectPrint&quot;.equals(agentOps)) &#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new InjectPrintTransformer());</span><br><span class=\"line\">\t\t&#125;else &#123;</span><br><span class=\"line\">\t\t\tinst.addTransformer(new SimpleTransformer());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(helloWorld());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String helloWorld()&#123;</span><br><span class=\"line\">\t\treturn &quot;This is a javaagent!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>配置idea启动配置，加入我们的javaagent</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#修改idea.vmoptions文件加入下面一行配置</span><br><span class=\"line\">-javaagent:/Users/liaojiacan/Workspace/tools/decomplie/javaagent/javaagent-1.0-SNAPSHOT.jar=iedis</span><br><span class=\"line\">-Xms128m</span><br><span class=\"line\">-Xmx750m</span><br><span class=\"line\">-XX:ReservedCodeCacheSize=240m</span><br><span class=\"line\">-XX:+UseCompressedOops</span><br><span class=\"line\">-Dfile.encoding=UTF-8</span><br><span class=\"line\">-XX:+UseConcMarkSweepGC</span><br><span class=\"line\">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class=\"line\">-ea</span><br><span class=\"line\">-Dsun.io.useCanonCaches=false</span><br><span class=\"line\">-Djava.net.preferIPv4Stack=true</span><br><span class=\"line\">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class=\"line\">-XX:-OmitStackTraceInFastThrow</span><br><span class=\"line\">-Xverify:none</span><br><span class=\"line\"></span><br><span class=\"line\">-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log</span><br><span class=\"line\">-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof</span><br><span class=\"line\">-Xbootclasspath/a:../lib/boot.jar</span><br></pre></td></tr></table></figure>\n<p>启动Idea 后我们可以在/tmp/system.out中可以看到这些关键的日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.B.a()</span><br><span class=\"line\">return:186b474e0ffffffb70ffffff96680ffffffc0240ffffff89456b0fffffffa320ffffffa70ffffff92</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.x.a(byte[])</span><br><span class=\"line\">return:MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZm</span><br><span class=\"line\">ZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">com.seventh7.widget.iedis.L.a(java.lang.String)</span><br><span class=\"line\">[https://www.codesmagic.com/q2?t=MTg2YjQ3NGUwZmZmZmZmYjcwZmZmZmZmOTY2ODBmZmZmZmZjMDI0MGZmZmZmZjg5NDU2YjBmZmZmZmZmYTMyMGZmZmZmZmE3MGZmZmZmZjkyOjI=]</span><br><span class=\"line\">return:&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13938, -6118]</span><br><span class=\"line\">return:trailing</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13937, -25088]</span><br><span class=\"line\">return:daysLeft</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">com.seventh7.widget.iedis.a.p.b(int,int)</span><br><span class=\"line\">[-13939, 7216]</span><br><span class=\"line\">return:popup</span><br></pre></td></tr></table></figure>\n<p>从上面的日志可以看出一些关键点：</p>\n<ul>\n<li>\n<p><a href=\"https://www.codesmagic.com/q2?t=\" target=\"_blank\" rel=\"noopener\">https://www.codesmagic.com/q2?t=</a> 是注册的服务器</p>\n</li>\n<li>\n<p>com.seventh7.widget.iedis.a.o 这个类是很关键的类</p>\n</li>\n<li>\n<p>认证服务器返回的认证结果为<br>\n{“trailing”:true,“daysLeft”:9,“popup”:true,“activated”:false}</p>\n</li>\n</ul>\n<blockquote>\n<p>查看反编译的代码，可以看出这个类是一个抽象类，他的唯一子类是com.seventh7.widget.iedis.a.p，根据外面获取到的运行日志，大概可以推断出 f这个方法是认证的方法。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.seventh7.widget.iedis.a;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.seventh7.widget.iedis.b.d.a;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import com.seventh7.widget.iedis.L;</span><br><span class=\"line\"></span><br><span class=\"line\">class p extends o</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static final String[] kb;</span><br><span class=\"line\">    private static final String[] lb;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //基本上可以推断出 这个就是认证的方法，最直接的方法就是直接return true</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected boolean f() throws IOException &#123;</span><br><span class=\"line\">        //this.d() 是调用https://www.codesmagic.com/q2去注册的</span><br><span class=\"line\">        //Map的返回值&#123;&quot;trailing&quot;:true,&quot;daysLeft&quot;:9,&quot;popup&quot;:true,&quot;activated&quot;:false&#125;</span><br><span class=\"line\">        final Map d = this.d();</span><br><span class=\"line\">        //trailing</span><br><span class=\"line\">        final boolean booleanValue = L.a(d, b(-13938, -6118));</span><br><span class=\"line\">        //this.d()执行后的异常信息。</span><br><span class=\"line\">        final a[] b = av.b();</span><br><span class=\"line\">        //daysLeft</span><br><span class=\"line\">        final int b2 = L.b(d, b(-13937, -25088));</span><br><span class=\"line\">        //popup</span><br><span class=\"line\">        final boolean booleanValue2 = L.a(d, b(-13939, 7216));</span><br><span class=\"line\">        boolean booleanValue3 = false;</span><br><span class=\"line\">        Label_0104: &#123;</span><br><span class=\"line\">            Label_0074: &#123;</span><br><span class=\"line\">                boolean b3;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    b3 = (booleanValue3 = booleanValue);</span><br><span class=\"line\">                    if (b != null) &#123;</span><br><span class=\"line\">                        break Label_0104;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (b3) &#123;</span><br><span class=\"line\">                        break Label_0074;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    break Label_0074;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (IOException ex) &#123;</span><br><span class=\"line\">                    throw b(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    if (b3) &#123;</span><br><span class=\"line\">                        this.a(b2, booleanValue2);</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (IOException ex2) &#123;</span><br><span class=\"line\">                    throw b(ex2);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //actived</span><br><span class=\"line\">            booleanValue3 = L.a(d, b(-13940, 8507));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final boolean b4 = booleanValue3;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //如果已经过了试用，就检测激活</span><br><span class=\"line\">        Label_0122: &#123;</span><br><span class=\"line\">            boolean b5;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                final boolean b6;</span><br><span class=\"line\">                b5 = (b6 = b4);</span><br><span class=\"line\">                // b = av.b()</span><br><span class=\"line\">                if (b != null) &#123;</span><br><span class=\"line\">                    return b6;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (!b5) &#123;</span><br><span class=\"line\">                    break Label_0122;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (IOException ex3) &#123;</span><br><span class=\"line\">                throw b(ex3);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (!b5) &#123;</span><br><span class=\"line\">                    this.c();</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (IOException ex4) &#123;</span><br><span class=\"line\">                throw b(ex4);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static IOException b(final IOException ex) &#123;</span><br><span class=\"line\">        return ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的分享结果可以看出，有两种破解思路</p>\n<ul>\n<li>\n<p>方法一 修改 com.seventh7.widget.iedis.a.p.f 永远return true</p>\n</li>\n<li>\n<p>方法二 搭建一个认证服务器，本地替换host，认证服务器返回的结果为</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; &quot;trailing&quot;: false, &quot;popup&quot;: true, &quot;activated&quot;: true, &quot;daysLeft&quot;: 0 &#125;</span><br></pre></td></tr></table></figure>\n<p>方法一的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IedisCracker &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final static String IDEA_LIB=&quot;/Applications/IntelliJ IDEA.app/Contents/lib/*&quot;;</span><br><span class=\"line\">\tprivate final static String IDEIS_LIB=&quot;/Users/liaojiacan/Library/Application Support/IntelliJIdea2017.2/Iedis/lib/*&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEA_LIB);</span><br><span class=\"line\">\t\t\tClassPool.getDefault().appendClassPath(IDEIS_LIB);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCtClass clazz = ClassPool.getDefault().getCtClass(&quot;com.seventh7.widget.iedis.a.p&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tCtMethod[] mds = clazz.getDeclaredMethods();</span><br><span class=\"line\">\t\t\tfor(CtMethod method : mds)&#123;</span><br><span class=\"line\">\t\t\t\tif(method.getLongName().startsWith(&quot;com.seventh7.widget.iedis.a.p.f&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;Inject :: SUCCESS!&quot;);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmethod.insertBefore(&quot;if(true)&#123;return true;&#125; &quot;);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tclazz.writeFile(&quot;/tmp/p.class&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; catch (NotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (CannotCompileException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Insert ignore 和update 导致的死锁问题分析","author":"Jiacan Liao","date":"2019-02-27T12:13:00.000Z","_content":"### 业务逻辑以及死锁现象\n业务逻辑大概如下：\n\n1. 在粉丝表新增一条关系记录。\n2. 假如关注者也是当前用户的粉丝，则更新2者的标记为相互关注。\n\n业务代码如下, 最初是考虑用insert ignore 来解决幂等的问题，所以**允许重复调用**。\n```\n\n//是否 关注的用户是操作者的粉丝（互粉）\nboolean isHisFans = fansDao.isFans(fansUserId,followingUserId);\n\n//\tinsert ignore into \n//  fans(fans_user_id,following_user_id,following_each_other)\n//\tvalues(#{fansUserId}, #{followingUserId},#{followingEachOther})\nint updateNum = fansDao.addFans(fansUserId, followingUserId,isHisFans);\n\nboolean addAndCheck = false;\n\nif(isHisFans){\n    // update fans\n\t// set following_each_other = #{followingEachOther}\n\t// where (fans_user_id = #{fansUserId} and following_user_id =  #{followingUserId} ) or (fans_user_id = #{followingUserId} and following_user_id = #{fansUserId} )\n\tint num = fansDao.setFollowingEachOther(followingUserId,fansUserId,true);\n\tif( num >0 ){\n\t\t//重新调整数据\n\t\taddAndCheck = true;\n\t}\n}\n\n```\n\n线上产生的死锁的信息(show engine innodb status)\n\n```\nLATEST DETECTED DEADLOCK\n------------------------\n2019-02-12 23:24:45 7fa406a4f700\n*** (1) TRANSACTION:\nTRANSACTION 515545684, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 3 lock struct(s), heap size 1184, 2 row lock(s)\nMySQL thread id 2121, OS thread handle 0x7fa406b12700, query id 1702086 10.10.17.63 jb-glive Searching rows for update\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '1776093' and following_user_id = '1331089' ) or (fans_user_id = '1331089' and following_user_id = '1776093' )\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545684 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31333331303839; asc 1331089;;\n 1: len 7; hex 31373736303933; asc 1776093;;\n 2: len 8; hex 8000000001282c31; asc      (,1;;\n\n*** (2) TRANSACTION:\nTRANSACTION 515545683, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\n5 lock struct(s), heap size 1184, 4 row lock(s)\nMySQL thread id 3485, OS thread handle 0x7fa406a4f700, query id 1702085 10.10.17.61 jb-glive Searching rows for update\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '1776093' and following_user_id = '1331089' ) or (fans_user_id = '1331089' and following_user_id = '1776093' )\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap\nRecord lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31333331303839; asc 1331089;;\n 1: len 7; hex 31373736303933; asc 1776093;;\n 2: len 8; hex 8000000001282c31; asc      (,1;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 1023 page no 38446 n bits 360 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 294 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31373736303933; asc 1776093;;\n 1: len 7; hex 31333331303839; asc 1331089;;\n 2: len 8; hex 8000000001282c59; asc      (,Y;;\n\n*** WE ROLL BACK TRANSACTION (1)\n```\n锁分析：\n\n1. 事务T2持有 (fans_user_id=1331089,following_user_id=1776093,主键=hex8000000001282c31) X 锁；\n2. 事务T2等待行锁\n (fans_user_id=1776093,following_user_id=1331089,主键=hex8000000001282c59) X 锁；\n3. 事务T1等待T2持有的锁。\n4. 事务T1此时应该还持有T2等待的锁，只是没显示出来。\n\n> 看起来就是典型的AB-BA问题\n\n## 重现\n\n我们先简化上面的业务代码逻辑，假设fans_user_id=11000,following_user_id=10086，其实就是执行2个SQL：\n```\n1. insert ignore into fans(fans_user_id,following_user_id) values(11000,10086);\n2. update fans set following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) \n\t\tor (fans_user_id = '10086' and following_user_id = '11000' );\n```\n场景一：不存在fans_user_id=11000,following_user_id=10086的这条数据。\n\nT1 | T2\n---|---\n>begin; | >begin;\ninsert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); | *\n* | insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //阻塞\nupdate fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' ) | *\ncommit; | insert 语句开始执行\n* | update fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' )\n* | commit;\n\n> 分析：\n> 1. 由于数据库并没有这条记录，所以**事务T1**在执行insert ignore into 时可以执行成功，并给这行数据加了X锁。\n> 2. **事务T2**在执行insert ignore into 时由于获取不到行锁，直接阻塞。\n> 3. 后面都是顺序执行，所以并不会出现死锁的问题。\n\n场景二：数据库已经存在fans_user_id=11000,following_user_id=10086的这条数据。\n\nT1 | T2\n---|---\n>begin; | >begin;\ninsert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); | *\n* | insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //执行成功\nupdate fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' ) | *\n阻塞等待 | *\n* | update fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' )\n* | Deadlock found when trying to get lock; <br>try restarting transaction\n\n> 分析：\n> 1. 由于数据库已经存在该记录，所以事务T1执行insert ignore into 会插入失败，并给该记录加了个S锁。\n> 2. 由于S锁是相互兼容的，所以事务T2也给该记录加了S锁。\n> 3. T1继续执行update语句，尝试给2行数据加X锁，但是其中有一行数据已经被T2加了S锁，此时T1回到等待队列中继续等待。\n> 4. T2继续执行update语句，尝试给2行数据加X锁，但是发现T1已经对这2行数据请求了X锁，且在等待T2释放S锁，而T1又因为T2不释放S锁而无法升级为X锁。\n> \n> 可以参考mysql官方的例子，原理是一样的。[innodb-死锁例子](https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html)\n\n下面是场景二的DEADLOCK信息（show engine innodb status），你会发现其实跟生产环境的锁是又区别的，线上的死锁信息中T2 持有的是一个X锁（这个不知道怎么解释，无法重现）\n```\nLATEST DETECTED DEADLOCK\n------------------------\n2019-02-27 14:15:00 0x7000034b5000\n*** (1) TRANSACTION:\nTRANSACTION 620686, ACTIVE 19 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 1136, 4 row lock(s)\nMySQL thread id 63, OS thread handle 123145355350016, query id 1172740 localhost 127.0.0.1 root updating\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) or (fans_user_id = '10086' and following_user_id = '11000' )\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620686 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3131303030; asc 11000;;\n 1: len 5; hex 3130303836; asc 10086;;\n 2: len 8; hex 800000000143abeb; asc      C  ;;\n\n*** (2) TRANSACTION:\nTRANSACTION 620687, ACTIVE 16 sec starting index read\nmysql tables in use 1, locked 1\n3 lock struct(s), heap size 1136, 2 row lock(s)\nMySQL thread id 61, OS thread handle 123145357578240, query id 1172741 localhost 127.0.0.1 root updating\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) or (fans_user_id = '10086' and following_user_id = '11000' )\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock mode S\nRecord lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3131303030; asc 11000;;\n 1: len 5; hex 3130303836; asc 10086;;\n 2: len 8; hex 800000000143abeb; asc      C  ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 279 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3130303836; asc 10086;;\n 1: len 5; hex 3131303030; asc 11000;;\n 2: len 8; hex 800000000143abdb; asc      C  ;;\n\n*** WE ROLL BACK TRANSACTION (2)\n\n```\n\n\n## 解决方法\n在这个案例中，发生死锁的原因主要是insert ignore 在数据已经存在时只是加了S锁。所以解决的办法其实又几个。\n1. 使用其他的幂等处理办法，不要依赖insert ignore。在这个案例中，其实应该直接使用insert，不允许重复执行，可以捕获唯一key异常来获取updateNum进行下个业务处理。\n2. 直接在业务开头使用select for ... update 来加排他锁保证业务是串形执行（只是从死锁这个问题考虑，如果考虑性能需要找其他方案）。\n3. 假如就非得使用insert ignore 和 update，那么我们可以考虑在这个业务加个重试，数据库的死锁并不是致命的，设置好数据库的事物超时时间，然后遇到死锁问题，我们可以在业务进行重试解决。\n\n## 未分析清楚的点\n1. 为什么线上的锁他是一个X锁，并不是一个S锁？是否有场景三？MySQL官方文档有一段话，感觉有点关联，但是无法对应上现象,说的是insert 和 delete 语句其实并不是真正原子的行锁。\n> InnoDB uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.\n\n\n","source":"_posts/Insert-ignore-和update-导致的死锁问题分析.md","raw":"title: Insert ignore 和update 导致的死锁问题分析\nauthor: Jiacan Liao\ntags:\n  - MySQL\n  - innodb\ncategories:\n  - 死锁\ndate: 2019-02-27 20:13:00\n---\n### 业务逻辑以及死锁现象\n业务逻辑大概如下：\n\n1. 在粉丝表新增一条关系记录。\n2. 假如关注者也是当前用户的粉丝，则更新2者的标记为相互关注。\n\n业务代码如下, 最初是考虑用insert ignore 来解决幂等的问题，所以**允许重复调用**。\n```\n\n//是否 关注的用户是操作者的粉丝（互粉）\nboolean isHisFans = fansDao.isFans(fansUserId,followingUserId);\n\n//\tinsert ignore into \n//  fans(fans_user_id,following_user_id,following_each_other)\n//\tvalues(#{fansUserId}, #{followingUserId},#{followingEachOther})\nint updateNum = fansDao.addFans(fansUserId, followingUserId,isHisFans);\n\nboolean addAndCheck = false;\n\nif(isHisFans){\n    // update fans\n\t// set following_each_other = #{followingEachOther}\n\t// where (fans_user_id = #{fansUserId} and following_user_id =  #{followingUserId} ) or (fans_user_id = #{followingUserId} and following_user_id = #{fansUserId} )\n\tint num = fansDao.setFollowingEachOther(followingUserId,fansUserId,true);\n\tif( num >0 ){\n\t\t//重新调整数据\n\t\taddAndCheck = true;\n\t}\n}\n\n```\n\n线上产生的死锁的信息(show engine innodb status)\n\n```\nLATEST DETECTED DEADLOCK\n------------------------\n2019-02-12 23:24:45 7fa406a4f700\n*** (1) TRANSACTION:\nTRANSACTION 515545684, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 3 lock struct(s), heap size 1184, 2 row lock(s)\nMySQL thread id 2121, OS thread handle 0x7fa406b12700, query id 1702086 10.10.17.63 jb-glive Searching rows for update\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '1776093' and following_user_id = '1331089' ) or (fans_user_id = '1331089' and following_user_id = '1776093' )\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545684 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31333331303839; asc 1331089;;\n 1: len 7; hex 31373736303933; asc 1776093;;\n 2: len 8; hex 8000000001282c31; asc      (,1;;\n\n*** (2) TRANSACTION:\nTRANSACTION 515545683, ACTIVE 0 sec starting index read\nmysql tables in use 1, locked 1\n5 lock struct(s), heap size 1184, 4 row lock(s)\nMySQL thread id 3485, OS thread handle 0x7fa406a4f700, query id 1702085 10.10.17.61 jb-glive Searching rows for update\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '1776093' and following_user_id = '1331089' ) or (fans_user_id = '1331089' and following_user_id = '1776093' )\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap\nRecord lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31333331303839; asc 1331089;;\n 1: len 7; hex 31373736303933; asc 1776093;;\n 2: len 8; hex 8000000001282c31; asc      (,1;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 1023 page no 38446 n bits 360 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 294 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 7; hex 31373736303933; asc 1776093;;\n 1: len 7; hex 31333331303839; asc 1331089;;\n 2: len 8; hex 8000000001282c59; asc      (,Y;;\n\n*** WE ROLL BACK TRANSACTION (1)\n```\n锁分析：\n\n1. 事务T2持有 (fans_user_id=1331089,following_user_id=1776093,主键=hex8000000001282c31) X 锁；\n2. 事务T2等待行锁\n (fans_user_id=1776093,following_user_id=1331089,主键=hex8000000001282c59) X 锁；\n3. 事务T1等待T2持有的锁。\n4. 事务T1此时应该还持有T2等待的锁，只是没显示出来。\n\n> 看起来就是典型的AB-BA问题\n\n## 重现\n\n我们先简化上面的业务代码逻辑，假设fans_user_id=11000,following_user_id=10086，其实就是执行2个SQL：\n```\n1. insert ignore into fans(fans_user_id,following_user_id) values(11000,10086);\n2. update fans set following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) \n\t\tor (fans_user_id = '10086' and following_user_id = '11000' );\n```\n场景一：不存在fans_user_id=11000,following_user_id=10086的这条数据。\n\nT1 | T2\n---|---\n>begin; | >begin;\ninsert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); | *\n* | insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //阻塞\nupdate fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' ) | *\ncommit; | insert 语句开始执行\n* | update fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' )\n* | commit;\n\n> 分析：\n> 1. 由于数据库并没有这条记录，所以**事务T1**在执行insert ignore into 时可以执行成功，并给这行数据加了X锁。\n> 2. **事务T2**在执行insert ignore into 时由于获取不到行锁，直接阻塞。\n> 3. 后面都是顺序执行，所以并不会出现死锁的问题。\n\n场景二：数据库已经存在fans_user_id=11000,following_user_id=10086的这条数据。\n\nT1 | T2\n---|---\n>begin; | >begin;\ninsert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); | *\n* | insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //执行成功\nupdate fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' ) | *\n阻塞等待 | *\n* | update fans<br> set following_each_other = 1 <br> where (fans_user_id = '11000' and following_user_id = '10086' ) <br> or (fans_user_id = '10086' and following_user_id = '11000' )\n* | Deadlock found when trying to get lock; <br>try restarting transaction\n\n> 分析：\n> 1. 由于数据库已经存在该记录，所以事务T1执行insert ignore into 会插入失败，并给该记录加了个S锁。\n> 2. 由于S锁是相互兼容的，所以事务T2也给该记录加了S锁。\n> 3. T1继续执行update语句，尝试给2行数据加X锁，但是其中有一行数据已经被T2加了S锁，此时T1回到等待队列中继续等待。\n> 4. T2继续执行update语句，尝试给2行数据加X锁，但是发现T1已经对这2行数据请求了X锁，且在等待T2释放S锁，而T1又因为T2不释放S锁而无法升级为X锁。\n> \n> 可以参考mysql官方的例子，原理是一样的。[innodb-死锁例子](https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html)\n\n下面是场景二的DEADLOCK信息（show engine innodb status），你会发现其实跟生产环境的锁是又区别的，线上的死锁信息中T2 持有的是一个X锁（这个不知道怎么解释，无法重现）\n```\nLATEST DETECTED DEADLOCK\n------------------------\n2019-02-27 14:15:00 0x7000034b5000\n*** (1) TRANSACTION:\nTRANSACTION 620686, ACTIVE 19 sec starting index read\nmysql tables in use 1, locked 1\nLOCK WAIT 5 lock struct(s), heap size 1136, 4 row lock(s)\nMySQL thread id 63, OS thread handle 123145355350016, query id 1172740 localhost 127.0.0.1 root updating\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) or (fans_user_id = '10086' and following_user_id = '11000' )\n*** (1) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620686 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3131303030; asc 11000;;\n 1: len 5; hex 3130303836; asc 10086;;\n 2: len 8; hex 800000000143abeb; asc      C  ;;\n\n*** (2) TRANSACTION:\nTRANSACTION 620687, ACTIVE 16 sec starting index read\nmysql tables in use 1, locked 1\n3 lock struct(s), heap size 1136, 2 row lock(s)\nMySQL thread id 61, OS thread handle 123145357578240, query id 1172741 localhost 127.0.0.1 root updating\nupdate fans\n\t\tset following_each_other = 1\n\t\twhere (fans_user_id = '11000' and following_user_id = '10086' ) or (fans_user_id = '10086' and following_user_id = '11000' )\n*** (2) HOLDS THE LOCK(S):\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock mode S\nRecord lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3131303030; asc 11000;;\n 1: len 5; hex 3130303836; asc 10086;;\n 2: len 8; hex 800000000143abeb; asc      C  ;;\n\n*** (2) WAITING FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock_mode X locks rec but not gap waiting\nRecord lock, heap no 279 PHYSICAL RECORD: n_fields 3; compact format; info bits 0\n 0: len 5; hex 3130303836; asc 10086;;\n 1: len 5; hex 3131303030; asc 11000;;\n 2: len 8; hex 800000000143abdb; asc      C  ;;\n\n*** WE ROLL BACK TRANSACTION (2)\n\n```\n\n\n## 解决方法\n在这个案例中，发生死锁的原因主要是insert ignore 在数据已经存在时只是加了S锁。所以解决的办法其实又几个。\n1. 使用其他的幂等处理办法，不要依赖insert ignore。在这个案例中，其实应该直接使用insert，不允许重复执行，可以捕获唯一key异常来获取updateNum进行下个业务处理。\n2. 直接在业务开头使用select for ... update 来加排他锁保证业务是串形执行（只是从死锁这个问题考虑，如果考虑性能需要找其他方案）。\n3. 假如就非得使用insert ignore 和 update，那么我们可以考虑在这个业务加个重试，数据库的死锁并不是致命的，设置好数据库的事物超时时间，然后遇到死锁问题，我们可以在业务进行重试解决。\n\n## 未分析清楚的点\n1. 为什么线上的锁他是一个X锁，并不是一个S锁？是否有场景三？MySQL官方文档有一段话，感觉有点关联，但是无法对应上现象,说的是insert 和 delete 语句其实并不是真正原子的行锁。\n> InnoDB uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.\n\n\n","slug":"Insert-ignore-和update-导致的死锁问题分析","published":1,"updated":"2019-02-27T12:13:59.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bk0006kg88my4tzfmy","content":"<h3 id=\"业务逻辑以及死锁现象\"><a class=\"markdownIt-Anchor\" href=\"#业务逻辑以及死锁现象\"></a> 业务逻辑以及死锁现象</h3>\n<p>业务逻辑大概如下：</p>\n<ol>\n<li>在粉丝表新增一条关系记录。</li>\n<li>假如关注者也是当前用户的粉丝，则更新2者的标记为相互关注。</li>\n</ol>\n<p>业务代码如下, 最初是考虑用insert ignore 来解决幂等的问题，所以<strong>允许重复调用</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//是否 关注的用户是操作者的粉丝（互粉）</span><br><span class=\"line\">boolean isHisFans = fansDao.isFans(fansUserId,followingUserId);</span><br><span class=\"line\"></span><br><span class=\"line\">//\tinsert ignore into </span><br><span class=\"line\">//  fans(fans_user_id,following_user_id,following_each_other)</span><br><span class=\"line\">//\tvalues(#&#123;fansUserId&#125;, #&#123;followingUserId&#125;,#&#123;followingEachOther&#125;)</span><br><span class=\"line\">int updateNum = fansDao.addFans(fansUserId, followingUserId,isHisFans);</span><br><span class=\"line\"></span><br><span class=\"line\">boolean addAndCheck = false;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isHisFans)&#123;</span><br><span class=\"line\">    // update fans</span><br><span class=\"line\">\t// set following_each_other = #&#123;followingEachOther&#125;</span><br><span class=\"line\">\t// where (fans_user_id = #&#123;fansUserId&#125; and following_user_id =  #&#123;followingUserId&#125; ) or (fans_user_id = #&#123;followingUserId&#125; and following_user_id = #&#123;fansUserId&#125; )</span><br><span class=\"line\">\tint num = fansDao.setFollowingEachOther(followingUserId,fansUserId,true);</span><br><span class=\"line\">\tif( num &gt;0 )&#123;</span><br><span class=\"line\">\t\t//重新调整数据</span><br><span class=\"line\">\t\taddAndCheck = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线上产生的死锁的信息(show engine innodb status)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">2019-02-12 23:24:45 7fa406a4f700</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 515545684, ACTIVE 0 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">LOCK WAIT 3 lock struct(s), heap size 1184, 2 row lock(s)</span><br><span class=\"line\">MySQL thread id 2121, OS thread handle 0x7fa406b12700, query id 1702086 10.10.17.63 jb-glive Searching rows for update</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;1776093&apos; and following_user_id = &apos;1331089&apos; ) or (fans_user_id = &apos;1331089&apos; and following_user_id = &apos;1776093&apos; )</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545684 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 1: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c31; asc      (,1;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 515545683, ACTIVE 0 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">5 lock struct(s), heap size 1184, 4 row lock(s)</span><br><span class=\"line\">MySQL thread id 3485, OS thread handle 0x7fa406a4f700, query id 1702085 10.10.17.61 jb-glive Searching rows for update</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;1776093&apos; and following_user_id = &apos;1331089&apos; ) or (fans_user_id = &apos;1331089&apos; and following_user_id = &apos;1776093&apos; )</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap</span><br><span class=\"line\">Record lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 1: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c31; asc      (,1;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 38446 n bits 360 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 294 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 1: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c59; asc      (,Y;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure>\n<p>锁分析：</p>\n<ol>\n<li>事务T2持有 (fans_user_id=1331089,following_user_id=1776093,主键=hex8000000001282c31) X 锁；</li>\n<li>事务T2等待行锁<br>\n(fans_user_id=1776093,following_user_id=1331089,主键=hex8000000001282c59) X 锁；</li>\n<li>事务T1等待T2持有的锁。</li>\n<li>事务T1此时应该还持有T2等待的锁，只是没显示出来。</li>\n</ol>\n<blockquote>\n<p>看起来就是典型的AB-BA问题</p>\n</blockquote>\n<h2 id=\"重现\"><a class=\"markdownIt-Anchor\" href=\"#重现\"></a> 重现</h2>\n<p>我们先简化上面的业务代码逻辑，假设fans_user_id=11000,following_user_id=10086，其实就是执行2个SQL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. insert ignore into fans(fans_user_id,following_user_id) values(11000,10086);</span><br><span class=\"line\">2. update fans set following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) </span><br><span class=\"line\">\t\tor (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; );</span><br></pre></td></tr></table></figure>\n<p>场景一：不存在fans_user_id=11000,following_user_id=10086的这条数据。</p>\n<table>\n<thead>\n<tr>\n<th>T1</th>\n<th>T2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;begin;</td>\n<td>&gt;begin;</td>\n</tr>\n<tr>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086);</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //阻塞</td>\n</tr>\n<tr>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n<td>*</td>\n</tr>\n<tr>\n<td>commit;</td>\n<td>insert 语句开始执行</td>\n</tr>\n<tr>\n<td>*</td>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n</tr>\n<tr>\n<td>*</td>\n<td>commit;</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>分析：</p>\n<ol>\n<li>由于数据库并没有这条记录，所以<strong>事务T1</strong>在执行insert ignore into 时可以执行成功，并给这行数据加了X锁。</li>\n<li><strong>事务T2</strong>在执行insert ignore into 时由于获取不到行锁，直接阻塞。</li>\n<li>后面都是顺序执行，所以并不会出现死锁的问题。</li>\n</ol>\n</blockquote>\n<p>场景二：数据库已经存在fans_user_id=11000,following_user_id=10086的这条数据。</p>\n<table>\n<thead>\n<tr>\n<th>T1</th>\n<th>T2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;begin;</td>\n<td>&gt;begin;</td>\n</tr>\n<tr>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086);</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //执行成功</td>\n</tr>\n<tr>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n<td>*</td>\n</tr>\n<tr>\n<td>阻塞等待</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n</tr>\n<tr>\n<td>*</td>\n<td>Deadlock found when trying to get lock; <br>try restarting transaction</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>分析：</p>\n<ol>\n<li>由于数据库已经存在该记录，所以事务T1执行insert ignore into 会插入失败，并给该记录加了个S锁。</li>\n<li>由于S锁是相互兼容的，所以事务T2也给该记录加了S锁。</li>\n<li>T1继续执行update语句，尝试给2行数据加X锁，但是其中有一行数据已经被T2加了S锁，此时T1回到等待队列中继续等待。</li>\n<li>T2继续执行update语句，尝试给2行数据加X锁，但是发现T1已经对这2行数据请求了X锁，且在等待T2释放S锁，而T1又因为T2不释放S锁而无法升级为X锁。</li>\n</ol>\n<p>可以参考mysql官方的例子，原理是一样的。<a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html\" target=\"_blank\" rel=\"noopener\">innodb-死锁例子</a></p>\n</blockquote>\n<p>下面是场景二的DEADLOCK信息（show engine innodb status），你会发现其实跟生产环境的锁是又区别的，线上的死锁信息中T2 持有的是一个X锁（这个不知道怎么解释，无法重现）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">2019-02-27 14:15:00 0x7000034b5000</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 620686, ACTIVE 19 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">LOCK WAIT 5 lock struct(s), heap size 1136, 4 row lock(s)</span><br><span class=\"line\">MySQL thread id 63, OS thread handle 123145355350016, query id 1172740 localhost 127.0.0.1 root updating</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) or (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; )</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620686 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 1: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abeb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 620687, ACTIVE 16 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">3 lock struct(s), heap size 1136, 2 row lock(s)</span><br><span class=\"line\">MySQL thread id 61, OS thread handle 123145357578240, query id 1172741 localhost 127.0.0.1 root updating</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) or (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; )</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock mode S</span><br><span class=\"line\">Record lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 1: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abeb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 279 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 1: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abdb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h2>\n<p>在这个案例中，发生死锁的原因主要是insert ignore 在数据已经存在时只是加了S锁。所以解决的办法其实又几个。</p>\n<ol>\n<li>使用其他的幂等处理办法，不要依赖insert ignore。在这个案例中，其实应该直接使用insert，不允许重复执行，可以捕获唯一key异常来获取updateNum进行下个业务处理。</li>\n<li>直接在业务开头使用select for … update 来加排他锁保证业务是串形执行（只是从死锁这个问题考虑，如果考虑性能需要找其他方案）。</li>\n<li>假如就非得使用insert ignore 和 update，那么我们可以考虑在这个业务加个重试，数据库的死锁并不是致命的，设置好数据库的事物超时时间，然后遇到死锁问题，我们可以在业务进行重试解决。</li>\n</ol>\n<h2 id=\"未分析清楚的点\"><a class=\"markdownIt-Anchor\" href=\"#未分析清楚的点\"></a> 未分析清楚的点</h2>\n<ol>\n<li>为什么线上的锁他是一个X锁，并不是一个S锁？是否有场景三？MySQL官方文档有一段话，感觉有点关联，但是无法对应上现象,说的是insert 和 delete 语句其实并不是真正原子的行锁。</li>\n</ol>\n<blockquote>\n<p>InnoDB uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"业务逻辑以及死锁现象\"><a class=\"markdownIt-Anchor\" href=\"#业务逻辑以及死锁现象\"></a> 业务逻辑以及死锁现象</h3>\n<p>业务逻辑大概如下：</p>\n<ol>\n<li>在粉丝表新增一条关系记录。</li>\n<li>假如关注者也是当前用户的粉丝，则更新2者的标记为相互关注。</li>\n</ol>\n<p>业务代码如下, 最初是考虑用insert ignore 来解决幂等的问题，所以<strong>允许重复调用</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//是否 关注的用户是操作者的粉丝（互粉）</span><br><span class=\"line\">boolean isHisFans = fansDao.isFans(fansUserId,followingUserId);</span><br><span class=\"line\"></span><br><span class=\"line\">//\tinsert ignore into </span><br><span class=\"line\">//  fans(fans_user_id,following_user_id,following_each_other)</span><br><span class=\"line\">//\tvalues(#&#123;fansUserId&#125;, #&#123;followingUserId&#125;,#&#123;followingEachOther&#125;)</span><br><span class=\"line\">int updateNum = fansDao.addFans(fansUserId, followingUserId,isHisFans);</span><br><span class=\"line\"></span><br><span class=\"line\">boolean addAndCheck = false;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isHisFans)&#123;</span><br><span class=\"line\">    // update fans</span><br><span class=\"line\">\t// set following_each_other = #&#123;followingEachOther&#125;</span><br><span class=\"line\">\t// where (fans_user_id = #&#123;fansUserId&#125; and following_user_id =  #&#123;followingUserId&#125; ) or (fans_user_id = #&#123;followingUserId&#125; and following_user_id = #&#123;fansUserId&#125; )</span><br><span class=\"line\">\tint num = fansDao.setFollowingEachOther(followingUserId,fansUserId,true);</span><br><span class=\"line\">\tif( num &gt;0 )&#123;</span><br><span class=\"line\">\t\t//重新调整数据</span><br><span class=\"line\">\t\taddAndCheck = true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线上产生的死锁的信息(show engine innodb status)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">2019-02-12 23:24:45 7fa406a4f700</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 515545684, ACTIVE 0 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">LOCK WAIT 3 lock struct(s), heap size 1184, 2 row lock(s)</span><br><span class=\"line\">MySQL thread id 2121, OS thread handle 0x7fa406b12700, query id 1702086 10.10.17.63 jb-glive Searching rows for update</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;1776093&apos; and following_user_id = &apos;1331089&apos; ) or (fans_user_id = &apos;1331089&apos; and following_user_id = &apos;1776093&apos; )</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545684 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 1: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c31; asc      (,1;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 515545683, ACTIVE 0 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">5 lock struct(s), heap size 1184, 4 row lock(s)</span><br><span class=\"line\">MySQL thread id 3485, OS thread handle 0x7fa406a4f700, query id 1702085 10.10.17.61 jb-glive Searching rows for update</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;1776093&apos; and following_user_id = &apos;1331089&apos; ) or (fans_user_id = &apos;1331089&apos; and following_user_id = &apos;1776093&apos; )</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 37913 n bits 400 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap</span><br><span class=\"line\">Record lock, heap no 334 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 1: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c31; asc      (,1;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 1023 page no 38446 n bits 360 index `UK_USER_ID` of table `glive`.`fans` trx id 515545683 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 294 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 7; hex 31373736303933; asc 1776093;;</span><br><span class=\"line\"> 1: len 7; hex 31333331303839; asc 1331089;;</span><br><span class=\"line\"> 2: len 8; hex 8000000001282c59; asc      (,Y;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure>\n<p>锁分析：</p>\n<ol>\n<li>事务T2持有 (fans_user_id=1331089,following_user_id=1776093,主键=hex8000000001282c31) X 锁；</li>\n<li>事务T2等待行锁<br>\n(fans_user_id=1776093,following_user_id=1331089,主键=hex8000000001282c59) X 锁；</li>\n<li>事务T1等待T2持有的锁。</li>\n<li>事务T1此时应该还持有T2等待的锁，只是没显示出来。</li>\n</ol>\n<blockquote>\n<p>看起来就是典型的AB-BA问题</p>\n</blockquote>\n<h2 id=\"重现\"><a class=\"markdownIt-Anchor\" href=\"#重现\"></a> 重现</h2>\n<p>我们先简化上面的业务代码逻辑，假设fans_user_id=11000,following_user_id=10086，其实就是执行2个SQL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. insert ignore into fans(fans_user_id,following_user_id) values(11000,10086);</span><br><span class=\"line\">2. update fans set following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) </span><br><span class=\"line\">\t\tor (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; );</span><br></pre></td></tr></table></figure>\n<p>场景一：不存在fans_user_id=11000,following_user_id=10086的这条数据。</p>\n<table>\n<thead>\n<tr>\n<th>T1</th>\n<th>T2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;begin;</td>\n<td>&gt;begin;</td>\n</tr>\n<tr>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086);</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //阻塞</td>\n</tr>\n<tr>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n<td>*</td>\n</tr>\n<tr>\n<td>commit;</td>\n<td>insert 语句开始执行</td>\n</tr>\n<tr>\n<td>*</td>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n</tr>\n<tr>\n<td>*</td>\n<td>commit;</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>分析：</p>\n<ol>\n<li>由于数据库并没有这条记录，所以<strong>事务T1</strong>在执行insert ignore into 时可以执行成功，并给这行数据加了X锁。</li>\n<li><strong>事务T2</strong>在执行insert ignore into 时由于获取不到行锁，直接阻塞。</li>\n<li>后面都是顺序执行，所以并不会出现死锁的问题。</li>\n</ol>\n</blockquote>\n<p>场景二：数据库已经存在fans_user_id=11000,following_user_id=10086的这条数据。</p>\n<table>\n<thead>\n<tr>\n<th>T1</th>\n<th>T2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;begin;</td>\n<td>&gt;begin;</td>\n</tr>\n<tr>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086);</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>insert ignore into fans(fans_user_id,following_user_id)<br> values(11000,10086); //执行成功</td>\n</tr>\n<tr>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n<td>*</td>\n</tr>\n<tr>\n<td>阻塞等待</td>\n<td>*</td>\n</tr>\n<tr>\n<td>*</td>\n<td>update fans<br> set following_each_other = 1 <br> where (fans_user_id = ‘11000’ and following_user_id = ‘10086’ ) <br> or (fans_user_id = ‘10086’ and following_user_id = ‘11000’ )</td>\n</tr>\n<tr>\n<td>*</td>\n<td>Deadlock found when trying to get lock; <br>try restarting transaction</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>分析：</p>\n<ol>\n<li>由于数据库已经存在该记录，所以事务T1执行insert ignore into 会插入失败，并给该记录加了个S锁。</li>\n<li>由于S锁是相互兼容的，所以事务T2也给该记录加了S锁。</li>\n<li>T1继续执行update语句，尝试给2行数据加X锁，但是其中有一行数据已经被T2加了S锁，此时T1回到等待队列中继续等待。</li>\n<li>T2继续执行update语句，尝试给2行数据加X锁，但是发现T1已经对这2行数据请求了X锁，且在等待T2释放S锁，而T1又因为T2不释放S锁而无法升级为X锁。</li>\n</ol>\n<p>可以参考mysql官方的例子，原理是一样的。<a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-deadlock-example.html\" target=\"_blank\" rel=\"noopener\">innodb-死锁例子</a></p>\n</blockquote>\n<p>下面是场景二的DEADLOCK信息（show engine innodb status），你会发现其实跟生产环境的锁是又区别的，线上的死锁信息中T2 持有的是一个X锁（这个不知道怎么解释，无法重现）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LATEST DETECTED DEADLOCK</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">2019-02-27 14:15:00 0x7000034b5000</span><br><span class=\"line\">*** (1) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 620686, ACTIVE 19 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">LOCK WAIT 5 lock struct(s), heap size 1136, 4 row lock(s)</span><br><span class=\"line\">MySQL thread id 63, OS thread handle 123145355350016, query id 1172740 localhost 127.0.0.1 root updating</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) or (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; )</span><br><span class=\"line\">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620686 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 1: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abeb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) TRANSACTION:</span><br><span class=\"line\">TRANSACTION 620687, ACTIVE 16 sec starting index read</span><br><span class=\"line\">mysql tables in use 1, locked 1</span><br><span class=\"line\">3 lock struct(s), heap size 1136, 2 row lock(s)</span><br><span class=\"line\">MySQL thread id 61, OS thread handle 123145357578240, query id 1172741 localhost 127.0.0.1 root updating</span><br><span class=\"line\">update fans</span><br><span class=\"line\">\t\tset following_each_other = 1</span><br><span class=\"line\">\t\twhere (fans_user_id = &apos;11000&apos; and following_user_id = &apos;10086&apos; ) or (fans_user_id = &apos;10086&apos; and following_user_id = &apos;11000&apos; )</span><br><span class=\"line\">*** (2) HOLDS THE LOCK(S):</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock mode S</span><br><span class=\"line\">Record lock, heap no 280 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 1: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abeb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class=\"line\">RECORD LOCKS space id 107 page no 7 n bits 624 index UK_USER_ID of table `test`.`fans` trx id 620687 lock_mode X locks rec but not gap waiting</span><br><span class=\"line\">Record lock, heap no 279 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class=\"line\"> 0: len 5; hex 3130303836; asc 10086;;</span><br><span class=\"line\"> 1: len 5; hex 3131303030; asc 11000;;</span><br><span class=\"line\"> 2: len 8; hex 800000000143abdb; asc      C  ;;</span><br><span class=\"line\"></span><br><span class=\"line\">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h2>\n<p>在这个案例中，发生死锁的原因主要是insert ignore 在数据已经存在时只是加了S锁。所以解决的办法其实又几个。</p>\n<ol>\n<li>使用其他的幂等处理办法，不要依赖insert ignore。在这个案例中，其实应该直接使用insert，不允许重复执行，可以捕获唯一key异常来获取updateNum进行下个业务处理。</li>\n<li>直接在业务开头使用select for … update 来加排他锁保证业务是串形执行（只是从死锁这个问题考虑，如果考虑性能需要找其他方案）。</li>\n<li>假如就非得使用insert ignore 和 update，那么我们可以考虑在这个业务加个重试，数据库的死锁并不是致命的，设置好数据库的事物超时时间，然后遇到死锁问题，我们可以在业务进行重试解决。</li>\n</ol>\n<h2 id=\"未分析清楚的点\"><a class=\"markdownIt-Anchor\" href=\"#未分析清楚的点\"></a> 未分析清楚的点</h2>\n<ol>\n<li>为什么线上的锁他是一个X锁，并不是一个S锁？是否有场景三？MySQL官方文档有一段话，感觉有点关联，但是无法对应上现象,说的是insert 和 delete 语句其实并不是真正原子的行锁。</li>\n</ol>\n<blockquote>\n<p>InnoDB uses automatic row-level locking. You can get deadlocks even in the case of transactions that just insert or delete a single row. That is because these operations are not really “atomic”; they automatically set locks on the (possibly several) index records of the row inserted or deleted.</p>\n</blockquote>\n"},{"title":"JDK1.7 ConcurrentHashMap的源码解读","author":"Jiacan Liao","date":"2019-02-26T03:18:00.000Z","_content":"### 一、 ConcurrentHashMap的数据结构(JDK7)。\n\n1. segments[] : Segment<K,V> extends ReentrantLock \n\n> **分段锁**，HashMap 用一个Entry[] table 去存数据，ConcurrentHashMap 则是将 这个table 拆分出 n 个段（一个最接近concurrencyLevel的2的幂）分别存储，Segment 中的 用一个HashEntry table[] 来存数据，table中hash冲突的解决算法基本与HashMap一致。同一个段的put和get操作是需要加锁的，Segment继承了ReentrantLock 故有了锁的功能。\n\n2. concurrencyLevel : int\n\n> **并发等级**，默认是16，可以在构造函数指定该值，这个值直接影响segment数组的大小。如果这个值不是2的幂，则会计算出一个最接近（向上取）的2的幂来初始化segments数组。\n\n3. segmentMask : int\n\n> **掩码**，是一个bit位都是1的数，跟segments的长度有关，比如默认segments的长度是16=2的4次方（二进制为10000）。假如我们需要获取到一个数落在[0,16) 这个区间，则只需要用这个数跟1111做与运算, 得到的结果肯定是落在0到16之间，这个比取模运算更加高效。\n\n4. segmentShift : int\n\n> **位移数**，获取高ssize(segments size)位需要的左移的位数（32-ssize），hash函数算出来的是一个32 位int的整型，ConcurrentHashMap\t对segments的hash算法采用的是一个取高位进行hash的做法。比如一个key算出来的值为1024，如果我想取高ssize位 ，假如ssize为4，那么就要将1024>>>(32-4)，取得高4位。获取到高4位后会与segmentMask进行与运算获取到一个[0,ssize)的数。这就是ConcurrentHashMap中对segment采用的hash算法。\n\n* 为什么要采用高位运算？\n\n> 源码中似乎没有说明，我猜是为了跟segment中的HashEntry[] table 的hash算法区分开来，降低冲突的概率。假如采用同样的hash算法，有2个key Hash到同一个segment中那么再进行 段中的二次hash的时候可能还是命中到同一个节点导致链越来越长。\n```\n // segment[] 的hash算法 （hash的高位参与运算）\n  int j = (hash >>> segmentShift) & segmentMask;\n // table[] 的hash算法 （hash的低位参与运算）\n  int index = (tab.length - 1) & hash;\n```\n\n![image](https://github.com/liaojiacan/assets/blob/master/issue/ConcurrentHashMap_jdk1.7.png?raw=true)\n\n### 二、segment中独占锁的加锁逻辑\n\n >分段锁的目的就是将锁冲突分离开，只有hash到同一个segment中的操作才会存在锁竞争，CurrentHashMap 中put和remove以及size是有加锁操作的。\n \n put操作加锁\n ```\n HashEntry<K,V> node = tryLock() ? null :scanAndLockForPut(key, hash, value);\n```\n reomve操作加锁\n ```\n    if (!tryLock())\n       scanAndLock(key, hash);\n ```\n 如果 tryLock() 不能能加锁成功则进行自旋，scanAndLockForPut和scanAndLock有点区别但是逻辑差不多。\n \n 1.有限重试次数，多核心CPU的话是64次，单核1次，超过次数则阻塞等待获取锁。\n \n 2.获取锁之前和获取到锁期间头节点不能发生改变，否则需要从头开始重试。\n ```\nprivate void scanAndLock(Object key, int hash) {\n    // similar to but simpler than scanAndLockForPut\n    HashEntry<K,V> first = entryForHash(this, hash);\n    HashEntry<K,V> e = first;\n    int retries = -1;\n    while (!tryLock()) {\n        HashEntry<K,V> f;\n        if (retries < 0) {\n            if (e == null || key.equals(e.key))\n                retries = 0;\n            else\n                e = e.next;\n        }\n        else if (++retries > MAX_SCAN_RETRIES) {\n            lock();\n            break;\n        }\n        // 如果头节点发生改变，从头开始扫描\n        else if ((retries & 1) == 0 &&\n                 (f = entryForHash(this, hash)) != first) {\n            e = first = f;\n            retries = -1;\n        }\n    }\n}\n ```\n * get没有加排他锁，是否有线程安全问题？\n \n先说下结论，ConcurrentHashMap get方法不存在线程安全问题，他的线程安全是由CAS 和 \"volatile\"保证的:\n\n    1. UNSAFE.putOrderedObject/UNSAFE.getObjectVolatile\n    2. volatile HashEntry<K,V> next;\n    3. volatile V value;\n    \n我们整理下，要保证get不发生线程安全问题需要保证什么？\n\n    1. get操作和put或remove操作并行的时候，get能操作能够获取到正确的segment和头节点table[i]。\n    2. 在entries的遍历中能顺利走到未节点。\n    3. 在1和2的前提下get操作时能够保证value值的可见性。\n\n我们先看第1点时怎么保证的，我们都知道java中有个volatile用了保证变量在多线程下的可见性，volatile可以保证可见性，但是不能保证线程安全，如果当前赋值语句依赖当前值时是线程不安全的，比如a +=1 这种操作就是不安全的，显然在ConcurrentHashMap的并不需要这种操作，只存在简单的引用赋值操作。\n\n但是需要注意的是一点，volatile修饰引用型变量时，只能保证当前引用的可见性，对于引用对象的内部变量仍然是无法保证可见性的，这就是为什么在对segments[] 数组和table[] 数组的的操作需要借助Unsafe类，而不是直接segments[i] = new Segment(...);\n\n由前面的分析看，volatile/Unsafe.getObjectVolatile/Unsafe.putOrderedOject保证链当get操作晚与put操作时是可以获取到刚插入的节点(作为一个新头节点连接到旧节点并更新table)，对与一个早于put操作的get操作一个情况就是新插入的元素表头，但是get操作已经获取到了旧表头，所以并不影响get操作进行链表的遍历查找。\n\n我们在看进行remove时是否会影响entries的遍历，从源码中看，HashEntry中的next成员是被volatile修饰的，这就保证了get可以安全得遍历到未节点。\n\n\n### 三、size的实现逻辑\n\n&emsp;&emsp;假如ConcurrentHashMap采用HashMap维护一个全局的size来变量统计大小，那么为了线程安全，也必定得改用原子类AtomicLong或者全局加锁。这显然与分段锁的设计背离。那么有没有一种比较折衷的办法呢？\n\n&emsp;&emsp;ConcurrentHashMap中将size的统计拆分到各个segment取去护，每次执行size的时候将每个segment的count加起来，最终得到的结果就是map的大小。这个看似乎很合理，但是如果在进行统计的过程中有一个segment发生put或者remove操作呢，这样得到的结果就是错误的，显然我们可以在统计前先将每个segment给锁起来，再sum，得到的结果肯定是正确的。\n\n&emsp;&emsp;**存在一种情况就是你的程序中并发很少，出现并发更新的情况很少，这个时候你执行size的时候将所有的segment加锁和不加锁的情况可能得到的结果是一样的，因为这个时候没有其他线程进行修改。似乎我们可以乐观地考虑一下大部分情况下是不需要进行锁操作的。**\n\n&emsp;&emsp;Doug Lea采用类一种跟JDK集合类中大多数存在的fail-safe错误检查机制，对在每个segment中于更新操作维护一个modCount来记录更新的次数，统计前和统计后的modCount是一样的说明没有发生变化，当前的统计结果有效。ConcurrentHashMap的size方法的实现逻辑如下：\n\n - 先采用无锁的方式统计2次，如果前后的modCount总和是一样的，此次统计结果有效，返回结果。\n - 假如前后的modCount总和不一样，第三次进行有锁的统计。\n```\npublic int size() {\n        // Try a few times to get accurate count. On failure due to\n        // continuous async changes in table, resort to locking.\n        final Segment<K,V>[] segments = this.segments;\n        int size;\n        boolean overflow; // true if size overflows 32 bits\n        long sum;         // sum of modCounts\n        long last = 0L;   // previous sum\n        int retries = -1; // first iteration isn't retry\n        try {\n            for (;;) {\n                //第三次进行上锁\n                if (retries++ == RETRIES_BEFORE_LOCK) {\n                    for (int j = 0; j < segments.length; ++j)\n                        ensureSegment(j).lock(); // force creation\n                }\n                sum = 0L;\n                size = 0;\n                overflow = false;\n                for (int j = 0; j < segments.length; ++j) {\n                    Segment<K,V> seg = segmentAt(segments, j);\n                    if (seg != null) {\n                        sum += seg.modCount;\n                        int c = seg.count;\n                        if (c < 0 || (size += c) < 0)\n                            overflow = true;\n                    }\n                }\n                // 前后2次的统计结果一致，可以返回\n                if (sum == last)\n                    break;\n                last = sum;\n            }\n        } finally {\n            if (retries > RETRIES_BEFORE_LOCK) {\n                for (int j = 0; j < segments.length; ++j)\n                    segmentAt(segments, j).unlock();\n            }\n        }\n        return overflow ? Integer.MAX_VALUE : size;\n    }\n\n\n```\n\n### 四、Unsafe.getObjectVolatile/Unsafe.putOrderedOject对偏移量的计算问题\n\n&emsp;&emsp;ConcurrentHashMap中使用量Unsafe类来对segment数组和table数组进行数组填充和取值操作，其中对位置i的内存偏移计算用了位运算来代替乘法运算\n```\n// segment[0] 的偏移地址\nint baseOffset = UNSAFE.arrayBaseOffset(Segment[].class);\n// 每个位置的大小\nint indexScale = UNSAFE.arrayIndexScale(Segment[].class);\n//那么第i个元素的内存偏移就是\nlong offset = baseOffset+i*indexScale ;\n\n```\n上面的计算方法是利用乘法来计算的，但是乘法的计算还是比较慢的，如果能用位运算更佳。由于jvm给对象分配内存的时候会进行内存对对齐，也就是说indexScale其实会是一个2的n次方的数。一个整数i乘以一个2的n次方可以转化成 i<<n;\n\n```\n3 * 2 = 3 << 1\n3 * 4 = 3 << 2\n3 * 8 = 3 << 3\n3 * 16 = 3 << 4\n3 * 32 = 3 << 5\n3 * 64 = 3 << 6\n3 * 128 = 3 << 7\n3 * 256 = 3 << 8\n```\n\n所以你会看到ConcurrentHashMap中有这样的代码\n```\n// 31 - Integer.numberOfLeadingZeros(ssize) 这个是求一个数x的2对数 \n SSHIFT = 31 - Integer.numberOfLeadingZeros(ssize);\n ...\n // 所以元素i在内存中的偏移就是\n long offset = SBASE +(i<<SSHIFT)\n \n```\n\n[测试用例-ConcurrentHashMap中利用Unsafe进行数组操作的测试用例](https://github.com/liaojiacan/code-snippets/blob/master/java-language/src/main/java/com/github/liaojiacan/unsafe/UnsafeArrayOperationTests.java);\n\n","source":"_posts/JDK1-7-ConcurrentHashMap的源码解读.md","raw":"title: JDK1.7 ConcurrentHashMap的源码解读\nauthor: Jiacan Liao\ntags:\n  - J.U.C\n  - ''\n  - ConcurrentHashMap\n  - ''\ncategories:\n  - 源码解读\n  - JDK\ndate: 2019-02-26 11:18:00\n---\n### 一、 ConcurrentHashMap的数据结构(JDK7)。\n\n1. segments[] : Segment<K,V> extends ReentrantLock \n\n> **分段锁**，HashMap 用一个Entry[] table 去存数据，ConcurrentHashMap 则是将 这个table 拆分出 n 个段（一个最接近concurrencyLevel的2的幂）分别存储，Segment 中的 用一个HashEntry table[] 来存数据，table中hash冲突的解决算法基本与HashMap一致。同一个段的put和get操作是需要加锁的，Segment继承了ReentrantLock 故有了锁的功能。\n\n2. concurrencyLevel : int\n\n> **并发等级**，默认是16，可以在构造函数指定该值，这个值直接影响segment数组的大小。如果这个值不是2的幂，则会计算出一个最接近（向上取）的2的幂来初始化segments数组。\n\n3. segmentMask : int\n\n> **掩码**，是一个bit位都是1的数，跟segments的长度有关，比如默认segments的长度是16=2的4次方（二进制为10000）。假如我们需要获取到一个数落在[0,16) 这个区间，则只需要用这个数跟1111做与运算, 得到的结果肯定是落在0到16之间，这个比取模运算更加高效。\n\n4. segmentShift : int\n\n> **位移数**，获取高ssize(segments size)位需要的左移的位数（32-ssize），hash函数算出来的是一个32 位int的整型，ConcurrentHashMap\t对segments的hash算法采用的是一个取高位进行hash的做法。比如一个key算出来的值为1024，如果我想取高ssize位 ，假如ssize为4，那么就要将1024>>>(32-4)，取得高4位。获取到高4位后会与segmentMask进行与运算获取到一个[0,ssize)的数。这就是ConcurrentHashMap中对segment采用的hash算法。\n\n* 为什么要采用高位运算？\n\n> 源码中似乎没有说明，我猜是为了跟segment中的HashEntry[] table 的hash算法区分开来，降低冲突的概率。假如采用同样的hash算法，有2个key Hash到同一个segment中那么再进行 段中的二次hash的时候可能还是命中到同一个节点导致链越来越长。\n```\n // segment[] 的hash算法 （hash的高位参与运算）\n  int j = (hash >>> segmentShift) & segmentMask;\n // table[] 的hash算法 （hash的低位参与运算）\n  int index = (tab.length - 1) & hash;\n```\n\n![image](https://github.com/liaojiacan/assets/blob/master/issue/ConcurrentHashMap_jdk1.7.png?raw=true)\n\n### 二、segment中独占锁的加锁逻辑\n\n >分段锁的目的就是将锁冲突分离开，只有hash到同一个segment中的操作才会存在锁竞争，CurrentHashMap 中put和remove以及size是有加锁操作的。\n \n put操作加锁\n ```\n HashEntry<K,V> node = tryLock() ? null :scanAndLockForPut(key, hash, value);\n```\n reomve操作加锁\n ```\n    if (!tryLock())\n       scanAndLock(key, hash);\n ```\n 如果 tryLock() 不能能加锁成功则进行自旋，scanAndLockForPut和scanAndLock有点区别但是逻辑差不多。\n \n 1.有限重试次数，多核心CPU的话是64次，单核1次，超过次数则阻塞等待获取锁。\n \n 2.获取锁之前和获取到锁期间头节点不能发生改变，否则需要从头开始重试。\n ```\nprivate void scanAndLock(Object key, int hash) {\n    // similar to but simpler than scanAndLockForPut\n    HashEntry<K,V> first = entryForHash(this, hash);\n    HashEntry<K,V> e = first;\n    int retries = -1;\n    while (!tryLock()) {\n        HashEntry<K,V> f;\n        if (retries < 0) {\n            if (e == null || key.equals(e.key))\n                retries = 0;\n            else\n                e = e.next;\n        }\n        else if (++retries > MAX_SCAN_RETRIES) {\n            lock();\n            break;\n        }\n        // 如果头节点发生改变，从头开始扫描\n        else if ((retries & 1) == 0 &&\n                 (f = entryForHash(this, hash)) != first) {\n            e = first = f;\n            retries = -1;\n        }\n    }\n}\n ```\n * get没有加排他锁，是否有线程安全问题？\n \n先说下结论，ConcurrentHashMap get方法不存在线程安全问题，他的线程安全是由CAS 和 \"volatile\"保证的:\n\n    1. UNSAFE.putOrderedObject/UNSAFE.getObjectVolatile\n    2. volatile HashEntry<K,V> next;\n    3. volatile V value;\n    \n我们整理下，要保证get不发生线程安全问题需要保证什么？\n\n    1. get操作和put或remove操作并行的时候，get能操作能够获取到正确的segment和头节点table[i]。\n    2. 在entries的遍历中能顺利走到未节点。\n    3. 在1和2的前提下get操作时能够保证value值的可见性。\n\n我们先看第1点时怎么保证的，我们都知道java中有个volatile用了保证变量在多线程下的可见性，volatile可以保证可见性，但是不能保证线程安全，如果当前赋值语句依赖当前值时是线程不安全的，比如a +=1 这种操作就是不安全的，显然在ConcurrentHashMap的并不需要这种操作，只存在简单的引用赋值操作。\n\n但是需要注意的是一点，volatile修饰引用型变量时，只能保证当前引用的可见性，对于引用对象的内部变量仍然是无法保证可见性的，这就是为什么在对segments[] 数组和table[] 数组的的操作需要借助Unsafe类，而不是直接segments[i] = new Segment(...);\n\n由前面的分析看，volatile/Unsafe.getObjectVolatile/Unsafe.putOrderedOject保证链当get操作晚与put操作时是可以获取到刚插入的节点(作为一个新头节点连接到旧节点并更新table)，对与一个早于put操作的get操作一个情况就是新插入的元素表头，但是get操作已经获取到了旧表头，所以并不影响get操作进行链表的遍历查找。\n\n我们在看进行remove时是否会影响entries的遍历，从源码中看，HashEntry中的next成员是被volatile修饰的，这就保证了get可以安全得遍历到未节点。\n\n\n### 三、size的实现逻辑\n\n&emsp;&emsp;假如ConcurrentHashMap采用HashMap维护一个全局的size来变量统计大小，那么为了线程安全，也必定得改用原子类AtomicLong或者全局加锁。这显然与分段锁的设计背离。那么有没有一种比较折衷的办法呢？\n\n&emsp;&emsp;ConcurrentHashMap中将size的统计拆分到各个segment取去护，每次执行size的时候将每个segment的count加起来，最终得到的结果就是map的大小。这个看似乎很合理，但是如果在进行统计的过程中有一个segment发生put或者remove操作呢，这样得到的结果就是错误的，显然我们可以在统计前先将每个segment给锁起来，再sum，得到的结果肯定是正确的。\n\n&emsp;&emsp;**存在一种情况就是你的程序中并发很少，出现并发更新的情况很少，这个时候你执行size的时候将所有的segment加锁和不加锁的情况可能得到的结果是一样的，因为这个时候没有其他线程进行修改。似乎我们可以乐观地考虑一下大部分情况下是不需要进行锁操作的。**\n\n&emsp;&emsp;Doug Lea采用类一种跟JDK集合类中大多数存在的fail-safe错误检查机制，对在每个segment中于更新操作维护一个modCount来记录更新的次数，统计前和统计后的modCount是一样的说明没有发生变化，当前的统计结果有效。ConcurrentHashMap的size方法的实现逻辑如下：\n\n - 先采用无锁的方式统计2次，如果前后的modCount总和是一样的，此次统计结果有效，返回结果。\n - 假如前后的modCount总和不一样，第三次进行有锁的统计。\n```\npublic int size() {\n        // Try a few times to get accurate count. On failure due to\n        // continuous async changes in table, resort to locking.\n        final Segment<K,V>[] segments = this.segments;\n        int size;\n        boolean overflow; // true if size overflows 32 bits\n        long sum;         // sum of modCounts\n        long last = 0L;   // previous sum\n        int retries = -1; // first iteration isn't retry\n        try {\n            for (;;) {\n                //第三次进行上锁\n                if (retries++ == RETRIES_BEFORE_LOCK) {\n                    for (int j = 0; j < segments.length; ++j)\n                        ensureSegment(j).lock(); // force creation\n                }\n                sum = 0L;\n                size = 0;\n                overflow = false;\n                for (int j = 0; j < segments.length; ++j) {\n                    Segment<K,V> seg = segmentAt(segments, j);\n                    if (seg != null) {\n                        sum += seg.modCount;\n                        int c = seg.count;\n                        if (c < 0 || (size += c) < 0)\n                            overflow = true;\n                    }\n                }\n                // 前后2次的统计结果一致，可以返回\n                if (sum == last)\n                    break;\n                last = sum;\n            }\n        } finally {\n            if (retries > RETRIES_BEFORE_LOCK) {\n                for (int j = 0; j < segments.length; ++j)\n                    segmentAt(segments, j).unlock();\n            }\n        }\n        return overflow ? Integer.MAX_VALUE : size;\n    }\n\n\n```\n\n### 四、Unsafe.getObjectVolatile/Unsafe.putOrderedOject对偏移量的计算问题\n\n&emsp;&emsp;ConcurrentHashMap中使用量Unsafe类来对segment数组和table数组进行数组填充和取值操作，其中对位置i的内存偏移计算用了位运算来代替乘法运算\n```\n// segment[0] 的偏移地址\nint baseOffset = UNSAFE.arrayBaseOffset(Segment[].class);\n// 每个位置的大小\nint indexScale = UNSAFE.arrayIndexScale(Segment[].class);\n//那么第i个元素的内存偏移就是\nlong offset = baseOffset+i*indexScale ;\n\n```\n上面的计算方法是利用乘法来计算的，但是乘法的计算还是比较慢的，如果能用位运算更佳。由于jvm给对象分配内存的时候会进行内存对对齐，也就是说indexScale其实会是一个2的n次方的数。一个整数i乘以一个2的n次方可以转化成 i<<n;\n\n```\n3 * 2 = 3 << 1\n3 * 4 = 3 << 2\n3 * 8 = 3 << 3\n3 * 16 = 3 << 4\n3 * 32 = 3 << 5\n3 * 64 = 3 << 6\n3 * 128 = 3 << 7\n3 * 256 = 3 << 8\n```\n\n所以你会看到ConcurrentHashMap中有这样的代码\n```\n// 31 - Integer.numberOfLeadingZeros(ssize) 这个是求一个数x的2对数 \n SSHIFT = 31 - Integer.numberOfLeadingZeros(ssize);\n ...\n // 所以元素i在内存中的偏移就是\n long offset = SBASE +(i<<SSHIFT)\n \n```\n\n[测试用例-ConcurrentHashMap中利用Unsafe进行数组操作的测试用例](https://github.com/liaojiacan/code-snippets/blob/master/java-language/src/main/java/com/github/liaojiacan/unsafe/UnsafeArrayOperationTests.java);\n\n","slug":"JDK1-7-ConcurrentHashMap的源码解读","published":1,"updated":"2019-02-26T03:20:32.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bm0007kg88cwot7ql4","content":"<h3 id=\"一-concurrenthashmap的数据结构jdk7\"><a class=\"markdownIt-Anchor\" href=\"#一-concurrenthashmap的数据结构jdk7\"></a> 一、 ConcurrentHashMap的数据结构(JDK7)。</h3>\n<ol>\n<li>segments[] : Segment&lt;K,V&gt; extends ReentrantLock</li>\n</ol>\n<blockquote>\n<p><strong>分段锁</strong>，HashMap 用一个Entry[] table 去存数据，ConcurrentHashMap 则是将 这个table 拆分出 n 个段（一个最接近concurrencyLevel的2的幂）分别存储，Segment 中的 用一个HashEntry table[] 来存数据，table中hash冲突的解决算法基本与HashMap一致。同一个段的put和get操作是需要加锁的，Segment继承了ReentrantLock 故有了锁的功能。</p>\n</blockquote>\n<ol start=\"2\">\n<li>concurrencyLevel : int</li>\n</ol>\n<blockquote>\n<p><strong>并发等级</strong>，默认是16，可以在构造函数指定该值，这个值直接影响segment数组的大小。如果这个值不是2的幂，则会计算出一个最接近（向上取）的2的幂来初始化segments数组。</p>\n</blockquote>\n<ol start=\"3\">\n<li>segmentMask : int</li>\n</ol>\n<blockquote>\n<p><strong>掩码</strong>，是一个bit位都是1的数，跟segments的长度有关，比如默认segments的长度是16=2的4次方（二进制为10000）。假如我们需要获取到一个数落在[0,16) 这个区间，则只需要用这个数跟1111做与运算, 得到的结果肯定是落在0到16之间，这个比取模运算更加高效。</p>\n</blockquote>\n<ol start=\"4\">\n<li>segmentShift : int</li>\n</ol>\n<blockquote>\n<p><strong>位移数</strong>，获取高ssize(segments size)位需要的左移的位数（32-ssize），hash函数算出来的是一个32 位int的整型，ConcurrentHashMap\t对segments的hash算法采用的是一个取高位进行hash的做法。比如一个key算出来的值为1024，如果我想取高ssize位 ，假如ssize为4，那么就要将1024&gt;&gt;&gt;(32-4)，取得高4位。获取到高4位后会与segmentMask进行与运算获取到一个[0,ssize)的数。这就是ConcurrentHashMap中对segment采用的hash算法。</p>\n</blockquote>\n<ul>\n<li>为什么要采用高位运算？</li>\n</ul>\n<blockquote>\n<p>源码中似乎没有说明，我猜是为了跟segment中的HashEntry[] table 的hash算法区分开来，降低冲突的概率。假如采用同样的hash算法，有2个key Hash到同一个segment中那么再进行 段中的二次hash的时候可能还是命中到同一个节点导致链越来越长。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// segment[] 的hash算法 （hash的高位参与运算）</span><br><span class=\"line\"> int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class=\"line\">// table[] 的hash算法 （hash的低位参与运算）</span><br><span class=\"line\"> int index = (tab.length - 1) &amp; hash;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/liaojiacan/assets/blob/master/issue/ConcurrentHashMap_jdk1.7.png?raw=true\" alt=\"image\"></p>\n<h3 id=\"二-segment中独占锁的加锁逻辑\"><a class=\"markdownIt-Anchor\" href=\"#二-segment中独占锁的加锁逻辑\"></a> 二、segment中独占锁的加锁逻辑</h3>\n<blockquote>\n<p>分段锁的目的就是将锁冲突分离开，只有hash到同一个segment中的操作才会存在锁竞争，CurrentHashMap 中put和remove以及size是有加锁操作的。</p>\n</blockquote>\n<p>put操作加锁</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashEntry&lt;K,V&gt; node = tryLock() ? null :scanAndLockForPut(key, hash, value);</span><br></pre></td></tr></table></figure>\n<p>reomve操作加锁</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!tryLock())</span><br><span class=\"line\">   scanAndLock(key, hash);</span><br></pre></td></tr></table></figure>\n<p>如果 tryLock() 不能能加锁成功则进行自旋，scanAndLockForPut和scanAndLock有点区别但是逻辑差不多。</p>\n<p>1.有限重试次数，多核心CPU的话是64次，单核1次，超过次数则阻塞等待获取锁。</p>\n<p>2.获取锁之前和获取到锁期间头节点不能发生改变，否则需要从头开始重试。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void scanAndLock(Object key, int hash) &#123;</span><br><span class=\"line\">    // similar to but simpler than scanAndLockForPut</span><br><span class=\"line\">    HashEntry&lt;K,V&gt; first = entryForHash(this, hash);</span><br><span class=\"line\">    HashEntry&lt;K,V&gt; e = first;</span><br><span class=\"line\">    int retries = -1;</span><br><span class=\"line\">    while (!tryLock()) &#123;</span><br><span class=\"line\">        HashEntry&lt;K,V&gt; f;</span><br><span class=\"line\">        if (retries &lt; 0) &#123;</span><br><span class=\"line\">            if (e == null || key.equals(e.key))</span><br><span class=\"line\">                retries = 0;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                e = e.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class=\"line\">            lock();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果头节点发生改变，从头开始扫描</span><br><span class=\"line\">        else if ((retries &amp; 1) == 0 &amp;&amp;</span><br><span class=\"line\">                 (f = entryForHash(this, hash)) != first) &#123;</span><br><span class=\"line\">            e = first = f;</span><br><span class=\"line\">            retries = -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>get没有加排他锁，是否有线程安全问题？</li>\n</ul>\n<p>先说下结论，ConcurrentHashMap get方法不存在线程安全问题，他的线程安全是由CAS 和 &quot;volatile&quot;保证的:</p>\n<pre><code>1. UNSAFE.putOrderedObject/UNSAFE.getObjectVolatile\n2. volatile HashEntry&lt;K,V&gt; next;\n3. volatile V value;\n</code></pre>\n<p>我们整理下，要保证get不发生线程安全问题需要保证什么？</p>\n<pre><code>1. get操作和put或remove操作并行的时候，get能操作能够获取到正确的segment和头节点table[i]。\n2. 在entries的遍历中能顺利走到未节点。\n3. 在1和2的前提下get操作时能够保证value值的可见性。\n</code></pre>\n<p>我们先看第1点时怎么保证的，我们都知道java中有个volatile用了保证变量在多线程下的可见性，volatile可以保证可见性，但是不能保证线程安全，如果当前赋值语句依赖当前值时是线程不安全的，比如a +=1 这种操作就是不安全的，显然在ConcurrentHashMap的并不需要这种操作，只存在简单的引用赋值操作。</p>\n<p>但是需要注意的是一点，volatile修饰引用型变量时，只能保证当前引用的可见性，对于引用对象的内部变量仍然是无法保证可见性的，这就是为什么在对segments[] 数组和table[] 数组的的操作需要借助Unsafe类，而不是直接segments[i] = new Segment(…);</p>\n<p>由前面的分析看，volatile/Unsafe.getObjectVolatile/Unsafe.putOrderedOject保证链当get操作晚与put操作时是可以获取到刚插入的节点(作为一个新头节点连接到旧节点并更新table)，对与一个早于put操作的get操作一个情况就是新插入的元素表头，但是get操作已经获取到了旧表头，所以并不影响get操作进行链表的遍历查找。</p>\n<p>我们在看进行remove时是否会影响entries的遍历，从源码中看，HashEntry中的next成员是被volatile修饰的，这就保证了get可以安全得遍历到未节点。</p>\n<h3 id=\"三-size的实现逻辑\"><a class=\"markdownIt-Anchor\" href=\"#三-size的实现逻辑\"></a> 三、size的实现逻辑</h3>\n<p>  假如ConcurrentHashMap采用HashMap维护一个全局的size来变量统计大小，那么为了线程安全，也必定得改用原子类AtomicLong或者全局加锁。这显然与分段锁的设计背离。那么有没有一种比较折衷的办法呢？</p>\n<p>  ConcurrentHashMap中将size的统计拆分到各个segment取去护，每次执行size的时候将每个segment的count加起来，最终得到的结果就是map的大小。这个看似乎很合理，但是如果在进行统计的过程中有一个segment发生put或者remove操作呢，这样得到的结果就是错误的，显然我们可以在统计前先将每个segment给锁起来，再sum，得到的结果肯定是正确的。</p>\n<p>  <strong>存在一种情况就是你的程序中并发很少，出现并发更新的情况很少，这个时候你执行size的时候将所有的segment加锁和不加锁的情况可能得到的结果是一样的，因为这个时候没有其他线程进行修改。似乎我们可以乐观地考虑一下大部分情况下是不需要进行锁操作的。</strong></p>\n<p>  Doug Lea采用类一种跟JDK集合类中大多数存在的fail-safe错误检查机制，对在每个segment中于更新操作维护一个modCount来记录更新的次数，统计前和统计后的modCount是一样的说明没有发生变化，当前的统计结果有效。ConcurrentHashMap的size方法的实现逻辑如下：</p>\n<ul>\n<li>先采用无锁的方式统计2次，如果前后的modCount总和是一样的，此次统计结果有效，返回结果。</li>\n<li>假如前后的modCount总和不一样，第三次进行有锁的统计。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int size() &#123;</span><br><span class=\"line\">        // Try a few times to get accurate count. On failure due to</span><br><span class=\"line\">        // continuous async changes in table, resort to locking.</span><br><span class=\"line\">        final Segment&lt;K,V&gt;[] segments = this.segments;</span><br><span class=\"line\">        int size;</span><br><span class=\"line\">        boolean overflow; // true if size overflows 32 bits</span><br><span class=\"line\">        long sum;         // sum of modCounts</span><br><span class=\"line\">        long last = 0L;   // previous sum</span><br><span class=\"line\">        int retries = -1; // first iteration isn&apos;t retry</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for (;;) &#123;</span><br><span class=\"line\">                //第三次进行上锁</span><br><span class=\"line\">                if (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; segments.length; ++j)</span><br><span class=\"line\">                        ensureSegment(j).lock(); // force creation</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sum = 0L;</span><br><span class=\"line\">                size = 0;</span><br><span class=\"line\">                overflow = false;</span><br><span class=\"line\">                for (int j = 0; j &lt; segments.length; ++j) &#123;</span><br><span class=\"line\">                    Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class=\"line\">                    if (seg != null) &#123;</span><br><span class=\"line\">                        sum += seg.modCount;</span><br><span class=\"line\">                        int c = seg.count;</span><br><span class=\"line\">                        if (c &lt; 0 || (size += c) &lt; 0)</span><br><span class=\"line\">                            overflow = true;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 前后2次的统计结果一致，可以返回</span><br><span class=\"line\">                if (sum == last)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                last = sum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</span><br><span class=\"line\">                    segmentAt(segments, j).unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return overflow ? Integer.MAX_VALUE : size;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-unsafegetobjectvolatileunsafeputorderedoject对偏移量的计算问题\"><a class=\"markdownIt-Anchor\" href=\"#四-unsafegetobjectvolatileunsafeputorderedoject对偏移量的计算问题\"></a> 四、Unsafe.getObjectVolatile/Unsafe.putOrderedOject对偏移量的计算问题</h3>\n<p>  ConcurrentHashMap中使用量Unsafe类来对segment数组和table数组进行数组填充和取值操作，其中对位置i的内存偏移计算用了位运算来代替乘法运算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// segment[0] 的偏移地址</span><br><span class=\"line\">int baseOffset = UNSAFE.arrayBaseOffset(Segment[].class);</span><br><span class=\"line\">// 每个位置的大小</span><br><span class=\"line\">int indexScale = UNSAFE.arrayIndexScale(Segment[].class);</span><br><span class=\"line\">//那么第i个元素的内存偏移就是</span><br><span class=\"line\">long offset = baseOffset+i*indexScale ;</span><br></pre></td></tr></table></figure>\n<p>上面的计算方法是利用乘法来计算的，但是乘法的计算还是比较慢的，如果能用位运算更佳。由于jvm给对象分配内存的时候会进行内存对对齐，也就是说indexScale其实会是一个2的n次方的数。一个整数i乘以一个2的n次方可以转化成 i&lt;&lt;n;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 * 2 = 3 &lt;&lt; 1</span><br><span class=\"line\">3 * 4 = 3 &lt;&lt; 2</span><br><span class=\"line\">3 * 8 = 3 &lt;&lt; 3</span><br><span class=\"line\">3 * 16 = 3 &lt;&lt; 4</span><br><span class=\"line\">3 * 32 = 3 &lt;&lt; 5</span><br><span class=\"line\">3 * 64 = 3 &lt;&lt; 6</span><br><span class=\"line\">3 * 128 = 3 &lt;&lt; 7</span><br><span class=\"line\">3 * 256 = 3 &lt;&lt; 8</span><br></pre></td></tr></table></figure>\n<p>所以你会看到ConcurrentHashMap中有这样的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 31 - Integer.numberOfLeadingZeros(ssize) 这个是求一个数x的2对数 </span><br><span class=\"line\"> SSHIFT = 31 - Integer.numberOfLeadingZeros(ssize);</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> // 所以元素i在内存中的偏移就是</span><br><span class=\"line\"> long offset = SBASE +(i&lt;&lt;SSHIFT)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/liaojiacan/code-snippets/blob/master/java-language/src/main/java/com/github/liaojiacan/unsafe/UnsafeArrayOperationTests.java\" target=\"_blank\" rel=\"noopener\">测试用例-ConcurrentHashMap中利用Unsafe进行数组操作的测试用例</a>;</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-concurrenthashmap的数据结构jdk7\"><a class=\"markdownIt-Anchor\" href=\"#一-concurrenthashmap的数据结构jdk7\"></a> 一、 ConcurrentHashMap的数据结构(JDK7)。</h3>\n<ol>\n<li>segments[] : Segment&lt;K,V&gt; extends ReentrantLock</li>\n</ol>\n<blockquote>\n<p><strong>分段锁</strong>，HashMap 用一个Entry[] table 去存数据，ConcurrentHashMap 则是将 这个table 拆分出 n 个段（一个最接近concurrencyLevel的2的幂）分别存储，Segment 中的 用一个HashEntry table[] 来存数据，table中hash冲突的解决算法基本与HashMap一致。同一个段的put和get操作是需要加锁的，Segment继承了ReentrantLock 故有了锁的功能。</p>\n</blockquote>\n<ol start=\"2\">\n<li>concurrencyLevel : int</li>\n</ol>\n<blockquote>\n<p><strong>并发等级</strong>，默认是16，可以在构造函数指定该值，这个值直接影响segment数组的大小。如果这个值不是2的幂，则会计算出一个最接近（向上取）的2的幂来初始化segments数组。</p>\n</blockquote>\n<ol start=\"3\">\n<li>segmentMask : int</li>\n</ol>\n<blockquote>\n<p><strong>掩码</strong>，是一个bit位都是1的数，跟segments的长度有关，比如默认segments的长度是16=2的4次方（二进制为10000）。假如我们需要获取到一个数落在[0,16) 这个区间，则只需要用这个数跟1111做与运算, 得到的结果肯定是落在0到16之间，这个比取模运算更加高效。</p>\n</blockquote>\n<ol start=\"4\">\n<li>segmentShift : int</li>\n</ol>\n<blockquote>\n<p><strong>位移数</strong>，获取高ssize(segments size)位需要的左移的位数（32-ssize），hash函数算出来的是一个32 位int的整型，ConcurrentHashMap\t对segments的hash算法采用的是一个取高位进行hash的做法。比如一个key算出来的值为1024，如果我想取高ssize位 ，假如ssize为4，那么就要将1024&gt;&gt;&gt;(32-4)，取得高4位。获取到高4位后会与segmentMask进行与运算获取到一个[0,ssize)的数。这就是ConcurrentHashMap中对segment采用的hash算法。</p>\n</blockquote>\n<ul>\n<li>为什么要采用高位运算？</li>\n</ul>\n<blockquote>\n<p>源码中似乎没有说明，我猜是为了跟segment中的HashEntry[] table 的hash算法区分开来，降低冲突的概率。假如采用同样的hash算法，有2个key Hash到同一个segment中那么再进行 段中的二次hash的时候可能还是命中到同一个节点导致链越来越长。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// segment[] 的hash算法 （hash的高位参与运算）</span><br><span class=\"line\"> int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class=\"line\">// table[] 的hash算法 （hash的低位参与运算）</span><br><span class=\"line\"> int index = (tab.length - 1) &amp; hash;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/liaojiacan/assets/blob/master/issue/ConcurrentHashMap_jdk1.7.png?raw=true\" alt=\"image\"></p>\n<h3 id=\"二-segment中独占锁的加锁逻辑\"><a class=\"markdownIt-Anchor\" href=\"#二-segment中独占锁的加锁逻辑\"></a> 二、segment中独占锁的加锁逻辑</h3>\n<blockquote>\n<p>分段锁的目的就是将锁冲突分离开，只有hash到同一个segment中的操作才会存在锁竞争，CurrentHashMap 中put和remove以及size是有加锁操作的。</p>\n</blockquote>\n<p>put操作加锁</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashEntry&lt;K,V&gt; node = tryLock() ? null :scanAndLockForPut(key, hash, value);</span><br></pre></td></tr></table></figure>\n<p>reomve操作加锁</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!tryLock())</span><br><span class=\"line\">   scanAndLock(key, hash);</span><br></pre></td></tr></table></figure>\n<p>如果 tryLock() 不能能加锁成功则进行自旋，scanAndLockForPut和scanAndLock有点区别但是逻辑差不多。</p>\n<p>1.有限重试次数，多核心CPU的话是64次，单核1次，超过次数则阻塞等待获取锁。</p>\n<p>2.获取锁之前和获取到锁期间头节点不能发生改变，否则需要从头开始重试。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void scanAndLock(Object key, int hash) &#123;</span><br><span class=\"line\">    // similar to but simpler than scanAndLockForPut</span><br><span class=\"line\">    HashEntry&lt;K,V&gt; first = entryForHash(this, hash);</span><br><span class=\"line\">    HashEntry&lt;K,V&gt; e = first;</span><br><span class=\"line\">    int retries = -1;</span><br><span class=\"line\">    while (!tryLock()) &#123;</span><br><span class=\"line\">        HashEntry&lt;K,V&gt; f;</span><br><span class=\"line\">        if (retries &lt; 0) &#123;</span><br><span class=\"line\">            if (e == null || key.equals(e.key))</span><br><span class=\"line\">                retries = 0;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                e = e.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class=\"line\">            lock();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 如果头节点发生改变，从头开始扫描</span><br><span class=\"line\">        else if ((retries &amp; 1) == 0 &amp;&amp;</span><br><span class=\"line\">                 (f = entryForHash(this, hash)) != first) &#123;</span><br><span class=\"line\">            e = first = f;</span><br><span class=\"line\">            retries = -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>get没有加排他锁，是否有线程安全问题？</li>\n</ul>\n<p>先说下结论，ConcurrentHashMap get方法不存在线程安全问题，他的线程安全是由CAS 和 &quot;volatile&quot;保证的:</p>\n<pre><code>1. UNSAFE.putOrderedObject/UNSAFE.getObjectVolatile\n2. volatile HashEntry&lt;K,V&gt; next;\n3. volatile V value;\n</code></pre>\n<p>我们整理下，要保证get不发生线程安全问题需要保证什么？</p>\n<pre><code>1. get操作和put或remove操作并行的时候，get能操作能够获取到正确的segment和头节点table[i]。\n2. 在entries的遍历中能顺利走到未节点。\n3. 在1和2的前提下get操作时能够保证value值的可见性。\n</code></pre>\n<p>我们先看第1点时怎么保证的，我们都知道java中有个volatile用了保证变量在多线程下的可见性，volatile可以保证可见性，但是不能保证线程安全，如果当前赋值语句依赖当前值时是线程不安全的，比如a +=1 这种操作就是不安全的，显然在ConcurrentHashMap的并不需要这种操作，只存在简单的引用赋值操作。</p>\n<p>但是需要注意的是一点，volatile修饰引用型变量时，只能保证当前引用的可见性，对于引用对象的内部变量仍然是无法保证可见性的，这就是为什么在对segments[] 数组和table[] 数组的的操作需要借助Unsafe类，而不是直接segments[i] = new Segment(…);</p>\n<p>由前面的分析看，volatile/Unsafe.getObjectVolatile/Unsafe.putOrderedOject保证链当get操作晚与put操作时是可以获取到刚插入的节点(作为一个新头节点连接到旧节点并更新table)，对与一个早于put操作的get操作一个情况就是新插入的元素表头，但是get操作已经获取到了旧表头，所以并不影响get操作进行链表的遍历查找。</p>\n<p>我们在看进行remove时是否会影响entries的遍历，从源码中看，HashEntry中的next成员是被volatile修饰的，这就保证了get可以安全得遍历到未节点。</p>\n<h3 id=\"三-size的实现逻辑\"><a class=\"markdownIt-Anchor\" href=\"#三-size的实现逻辑\"></a> 三、size的实现逻辑</h3>\n<p>  假如ConcurrentHashMap采用HashMap维护一个全局的size来变量统计大小，那么为了线程安全，也必定得改用原子类AtomicLong或者全局加锁。这显然与分段锁的设计背离。那么有没有一种比较折衷的办法呢？</p>\n<p>  ConcurrentHashMap中将size的统计拆分到各个segment取去护，每次执行size的时候将每个segment的count加起来，最终得到的结果就是map的大小。这个看似乎很合理，但是如果在进行统计的过程中有一个segment发生put或者remove操作呢，这样得到的结果就是错误的，显然我们可以在统计前先将每个segment给锁起来，再sum，得到的结果肯定是正确的。</p>\n<p>  <strong>存在一种情况就是你的程序中并发很少，出现并发更新的情况很少，这个时候你执行size的时候将所有的segment加锁和不加锁的情况可能得到的结果是一样的，因为这个时候没有其他线程进行修改。似乎我们可以乐观地考虑一下大部分情况下是不需要进行锁操作的。</strong></p>\n<p>  Doug Lea采用类一种跟JDK集合类中大多数存在的fail-safe错误检查机制，对在每个segment中于更新操作维护一个modCount来记录更新的次数，统计前和统计后的modCount是一样的说明没有发生变化，当前的统计结果有效。ConcurrentHashMap的size方法的实现逻辑如下：</p>\n<ul>\n<li>先采用无锁的方式统计2次，如果前后的modCount总和是一样的，此次统计结果有效，返回结果。</li>\n<li>假如前后的modCount总和不一样，第三次进行有锁的统计。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int size() &#123;</span><br><span class=\"line\">        // Try a few times to get accurate count. On failure due to</span><br><span class=\"line\">        // continuous async changes in table, resort to locking.</span><br><span class=\"line\">        final Segment&lt;K,V&gt;[] segments = this.segments;</span><br><span class=\"line\">        int size;</span><br><span class=\"line\">        boolean overflow; // true if size overflows 32 bits</span><br><span class=\"line\">        long sum;         // sum of modCounts</span><br><span class=\"line\">        long last = 0L;   // previous sum</span><br><span class=\"line\">        int retries = -1; // first iteration isn&apos;t retry</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for (;;) &#123;</span><br><span class=\"line\">                //第三次进行上锁</span><br><span class=\"line\">                if (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; segments.length; ++j)</span><br><span class=\"line\">                        ensureSegment(j).lock(); // force creation</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                sum = 0L;</span><br><span class=\"line\">                size = 0;</span><br><span class=\"line\">                overflow = false;</span><br><span class=\"line\">                for (int j = 0; j &lt; segments.length; ++j) &#123;</span><br><span class=\"line\">                    Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class=\"line\">                    if (seg != null) &#123;</span><br><span class=\"line\">                        sum += seg.modCount;</span><br><span class=\"line\">                        int c = seg.count;</span><br><span class=\"line\">                        if (c &lt; 0 || (size += c) &lt; 0)</span><br><span class=\"line\">                            overflow = true;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 前后2次的统计结果一致，可以返回</span><br><span class=\"line\">                if (sum == last)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                last = sum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</span><br><span class=\"line\">                    segmentAt(segments, j).unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return overflow ? Integer.MAX_VALUE : size;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-unsafegetobjectvolatileunsafeputorderedoject对偏移量的计算问题\"><a class=\"markdownIt-Anchor\" href=\"#四-unsafegetobjectvolatileunsafeputorderedoject对偏移量的计算问题\"></a> 四、Unsafe.getObjectVolatile/Unsafe.putOrderedOject对偏移量的计算问题</h3>\n<p>  ConcurrentHashMap中使用量Unsafe类来对segment数组和table数组进行数组填充和取值操作，其中对位置i的内存偏移计算用了位运算来代替乘法运算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// segment[0] 的偏移地址</span><br><span class=\"line\">int baseOffset = UNSAFE.arrayBaseOffset(Segment[].class);</span><br><span class=\"line\">// 每个位置的大小</span><br><span class=\"line\">int indexScale = UNSAFE.arrayIndexScale(Segment[].class);</span><br><span class=\"line\">//那么第i个元素的内存偏移就是</span><br><span class=\"line\">long offset = baseOffset+i*indexScale ;</span><br></pre></td></tr></table></figure>\n<p>上面的计算方法是利用乘法来计算的，但是乘法的计算还是比较慢的，如果能用位运算更佳。由于jvm给对象分配内存的时候会进行内存对对齐，也就是说indexScale其实会是一个2的n次方的数。一个整数i乘以一个2的n次方可以转化成 i&lt;&lt;n;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 * 2 = 3 &lt;&lt; 1</span><br><span class=\"line\">3 * 4 = 3 &lt;&lt; 2</span><br><span class=\"line\">3 * 8 = 3 &lt;&lt; 3</span><br><span class=\"line\">3 * 16 = 3 &lt;&lt; 4</span><br><span class=\"line\">3 * 32 = 3 &lt;&lt; 5</span><br><span class=\"line\">3 * 64 = 3 &lt;&lt; 6</span><br><span class=\"line\">3 * 128 = 3 &lt;&lt; 7</span><br><span class=\"line\">3 * 256 = 3 &lt;&lt; 8</span><br></pre></td></tr></table></figure>\n<p>所以你会看到ConcurrentHashMap中有这样的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 31 - Integer.numberOfLeadingZeros(ssize) 这个是求一个数x的2对数 </span><br><span class=\"line\"> SSHIFT = 31 - Integer.numberOfLeadingZeros(ssize);</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> // 所以元素i在内存中的偏移就是</span><br><span class=\"line\"> long offset = SBASE +(i&lt;&lt;SSHIFT)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/liaojiacan/code-snippets/blob/master/java-language/src/main/java/com/github/liaojiacan/unsafe/UnsafeArrayOperationTests.java\" target=\"_blank\" rel=\"noopener\">测试用例-ConcurrentHashMap中利用Unsafe进行数组操作的测试用例</a>;</p>\n"},{"title":"Innodb中的锁总结","author":"Jiacan Liao","date":"2019-02-28T11:22:00.000Z","_content":"### 锁的种类\n\n#### 表锁\n- LOCK TABLE *table_name* READ : 用读锁锁表，阻塞其他事务修改\n- LOCK TABLE *table_name* WRITE: 用写锁锁表，阻塞其他事务读和写\n\n#### 行锁\n\n- X锁：排他锁，允许对数据进行删除和更新/插入\n- S锁：共享锁，允许对数据进行读取，可理解为读锁\n> 锁的兼容性：如果两个事务能对一行数据同时加锁，就认为这个锁是兼容的，如果是要等待其他事务释放，则认为这2个锁是不兼容的。\n\n * | X | S\n---|---|---\n X | 不兼容| 不兼容\nS  | 不兼容 | 兼容\n\n#### 意向锁\n\nMySQL innodb 是支持多粒度锁的，比如可以同时存在表锁和行锁，为了更好的实现多粒度锁，innodb引入了意向锁，在innodb中的意向锁是表级的锁，意向锁与意向锁之间是兼容了，假如不存在表锁，不会有事务在加意向锁的时候阻塞。\n- IS锁：意向共享锁，表明表中存在一行或者多行的S锁，即在给一行数据加S锁之前必在这个表加IS锁。\n- IX锁：意向排他锁，表明表中存在一行或者多行的X锁，即在给一行数据加S锁之前必在这个表加IX锁。\n\n> 思考：为什么需要这个意向锁？\n\n我们比如思考一下这个场景，事务1给某个表中的N行加了行锁，这个时候事务2想给这个表加个表锁，那么事务2需要确认的事情有：\n1. 这个表是否存在不兼容的表锁，比如我想加个X锁，但是已经有其他事务加了S锁。\n2. 这个表中是否已经存在不兼容的行锁。\n\n显然在确认第二个条件时，如果采用全表扫描的话，效率太低，所以意向锁的目的就是在粗粒度的锁（表锁）可以快速判断是否与低粒度的锁存在冲突。\n\n\n| *  | IX       | S          | IS         |\n| -- | -------- | ---------- | ---------- |\n| X  | 不兼容 | 不兼容   | 不兼容   |\n| IX | 不兼容 | 兼容 | 不兼容   |\n| S  | 不兼容 | 不兼容   | 兼容 |\n| IS | 不兼容 | 兼容 | 兼容 |\n\n### innodb行锁的形式或者算法\n> Innodb中行锁都是加在索引上的，针对不同的场景都有不同的加锁策略。\n\n#### Record Lock\n记录锁，顾名思义就是锁住记录本身，锁主主键和唯一索引，如果表中没有加任何索引，锁会加在隐式生成的主键上。\n\n#### Gap Lock\n\n间隙锁，当存在范围扫描的时候，给扫描范围加间隙锁，[起始地址，终止)\n1. 不同事务对同一个区间加间隙锁是不冲突的，所以S Gap Lock 和 X Gap Lock不存在区别。\n2. READ_COMMITED 隔离级别下不会启用间隙锁。\n\n#### Next Key Lock\n临键锁，Record Lock + Gap Lock ,锁主当前值区间+下一个区间(不一定)。\n\n```\n10, 11, 13, 20\n(negative infinity, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, positive infinity)\n```\n1. 解决的是当前读下的幻读问题。\n\n#### Insert Intention Lock\n插入意向锁，是一种特殊的间隙锁；insert之前会向插入区间加上Insert Intention Lock。\n1. Gap Lock / Next key Lock 与 Insert Intention Lock不兼容。\n2. Gap lock 和Next key lock 的目的就是防止有数据插入间隙\n\n### 不同SQL产生的锁\nhttps://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html\n1. SELECT...FROM \n> 一致性非锁定读，除了在 SERIALIZABLE隔离级别下会存在S锁，其他隔离级别下都不会有锁。\n\n2. SELECT...FOR UPDATE/SELECT...LOCK IN SHARE MODE\n> - 也叫做当前读，会在给扫描过程中的索引加X或S锁，跟Where条件实际上没有强关系，只跟扫描的过程有关，所以where条件是否能够命中索引比较重要。\n> - 在检索的过程中会给用到的索引加Next Key Lock。不过如果检索条件是唯一索引能定位到一行数据，则只加Record Lock\n\n3. UPDATE...WHERE... \n> 同样给检索到的记录加next key lock, 如果WHERE条件中是使用主键或者唯一索引进行限定的话，只在索引加了Record Lock。\n> 如果UPDATE的是聚簇索引记录，会对受影响的辅助索引加隐式锁，当有新的辅助索引插入前的重复检测，以及在执行插入新的辅助索引记录时，对受影响的索引记录加S锁。\n\n4. DELETE FROM ... WHERE ... \n> 与UPDATE基本一致\n\n5. INSERT\n> - 给插入索引的记录加一个X锁\n> - 插入前前会加个Insert Intention Lock。\n> - 如果发生唯一键异常（duplicate-key error ），会在原记录上加S锁，这个如果和delete和update一起使用可能会导致死锁。\n\n6. INSERT ... ON DUPLICATE KEY UPDATE \n> - 跟INSERT语句有点不同的就是，当发生重复键异常是，这里加的是排他锁，而不是共享锁。\n> - 如果是唯一键异常，则加的是Next key lock。\n\n7. REPLACE \n> - 如果没有发生冲突，则行为跟INSERT是一致的。\n> - 如果发生冲突，则对唯一键加的是Next key lock。\n\n8. INSERT INTO T SELECT ... FROM S WHERE ...\n> - 给子查询语句加的X锁。\n> - 如果是READ COMMITED 隔离基本，则采用的是快照读\n\n9. 外键约束\n> 在进行外键约束检测时，会给记录加行级共享锁。\n\n### 死锁\n\n> 死锁是只当2个或者2个以上的事务抢占各自的资源，导致的相互等待的现象。\n\n#### 案例\n1. [Insert-ignore-和update-导致的死锁问题分析](http://liaojiacan.me/2019/02/27/Insert-ignore-%E5%92%8Cupdate-%E5%AF%BC%E8%87%B4%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/)\n\n#### 解决死锁和进行死锁检测\n1. 设置超时时间,事务有限时间超时,回滚其中一个事务。\n```\nmysql> show variables like \"%innodb_lock_wait_timeout%\";\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| innodb_lock_wait_timeout | 50    |\n+--------------------------+-------+\n1 row in set (0.07 sec)\n```\n2. wait-graph 等待图死锁检测\n- 锁的信息链\n- 事务等待链\n\n","source":"_posts/Innodb中的锁总结.md","raw":"title: Innodb中的锁总结\nauthor: Jiacan Liao\ntags:\n  - Innodb\n\ncategories:\n\n  - 数据库\ndate: 2019-02-28 19:22:00\n---\n### 锁的种类\n\n#### 表锁\n- LOCK TABLE *table_name* READ : 用读锁锁表，阻塞其他事务修改\n- LOCK TABLE *table_name* WRITE: 用写锁锁表，阻塞其他事务读和写\n\n#### 行锁\n\n- X锁：排他锁，允许对数据进行删除和更新/插入\n- S锁：共享锁，允许对数据进行读取，可理解为读锁\n> 锁的兼容性：如果两个事务能对一行数据同时加锁，就认为这个锁是兼容的，如果是要等待其他事务释放，则认为这2个锁是不兼容的。\n\n * | X | S\n---|---|---\n X | 不兼容| 不兼容\nS  | 不兼容 | 兼容\n\n#### 意向锁\n\nMySQL innodb 是支持多粒度锁的，比如可以同时存在表锁和行锁，为了更好的实现多粒度锁，innodb引入了意向锁，在innodb中的意向锁是表级的锁，意向锁与意向锁之间是兼容了，假如不存在表锁，不会有事务在加意向锁的时候阻塞。\n- IS锁：意向共享锁，表明表中存在一行或者多行的S锁，即在给一行数据加S锁之前必在这个表加IS锁。\n- IX锁：意向排他锁，表明表中存在一行或者多行的X锁，即在给一行数据加S锁之前必在这个表加IX锁。\n\n> 思考：为什么需要这个意向锁？\n\n我们比如思考一下这个场景，事务1给某个表中的N行加了行锁，这个时候事务2想给这个表加个表锁，那么事务2需要确认的事情有：\n1. 这个表是否存在不兼容的表锁，比如我想加个X锁，但是已经有其他事务加了S锁。\n2. 这个表中是否已经存在不兼容的行锁。\n\n显然在确认第二个条件时，如果采用全表扫描的话，效率太低，所以意向锁的目的就是在粗粒度的锁（表锁）可以快速判断是否与低粒度的锁存在冲突。\n\n\n| *  | IX       | S          | IS         |\n| -- | -------- | ---------- | ---------- |\n| X  | 不兼容 | 不兼容   | 不兼容   |\n| IX | 不兼容 | 兼容 | 不兼容   |\n| S  | 不兼容 | 不兼容   | 兼容 |\n| IS | 不兼容 | 兼容 | 兼容 |\n\n### innodb行锁的形式或者算法\n> Innodb中行锁都是加在索引上的，针对不同的场景都有不同的加锁策略。\n\n#### Record Lock\n记录锁，顾名思义就是锁住记录本身，锁主主键和唯一索引，如果表中没有加任何索引，锁会加在隐式生成的主键上。\n\n#### Gap Lock\n\n间隙锁，当存在范围扫描的时候，给扫描范围加间隙锁，[起始地址，终止)\n1. 不同事务对同一个区间加间隙锁是不冲突的，所以S Gap Lock 和 X Gap Lock不存在区别。\n2. READ_COMMITED 隔离级别下不会启用间隙锁。\n\n#### Next Key Lock\n临键锁，Record Lock + Gap Lock ,锁主当前值区间+下一个区间(不一定)。\n\n```\n10, 11, 13, 20\n(negative infinity, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, positive infinity)\n```\n1. 解决的是当前读下的幻读问题。\n\n#### Insert Intention Lock\n插入意向锁，是一种特殊的间隙锁；insert之前会向插入区间加上Insert Intention Lock。\n1. Gap Lock / Next key Lock 与 Insert Intention Lock不兼容。\n2. Gap lock 和Next key lock 的目的就是防止有数据插入间隙\n\n### 不同SQL产生的锁\nhttps://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html\n1. SELECT...FROM \n> 一致性非锁定读，除了在 SERIALIZABLE隔离级别下会存在S锁，其他隔离级别下都不会有锁。\n\n2. SELECT...FOR UPDATE/SELECT...LOCK IN SHARE MODE\n> - 也叫做当前读，会在给扫描过程中的索引加X或S锁，跟Where条件实际上没有强关系，只跟扫描的过程有关，所以where条件是否能够命中索引比较重要。\n> - 在检索的过程中会给用到的索引加Next Key Lock。不过如果检索条件是唯一索引能定位到一行数据，则只加Record Lock\n\n3. UPDATE...WHERE... \n> 同样给检索到的记录加next key lock, 如果WHERE条件中是使用主键或者唯一索引进行限定的话，只在索引加了Record Lock。\n> 如果UPDATE的是聚簇索引记录，会对受影响的辅助索引加隐式锁，当有新的辅助索引插入前的重复检测，以及在执行插入新的辅助索引记录时，对受影响的索引记录加S锁。\n\n4. DELETE FROM ... WHERE ... \n> 与UPDATE基本一致\n\n5. INSERT\n> - 给插入索引的记录加一个X锁\n> - 插入前前会加个Insert Intention Lock。\n> - 如果发生唯一键异常（duplicate-key error ），会在原记录上加S锁，这个如果和delete和update一起使用可能会导致死锁。\n\n6. INSERT ... ON DUPLICATE KEY UPDATE \n> - 跟INSERT语句有点不同的就是，当发生重复键异常是，这里加的是排他锁，而不是共享锁。\n> - 如果是唯一键异常，则加的是Next key lock。\n\n7. REPLACE \n> - 如果没有发生冲突，则行为跟INSERT是一致的。\n> - 如果发生冲突，则对唯一键加的是Next key lock。\n\n8. INSERT INTO T SELECT ... FROM S WHERE ...\n> - 给子查询语句加的X锁。\n> - 如果是READ COMMITED 隔离基本，则采用的是快照读\n\n9. 外键约束\n> 在进行外键约束检测时，会给记录加行级共享锁。\n\n### 死锁\n\n> 死锁是只当2个或者2个以上的事务抢占各自的资源，导致的相互等待的现象。\n\n#### 案例\n1. [Insert-ignore-和update-导致的死锁问题分析](http://liaojiacan.me/2019/02/27/Insert-ignore-%E5%92%8Cupdate-%E5%AF%BC%E8%87%B4%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/)\n\n#### 解决死锁和进行死锁检测\n1. 设置超时时间,事务有限时间超时,回滚其中一个事务。\n```\nmysql> show variables like \"%innodb_lock_wait_timeout%\";\n+--------------------------+-------+\n| Variable_name            | Value |\n+--------------------------+-------+\n| innodb_lock_wait_timeout | 50    |\n+--------------------------+-------+\n1 row in set (0.07 sec)\n```\n2. wait-graph 等待图死锁检测\n- 锁的信息链\n- 事务等待链\n\n","slug":"Innodb中的锁总结","published":1,"updated":"2019-05-21T13:53:32.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bn0008kg88wpcmjid5","content":"<h3 id=\"锁的种类\"><a class=\"markdownIt-Anchor\" href=\"#锁的种类\"></a> 锁的种类</h3>\n<h4 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h4>\n<ul>\n<li>LOCK TABLE <em>table_name</em> READ : 用读锁锁表，阻塞其他事务修改</li>\n<li>LOCK TABLE <em>table_name</em> WRITE: 用写锁锁表，阻塞其他事务读和写</li>\n</ul>\n<h4 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h4>\n<ul>\n<li>X锁：排他锁，允许对数据进行删除和更新/插入</li>\n<li>S锁：共享锁，允许对数据进行读取，可理解为读锁</li>\n</ul>\n<blockquote>\n<p>锁的兼容性：如果两个事务能对一行数据同时加锁，就认为这个锁是兼容的，如果是要等待其他事务释放，则认为这2个锁是不兼容的。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>X</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"意向锁\"><a class=\"markdownIt-Anchor\" href=\"#意向锁\"></a> 意向锁</h4>\n<p>MySQL innodb 是支持多粒度锁的，比如可以同时存在表锁和行锁，为了更好的实现多粒度锁，innodb引入了意向锁，在innodb中的意向锁是表级的锁，意向锁与意向锁之间是兼容了，假如不存在表锁，不会有事务在加意向锁的时候阻塞。</p>\n<ul>\n<li>IS锁：意向共享锁，表明表中存在一行或者多行的S锁，即在给一行数据加S锁之前必在这个表加IS锁。</li>\n<li>IX锁：意向排他锁，表明表中存在一行或者多行的X锁，即在给一行数据加S锁之前必在这个表加IX锁。</li>\n</ul>\n<blockquote>\n<p>思考：为什么需要这个意向锁？</p>\n</blockquote>\n<p>我们比如思考一下这个场景，事务1给某个表中的N行加了行锁，这个时候事务2想给这个表加个表锁，那么事务2需要确认的事情有：</p>\n<ol>\n<li>这个表是否存在不兼容的表锁，比如我想加个X锁，但是已经有其他事务加了S锁。</li>\n<li>这个表中是否已经存在不兼容的行锁。</li>\n</ol>\n<p>显然在确认第二个条件时，如果采用全表扫描的话，效率太低，所以意向锁的目的就是在粗粒度的锁（表锁）可以快速判断是否与低粒度的锁存在冲突。</p>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"innodb行锁的形式或者算法\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁的形式或者算法\"></a> innodb行锁的形式或者算法</h3>\n<blockquote>\n<p>Innodb中行锁都是加在索引上的，针对不同的场景都有不同的加锁策略。</p>\n</blockquote>\n<h4 id=\"record-lock\"><a class=\"markdownIt-Anchor\" href=\"#record-lock\"></a> Record Lock</h4>\n<p>记录锁，顾名思义就是锁住记录本身，锁主主键和唯一索引，如果表中没有加任何索引，锁会加在隐式生成的主键上。</p>\n<h4 id=\"gap-lock\"><a class=\"markdownIt-Anchor\" href=\"#gap-lock\"></a> Gap Lock</h4>\n<p>间隙锁，当存在范围扫描的时候，给扫描范围加间隙锁，[起始地址，终止)</p>\n<ol>\n<li>不同事务对同一个区间加间隙锁是不冲突的，所以S Gap Lock 和 X Gap Lock不存在区别。</li>\n<li>READ_COMMITED 隔离级别下不会启用间隙锁。</li>\n</ol>\n<h4 id=\"next-key-lock\"><a class=\"markdownIt-Anchor\" href=\"#next-key-lock\"></a> Next Key Lock</h4>\n<p>临键锁，Record Lock + Gap Lock ,锁主当前值区间+下一个区间(不一定)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10, 11, 13, 20</span><br><span class=\"line\">(negative infinity, 10]</span><br><span class=\"line\">(10, 11]</span><br><span class=\"line\">(11, 13]</span><br><span class=\"line\">(13, 20]</span><br><span class=\"line\">(20, positive infinity)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>解决的是当前读下的幻读问题。</li>\n</ol>\n<h4 id=\"insert-intention-lock\"><a class=\"markdownIt-Anchor\" href=\"#insert-intention-lock\"></a> Insert Intention Lock</h4>\n<p>插入意向锁，是一种特殊的间隙锁；insert之前会向插入区间加上Insert Intention Lock。</p>\n<ol>\n<li>Gap Lock / Next key Lock 与 Insert Intention Lock不兼容。</li>\n<li>Gap lock 和Next key lock 的目的就是防止有数据插入间隙</li>\n</ol>\n<h3 id=\"不同sql产生的锁\"><a class=\"markdownIt-Anchor\" href=\"#不同sql产生的锁\"></a> 不同SQL产生的锁</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html</a></p>\n<ol>\n<li>SELECT…FROM</li>\n</ol>\n<blockquote>\n<p>一致性非锁定读，除了在 SERIALIZABLE隔离级别下会存在S锁，其他隔离级别下都不会有锁。</p>\n</blockquote>\n<ol start=\"2\">\n<li>SELECT…FOR UPDATE/SELECT…LOCK IN SHARE MODE</li>\n</ol>\n<blockquote>\n<ul>\n<li>也叫做当前读，会在给扫描过程中的索引加X或S锁，跟Where条件实际上没有强关系，只跟扫描的过程有关，所以where条件是否能够命中索引比较重要。</li>\n<li>在检索的过程中会给用到的索引加Next Key Lock。不过如果检索条件是唯一索引能定位到一行数据，则只加Record Lock</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>UPDATE…WHERE…</li>\n</ol>\n<blockquote>\n<p>同样给检索到的记录加next key lock, 如果WHERE条件中是使用主键或者唯一索引进行限定的话，只在索引加了Record Lock。<br>\n如果UPDATE的是聚簇索引记录，会对受影响的辅助索引加隐式锁，当有新的辅助索引插入前的重复检测，以及在执行插入新的辅助索引记录时，对受影响的索引记录加S锁。</p>\n</blockquote>\n<ol start=\"4\">\n<li>DELETE FROM … WHERE …</li>\n</ol>\n<blockquote>\n<p>与UPDATE基本一致</p>\n</blockquote>\n<ol start=\"5\">\n<li>INSERT</li>\n</ol>\n<blockquote>\n<ul>\n<li>给插入索引的记录加一个X锁</li>\n<li>插入前前会加个Insert Intention Lock。</li>\n<li>如果发生唯一键异常（duplicate-key error ），会在原记录上加S锁，这个如果和delete和update一起使用可能会导致死锁。</li>\n</ul>\n</blockquote>\n<ol start=\"6\">\n<li>INSERT … ON DUPLICATE KEY UPDATE</li>\n</ol>\n<blockquote>\n<ul>\n<li>跟INSERT语句有点不同的就是，当发生重复键异常是，这里加的是排他锁，而不是共享锁。</li>\n<li>如果是唯一键异常，则加的是Next key lock。</li>\n</ul>\n</blockquote>\n<ol start=\"7\">\n<li>REPLACE</li>\n</ol>\n<blockquote>\n<ul>\n<li>如果没有发生冲突，则行为跟INSERT是一致的。</li>\n<li>如果发生冲突，则对唯一键加的是Next key lock。</li>\n</ul>\n</blockquote>\n<ol start=\"8\">\n<li>INSERT INTO T SELECT … FROM S WHERE …</li>\n</ol>\n<blockquote>\n<ul>\n<li>给子查询语句加的X锁。</li>\n<li>如果是READ COMMITED 隔离基本，则采用的是快照读</li>\n</ul>\n</blockquote>\n<ol start=\"9\">\n<li>外键约束</li>\n</ol>\n<blockquote>\n<p>在进行外键约束检测时，会给记录加行级共享锁。</p>\n</blockquote>\n<h3 id=\"死锁\"><a class=\"markdownIt-Anchor\" href=\"#死锁\"></a> 死锁</h3>\n<blockquote>\n<p>死锁是只当2个或者2个以上的事务抢占各自的资源，导致的相互等待的现象。</p>\n</blockquote>\n<h4 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\"></a> 案例</h4>\n<ol>\n<li><a href=\"http://liaojiacan.me/2019/02/27/Insert-ignore-%E5%92%8Cupdate-%E5%AF%BC%E8%87%B4%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/\">Insert-ignore-和update-导致的死锁问题分析</a></li>\n</ol>\n<h4 id=\"解决死锁和进行死锁检测\"><a class=\"markdownIt-Anchor\" href=\"#解决死锁和进行死锁检测\"></a> 解决死锁和进行死锁检测</h4>\n<ol>\n<li>设置超时时间,事务有限时间超时,回滚其中一个事务。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &quot;%innodb_lock_wait_timeout%&quot;;</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">| Variable_name            | Value |</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">| innodb_lock_wait_timeout | 50    |</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">1 row in set (0.07 sec)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>wait-graph 等待图死锁检测</li>\n</ol>\n<ul>\n<li>锁的信息链</li>\n<li>事务等待链</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"锁的种类\"><a class=\"markdownIt-Anchor\" href=\"#锁的种类\"></a> 锁的种类</h3>\n<h4 id=\"表锁\"><a class=\"markdownIt-Anchor\" href=\"#表锁\"></a> 表锁</h4>\n<ul>\n<li>LOCK TABLE <em>table_name</em> READ : 用读锁锁表，阻塞其他事务修改</li>\n<li>LOCK TABLE <em>table_name</em> WRITE: 用写锁锁表，阻塞其他事务读和写</li>\n</ul>\n<h4 id=\"行锁\"><a class=\"markdownIt-Anchor\" href=\"#行锁\"></a> 行锁</h4>\n<ul>\n<li>X锁：排他锁，允许对数据进行删除和更新/插入</li>\n<li>S锁：共享锁，允许对数据进行读取，可理解为读锁</li>\n</ul>\n<blockquote>\n<p>锁的兼容性：如果两个事务能对一行数据同时加锁，就认为这个锁是兼容的，如果是要等待其他事务释放，则认为这2个锁是不兼容的。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>X</th>\n<th>S</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"意向锁\"><a class=\"markdownIt-Anchor\" href=\"#意向锁\"></a> 意向锁</h4>\n<p>MySQL innodb 是支持多粒度锁的，比如可以同时存在表锁和行锁，为了更好的实现多粒度锁，innodb引入了意向锁，在innodb中的意向锁是表级的锁，意向锁与意向锁之间是兼容了，假如不存在表锁，不会有事务在加意向锁的时候阻塞。</p>\n<ul>\n<li>IS锁：意向共享锁，表明表中存在一行或者多行的S锁，即在给一行数据加S锁之前必在这个表加IS锁。</li>\n<li>IX锁：意向排他锁，表明表中存在一行或者多行的X锁，即在给一行数据加S锁之前必在这个表加IX锁。</li>\n</ul>\n<blockquote>\n<p>思考：为什么需要这个意向锁？</p>\n</blockquote>\n<p>我们比如思考一下这个场景，事务1给某个表中的N行加了行锁，这个时候事务2想给这个表加个表锁，那么事务2需要确认的事情有：</p>\n<ol>\n<li>这个表是否存在不兼容的表锁，比如我想加个X锁，但是已经有其他事务加了S锁。</li>\n<li>这个表中是否已经存在不兼容的行锁。</li>\n</ol>\n<p>显然在确认第二个条件时，如果采用全表扫描的话，效率太低，所以意向锁的目的就是在粗粒度的锁（表锁）可以快速判断是否与低粒度的锁存在冲突。</p>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"innodb行锁的形式或者算法\"><a class=\"markdownIt-Anchor\" href=\"#innodb行锁的形式或者算法\"></a> innodb行锁的形式或者算法</h3>\n<blockquote>\n<p>Innodb中行锁都是加在索引上的，针对不同的场景都有不同的加锁策略。</p>\n</blockquote>\n<h4 id=\"record-lock\"><a class=\"markdownIt-Anchor\" href=\"#record-lock\"></a> Record Lock</h4>\n<p>记录锁，顾名思义就是锁住记录本身，锁主主键和唯一索引，如果表中没有加任何索引，锁会加在隐式生成的主键上。</p>\n<h4 id=\"gap-lock\"><a class=\"markdownIt-Anchor\" href=\"#gap-lock\"></a> Gap Lock</h4>\n<p>间隙锁，当存在范围扫描的时候，给扫描范围加间隙锁，[起始地址，终止)</p>\n<ol>\n<li>不同事务对同一个区间加间隙锁是不冲突的，所以S Gap Lock 和 X Gap Lock不存在区别。</li>\n<li>READ_COMMITED 隔离级别下不会启用间隙锁。</li>\n</ol>\n<h4 id=\"next-key-lock\"><a class=\"markdownIt-Anchor\" href=\"#next-key-lock\"></a> Next Key Lock</h4>\n<p>临键锁，Record Lock + Gap Lock ,锁主当前值区间+下一个区间(不一定)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10, 11, 13, 20</span><br><span class=\"line\">(negative infinity, 10]</span><br><span class=\"line\">(10, 11]</span><br><span class=\"line\">(11, 13]</span><br><span class=\"line\">(13, 20]</span><br><span class=\"line\">(20, positive infinity)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>解决的是当前读下的幻读问题。</li>\n</ol>\n<h4 id=\"insert-intention-lock\"><a class=\"markdownIt-Anchor\" href=\"#insert-intention-lock\"></a> Insert Intention Lock</h4>\n<p>插入意向锁，是一种特殊的间隙锁；insert之前会向插入区间加上Insert Intention Lock。</p>\n<ol>\n<li>Gap Lock / Next key Lock 与 Insert Intention Lock不兼容。</li>\n<li>Gap lock 和Next key lock 的目的就是防止有数据插入间隙</li>\n</ol>\n<h3 id=\"不同sql产生的锁\"><a class=\"markdownIt-Anchor\" href=\"#不同sql产生的锁\"></a> 不同SQL产生的锁</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html</a></p>\n<ol>\n<li>SELECT…FROM</li>\n</ol>\n<blockquote>\n<p>一致性非锁定读，除了在 SERIALIZABLE隔离级别下会存在S锁，其他隔离级别下都不会有锁。</p>\n</blockquote>\n<ol start=\"2\">\n<li>SELECT…FOR UPDATE/SELECT…LOCK IN SHARE MODE</li>\n</ol>\n<blockquote>\n<ul>\n<li>也叫做当前读，会在给扫描过程中的索引加X或S锁，跟Where条件实际上没有强关系，只跟扫描的过程有关，所以where条件是否能够命中索引比较重要。</li>\n<li>在检索的过程中会给用到的索引加Next Key Lock。不过如果检索条件是唯一索引能定位到一行数据，则只加Record Lock</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>UPDATE…WHERE…</li>\n</ol>\n<blockquote>\n<p>同样给检索到的记录加next key lock, 如果WHERE条件中是使用主键或者唯一索引进行限定的话，只在索引加了Record Lock。<br>\n如果UPDATE的是聚簇索引记录，会对受影响的辅助索引加隐式锁，当有新的辅助索引插入前的重复检测，以及在执行插入新的辅助索引记录时，对受影响的索引记录加S锁。</p>\n</blockquote>\n<ol start=\"4\">\n<li>DELETE FROM … WHERE …</li>\n</ol>\n<blockquote>\n<p>与UPDATE基本一致</p>\n</blockquote>\n<ol start=\"5\">\n<li>INSERT</li>\n</ol>\n<blockquote>\n<ul>\n<li>给插入索引的记录加一个X锁</li>\n<li>插入前前会加个Insert Intention Lock。</li>\n<li>如果发生唯一键异常（duplicate-key error ），会在原记录上加S锁，这个如果和delete和update一起使用可能会导致死锁。</li>\n</ul>\n</blockquote>\n<ol start=\"6\">\n<li>INSERT … ON DUPLICATE KEY UPDATE</li>\n</ol>\n<blockquote>\n<ul>\n<li>跟INSERT语句有点不同的就是，当发生重复键异常是，这里加的是排他锁，而不是共享锁。</li>\n<li>如果是唯一键异常，则加的是Next key lock。</li>\n</ul>\n</blockquote>\n<ol start=\"7\">\n<li>REPLACE</li>\n</ol>\n<blockquote>\n<ul>\n<li>如果没有发生冲突，则行为跟INSERT是一致的。</li>\n<li>如果发生冲突，则对唯一键加的是Next key lock。</li>\n</ul>\n</blockquote>\n<ol start=\"8\">\n<li>INSERT INTO T SELECT … FROM S WHERE …</li>\n</ol>\n<blockquote>\n<ul>\n<li>给子查询语句加的X锁。</li>\n<li>如果是READ COMMITED 隔离基本，则采用的是快照读</li>\n</ul>\n</blockquote>\n<ol start=\"9\">\n<li>外键约束</li>\n</ol>\n<blockquote>\n<p>在进行外键约束检测时，会给记录加行级共享锁。</p>\n</blockquote>\n<h3 id=\"死锁\"><a class=\"markdownIt-Anchor\" href=\"#死锁\"></a> 死锁</h3>\n<blockquote>\n<p>死锁是只当2个或者2个以上的事务抢占各自的资源，导致的相互等待的现象。</p>\n</blockquote>\n<h4 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\"></a> 案例</h4>\n<ol>\n<li><a href=\"http://liaojiacan.me/2019/02/27/Insert-ignore-%E5%92%8Cupdate-%E5%AF%BC%E8%87%B4%E7%9A%84%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/\">Insert-ignore-和update-导致的死锁问题分析</a></li>\n</ol>\n<h4 id=\"解决死锁和进行死锁检测\"><a class=\"markdownIt-Anchor\" href=\"#解决死锁和进行死锁检测\"></a> 解决死锁和进行死锁检测</h4>\n<ol>\n<li>设置超时时间,事务有限时间超时,回滚其中一个事务。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &quot;%innodb_lock_wait_timeout%&quot;;</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">| Variable_name            | Value |</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">| innodb_lock_wait_timeout | 50    |</span><br><span class=\"line\">+--------------------------+-------+</span><br><span class=\"line\">1 row in set (0.07 sec)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>wait-graph 等待图死锁检测</li>\n</ol>\n<ul>\n<li>锁的信息链</li>\n<li>事务等待链</li>\n</ul>\n"},{"title":"Java中的多线程和锁实现原理","author":"Jiacan Liao","date":"2019-03-11T09:19:00.000Z","_content":"## 线程的实现\nJava 规范里面并没有规定JVM要如何实现线程模型，在HotSpot VM 中使用的是1:1的线程模型，即1个java线程对应一个OS的线程（内核线程），在Thread中又很多native方法，就是调用OS的函数进行用户线程和内核线程的绑定。\n\n- 每个线程都又一个内核线程与之绑定，用户线程推出，内核线程也会一起退出。\n- 内核线程的数量是有限制的\n- 内核线程调用，上下文切换开销很大。\n### 线程调度\n#### 线程的状态 （Thread.State枚举）\n- NEW : \n- RUNNABLE : 对应的就绪和运行态\n- BLOCKED : 阻塞状态，处于阻塞状态的线程会不断地请求资源，请求成功后就会进入就绪状态。\n- WAITING : 等待状态，当线程调用wait,join,park等函数。等待状态下会释放资源，让出CPU和释放锁。需要其他线程唤醒。\n- TIMED_WAITING  有限的等待。\n- TERMINATED\n\n\n### 线程相关的一些文章\n- [Java的线程管理器能保证每个线程都有执行的机会么?](https://www.zhihu.com/question/27491155/answer/36847691)\n- [wait/notify实现原理](http://www.hainiubl.com/topics/29)\n## 锁\n\n因为多线程的共享数据存在线程安全问题，需要通过一些控制来保证共享数据的读写，JVM层面提供sychronized的锁，而java层面current包下面有许多基于AQS的Lock的实现,在jdk1.6后,synchronized 和 ReentrantLock性能上以及没有太大的差距，ReentrantLock的使用更佳灵活，性能稳定，支持超时机制等，而采用synchronized不需要程序自己控制锁的加锁和释放，不容易出现死锁等问题。\n\n### synchronized 的实现原理\nJVM规范规定基于进入和退出monitor对象来控制方法和代码块的同步，也是就是monitorenter和monitorexit两个指令，当程序执行到monitorenter指令时会尝试获取对象的monitor所有权，也就是获取对象的锁。在最开始的JVM实现中是采用重量级锁的实现，线程的切换都涉及到用户态到内核态的切换，比较消化资源，所以在jdk1.6对锁进行优化。\n\n#### 同步原理\n> - JVM是怎么控制多线程程序的交替访问的？\n\nJava中每个对象都有一个内置锁与之对应，所有需要对该对象进行排他性或者一致性访问时需要获取对象的内置锁（synchronized 中的代码，monitorenter指令）。这个内置锁的信息存在对象的对象头中（一些基本信息，其他的condition，队列等是在native heap中的）。一个对象的Monitor只能被一个线程获取到，其他线程得等待持有的Monitor的线程释放。\n> 在一些官方的注释中说的是ObjectMonitor是一个内联锁对象的封装，就好比JVM层面实现的一个类似JUC框架下的Lock（不是说ObjectMonitor是JUC的Lock实现，说的是他们可能实现思路是一样的）。\n\n做好线程的同步协调，我认为需要这3样东西（ObjectMonitor 和J.U.C的AQS 都是这样的）：\n1. 维护一个竞争的互斥量\n2. 一个队列\n3. 线程的挂起和唤醒\n> 实现同步也可以只用一个互斥量，自旋锁就是这么实现的，但是锁竞争太激烈会导致CPU做无用功。\n\n想继续了解ObjectMonitor的实现可以看这几篇文章：\n- [synchronized 与 object's Monitor](http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html)\n- [Moniter实现原理](https://www.hollischuang.com/archives/2030)\n\n#### 对象头\n> - Object的锁信息是存在在哪里的？\n> - 在获取对象的锁的过程中都用到了对象头的哪些数据？\n\n锁的信息存在java对象头里面。如果对象是数组，这虚拟机会用3个Word(32位虚拟机，32bit)来存对象头，如果对象是非数组类型，则用2个Word来存对象头，其中 有一个word用来存储对象的hashcode和锁信息，32bit，叫Mark word。\n- Mark Word 不是一个固定的数据结构，具体的信息分布需要先判断2bit的锁标志位，不同的锁标志位，剩余的30bit可能表示不同的意思。\n- 32bit的信息是不够存Monitor线程同步（调度）所需要的信息的，所以重量级锁是有另外的native heap存储的，之后再把指针存在Mark word 中。 \n<table width=\"500\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td rowspan=\"2\" valign=\"top\" width=\"76\"><strong>锁状态</strong></td>\n<td colspan=\"3\" valign=\"top\" width=\"106\">\n<p align=\"center\">25 bit</p>\n</td>\n<td rowspan=\"2\" valign=\"top\" width=\"85\">\n<p align=\"center\">4bit</p>\n</td>\n<td valign=\"top\" width=\"85\">1bit</td>\n<td valign=\"top\" width=\"78\">2bit</td>\n</tr>\n<tr>\n<td colspan=\"2\" valign=\"top\" width=\"70\">23bit</td>\n<td valign=\"top\" width=\"56\">2bit</td>\n<td valign=\"top\" width=\"120\">是否是偏向锁</td>\n<td valign=\"top\" width=\"100\">锁标志位</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"90\">轻量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向栈中锁记录的指针</td>\n<td valign=\"top\" width=\"78\">00</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">重量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向互斥量（重量级锁）的指针</td>\n<td valign=\"top\" width=\"78\">10</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">GC标记</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">空</td>\n<td valign=\"top\" width=\"78\">11</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">偏向锁</td>\n<td valign=\"top\" width=\"80\">线程ID</td>\n<td colspan=\"2\" valign=\"top\" width=\"80\">Epoch</td>\n<td valign=\"top\" width=\"120\">对象分代年龄</td>\n<td valign=\"top\" width=\"85\">1</td>\n<td valign=\"top\" width=\"78\">01</td>\n</tr>\n</tbody>\n</table>\n\n#### 锁的优化\n在jdk1.6之前synchronized是单纯的重量级锁实现，由于重量级锁，线程获取不到锁就需要挂起等待唤醒，这种切换涉及到了用户态到内核态的转换，开销还是比较大的。在jdk1.6加入了偏向锁、轻量级锁。只有一个线程请求对象锁的时候，启用的是偏向锁，当有第二个线程竞争的时候（应该说是偏向状态出现锁竞争），这个时候会升级为轻量级锁（cas 自旋锁），处于轻量级锁状态下，如果自旋10次（可以配置）还是获取锁失败，则锁升级为重量级锁。\n- 偏向锁 ：在大部分情况下一个同步方法或者一个同步代码块不存在多线程的竞争，这样只需要在对象头和当前线程的栈帧中存一个线程ID，每次获取锁的时候只需要判断一些线程ID释放一致就行了，不用进行CAS的加锁和解锁。如果有第二个线程需要竞争锁，这个时候会通过CAS设置Mark Word中的锁状态位，成功则修改为偏向当前线程，失败的话就进行锁的升级，锁升级涉及到偏向锁的撤销，会将偏向锁线程挂起。\n    > [偏向锁会将Mark Word设置为当前threadId，那么hashCode存哪里了?](https://stackoverflow.com/questions/14717736/where-is-objects-hash-code-stored-if-biased-locking-is-enabled-in-hotspot-jvm)\n    > 如果处于偏向的的对象调用的hashCode方法就会触发撤销偏向锁 \n- 轻量级锁：线程在获取锁之前，当前线程会在栈帧中创建一个Mark Word的拷贝作为锁记录，官方称为Displaced Mark Word。然后将对象头中替换成锁记录的指针（CAS），如果失败则会自旋10次（在1.6之后是采用自适应锁，这个时间已经不能自己配置了），之后升级为重量级锁。\n    > 为什么一定要拷贝到Displaced Mark Word，而不直接就采用一个threadId？一个原因是需要恢复hash和GC分代的信息，一个就是解决重入锁的问题。\n\n- 重量级锁：ObjectMonitor有更多的空间来实现线程同步，可以更好像的实现线程同步（挂起和唤醒）。[轻量级锁为什么要膨胀？](https://www.zhihu.com/question/41930877/answer/136699311)\n\n#### 优缺点\n\n锁 | 优点 | 缺点 | 使用场景\n---|---|---|---\n偏向锁 | 只需比较threadId释放是否是当前线程<br>没有CAS的消耗 | 当出现锁竞争的时候会有锁撤销的消耗 | 单个线程\n轻量级锁 | 线程一直在用户态，不用挂起。没有线程切换的消耗| 自旋会导致CPU做无用功| 同步代码块执行较快。\n重量级锁 | 线程挂起，不用进行自旋 | 用户态到内核态转化，开销大| 同步代码块执行时间较长，锁竞争激烈\n\n### J.U.C中的锁\n上面锁的synchronzied是JVM的内置锁，在1.6之前性能比较差，Doug Lea就写个并发框架(java.util.current)，在1.6之后synchronized的性能已经跟Lock查不不多了，但是还少了锁的获取和释放的操作性，不支持超时，只有一个condition等。\n#### AQS\nAbstractQueueSynchronizer是J.U.C中其他锁或者同步器的基础框架（ReentrantLock,ReentrantReadWriteLock,CountdDownLatch,CyclicBarrier等），这些框架在AQS的基础上进行了扩展，通常是继承AQS然后实现了AQS的几个抽象方法。\n> 我在上面说ObjectMonitor有说到，同步器为了完成同步工作，需要3个东西：\n1. 用于同步的状态量\n2. 一个队列或者一个保存等待线程的容器\n3. 线程的挂起和唤醒\n\n我们看下AQS是怎么围绕这3个部分进行实现的。\n\n##### 1. 同步的状态量(互斥量)\nAQS中维护一个volatile 的int 变量state，线程通过cas来获取这个互斥量。AQS提供一下几个方法来对state变量进行操作。\n- getState()\n- compareAndSetState(int expect, int update)\n- setState(int state)\n\n有了上面的3个方法，同步器就可以实现自旋锁，但是如果想实现公平锁，上面的三个方法或者说单用一个state变量是无法做到了。这个时候就需要一个FIFO的队列来维护这些线程。此外为了实现重入锁，我们还得需要一个变量来存当前持有的锁是什么线程。\n\n##### 2.等待线程队列\nAQS 用了一个CLH的双向队列，Node的数据结构大概如下：\n```\nstatci final class Node{\n    \n    volatile int waitStatus;\n    volatile Node prev;\n    volatile Node next;\n    Node nextWaiter;\n}\n\n```\nAQS维护一个头节点和一个尾节点，入队的时候通过CAS加入到未尾节点中。入队后开始开始自旋。\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            final Node p = node.predecessor();\n            // 前趋节点是头节点，并且获取到互斥量，说明获取锁成功。\n            if (p == head && tryAcquire(arg)) {\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            // 判断是否需要挂起\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n从上面代码片段可以看出，加入队列的线程节点并不是完全的自旋，shouldParkAfterFailedAcquire方法判断当前线程是否需要挂起。\n> 下面的这个方法表明shouldParkAfterFailedAcquire 会在调用1到2次后会返回true（如果期间节点没有发生改变的话）。也就是自旋锁只自旋了2次就会被挂起。\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /* \n             * 进行到这里说明前驱节点的waitStatus 是0 或者PROPAGATE ，利用CAS的设置为SIGNAL，这样下次自旋就会阻塞了，这里不返回true的目的是让当前线程再自旋一次，确保挂起前是无法获取到锁（避免发生刚挂起就被唤醒的情况）。\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n##### 3.线程的挂起和唤醒\nAQS中实现线程的挂起和唤醒是通过LockSupport这个工具，LockSupport的底层实现是调用Unsafe的native方法。\n```\npublic static void unpark(Thread thread) {\n    if (thread != null)\n        UNSAFE.unpark(thread);\n}\n\npublic static void park(Object blocker) {\n    Thread t = Thread.currentThread();\n    setBlocker(t, blocker);\n    UNSAFE.park(false, 0L);\n    setBlocker(t, null);\n}\n```\n\n##### ConditionObject\nConditionObject 是AQS实现类似object类的wait/notify/notifyAll方法的，ConditionObject提供的是aw\nait/awaitNanos(long nanos)/awaitUtil(Date date)/awaitUniterrutibly()/signal()/signalAll()。底层的实现也是各自维护一个队列，Node.nextWaiter。\n\n- 对于超时机制也是用LockSupport中的实现，但并不是所有情况下都使用系统的休眠，有个休眠的自旋时间阀值`spinForTimeoutThreshold = 1000L` ，默认是1000 纳秒，少于这个阀值的都不用休眠，而是直接自旋。\n\n\n### 参考文章\n- [synchronized 与 object's Monitor](http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html)\n- [AbstractQueuedSynchronizer的介绍和原理分析](http://ifeve.com/introduce-abstractqueuedsynchronizer/)\n- [J.U.C之AQS：阻塞和唤醒线程](https://blog.csdn.net/chenssy/article/details/65449785)\n- [关于synchronized的Monitor Object机制的研究](https://blog.csdn.net/m_xiaoer/article/details/73274642)\n- [Intrinsic Locks and Synchronization](https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html)","source":"_posts/Java中的多线程和锁实现原理.md","raw":"title: Java中的多线程和锁实现原理\nauthor: Jiacan Liao\ntags:\n  - 多线程\n  - synchronized\n  - AQS\ncategories:\n  - jdk\ndate: 2019-03-11 17:19:00\n---\n## 线程的实现\nJava 规范里面并没有规定JVM要如何实现线程模型，在HotSpot VM 中使用的是1:1的线程模型，即1个java线程对应一个OS的线程（内核线程），在Thread中又很多native方法，就是调用OS的函数进行用户线程和内核线程的绑定。\n\n- 每个线程都又一个内核线程与之绑定，用户线程推出，内核线程也会一起退出。\n- 内核线程的数量是有限制的\n- 内核线程调用，上下文切换开销很大。\n### 线程调度\n#### 线程的状态 （Thread.State枚举）\n- NEW : \n- RUNNABLE : 对应的就绪和运行态\n- BLOCKED : 阻塞状态，处于阻塞状态的线程会不断地请求资源，请求成功后就会进入就绪状态。\n- WAITING : 等待状态，当线程调用wait,join,park等函数。等待状态下会释放资源，让出CPU和释放锁。需要其他线程唤醒。\n- TIMED_WAITING  有限的等待。\n- TERMINATED\n\n\n### 线程相关的一些文章\n- [Java的线程管理器能保证每个线程都有执行的机会么?](https://www.zhihu.com/question/27491155/answer/36847691)\n- [wait/notify实现原理](http://www.hainiubl.com/topics/29)\n## 锁\n\n因为多线程的共享数据存在线程安全问题，需要通过一些控制来保证共享数据的读写，JVM层面提供sychronized的锁，而java层面current包下面有许多基于AQS的Lock的实现,在jdk1.6后,synchronized 和 ReentrantLock性能上以及没有太大的差距，ReentrantLock的使用更佳灵活，性能稳定，支持超时机制等，而采用synchronized不需要程序自己控制锁的加锁和释放，不容易出现死锁等问题。\n\n### synchronized 的实现原理\nJVM规范规定基于进入和退出monitor对象来控制方法和代码块的同步，也是就是monitorenter和monitorexit两个指令，当程序执行到monitorenter指令时会尝试获取对象的monitor所有权，也就是获取对象的锁。在最开始的JVM实现中是采用重量级锁的实现，线程的切换都涉及到用户态到内核态的切换，比较消化资源，所以在jdk1.6对锁进行优化。\n\n#### 同步原理\n> - JVM是怎么控制多线程程序的交替访问的？\n\nJava中每个对象都有一个内置锁与之对应，所有需要对该对象进行排他性或者一致性访问时需要获取对象的内置锁（synchronized 中的代码，monitorenter指令）。这个内置锁的信息存在对象的对象头中（一些基本信息，其他的condition，队列等是在native heap中的）。一个对象的Monitor只能被一个线程获取到，其他线程得等待持有的Monitor的线程释放。\n> 在一些官方的注释中说的是ObjectMonitor是一个内联锁对象的封装，就好比JVM层面实现的一个类似JUC框架下的Lock（不是说ObjectMonitor是JUC的Lock实现，说的是他们可能实现思路是一样的）。\n\n做好线程的同步协调，我认为需要这3样东西（ObjectMonitor 和J.U.C的AQS 都是这样的）：\n1. 维护一个竞争的互斥量\n2. 一个队列\n3. 线程的挂起和唤醒\n> 实现同步也可以只用一个互斥量，自旋锁就是这么实现的，但是锁竞争太激烈会导致CPU做无用功。\n\n想继续了解ObjectMonitor的实现可以看这几篇文章：\n- [synchronized 与 object's Monitor](http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html)\n- [Moniter实现原理](https://www.hollischuang.com/archives/2030)\n\n#### 对象头\n> - Object的锁信息是存在在哪里的？\n> - 在获取对象的锁的过程中都用到了对象头的哪些数据？\n\n锁的信息存在java对象头里面。如果对象是数组，这虚拟机会用3个Word(32位虚拟机，32bit)来存对象头，如果对象是非数组类型，则用2个Word来存对象头，其中 有一个word用来存储对象的hashcode和锁信息，32bit，叫Mark word。\n- Mark Word 不是一个固定的数据结构，具体的信息分布需要先判断2bit的锁标志位，不同的锁标志位，剩余的30bit可能表示不同的意思。\n- 32bit的信息是不够存Monitor线程同步（调度）所需要的信息的，所以重量级锁是有另外的native heap存储的，之后再把指针存在Mark word 中。 \n<table width=\"500\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td rowspan=\"2\" valign=\"top\" width=\"76\"><strong>锁状态</strong></td>\n<td colspan=\"3\" valign=\"top\" width=\"106\">\n<p align=\"center\">25 bit</p>\n</td>\n<td rowspan=\"2\" valign=\"top\" width=\"85\">\n<p align=\"center\">4bit</p>\n</td>\n<td valign=\"top\" width=\"85\">1bit</td>\n<td valign=\"top\" width=\"78\">2bit</td>\n</tr>\n<tr>\n<td colspan=\"2\" valign=\"top\" width=\"70\">23bit</td>\n<td valign=\"top\" width=\"56\">2bit</td>\n<td valign=\"top\" width=\"120\">是否是偏向锁</td>\n<td valign=\"top\" width=\"100\">锁标志位</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"90\">轻量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向栈中锁记录的指针</td>\n<td valign=\"top\" width=\"78\">00</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">重量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向互斥量（重量级锁）的指针</td>\n<td valign=\"top\" width=\"78\">10</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">GC标记</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">空</td>\n<td valign=\"top\" width=\"78\">11</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">偏向锁</td>\n<td valign=\"top\" width=\"80\">线程ID</td>\n<td colspan=\"2\" valign=\"top\" width=\"80\">Epoch</td>\n<td valign=\"top\" width=\"120\">对象分代年龄</td>\n<td valign=\"top\" width=\"85\">1</td>\n<td valign=\"top\" width=\"78\">01</td>\n</tr>\n</tbody>\n</table>\n\n#### 锁的优化\n在jdk1.6之前synchronized是单纯的重量级锁实现，由于重量级锁，线程获取不到锁就需要挂起等待唤醒，这种切换涉及到了用户态到内核态的转换，开销还是比较大的。在jdk1.6加入了偏向锁、轻量级锁。只有一个线程请求对象锁的时候，启用的是偏向锁，当有第二个线程竞争的时候（应该说是偏向状态出现锁竞争），这个时候会升级为轻量级锁（cas 自旋锁），处于轻量级锁状态下，如果自旋10次（可以配置）还是获取锁失败，则锁升级为重量级锁。\n- 偏向锁 ：在大部分情况下一个同步方法或者一个同步代码块不存在多线程的竞争，这样只需要在对象头和当前线程的栈帧中存一个线程ID，每次获取锁的时候只需要判断一些线程ID释放一致就行了，不用进行CAS的加锁和解锁。如果有第二个线程需要竞争锁，这个时候会通过CAS设置Mark Word中的锁状态位，成功则修改为偏向当前线程，失败的话就进行锁的升级，锁升级涉及到偏向锁的撤销，会将偏向锁线程挂起。\n    > [偏向锁会将Mark Word设置为当前threadId，那么hashCode存哪里了?](https://stackoverflow.com/questions/14717736/where-is-objects-hash-code-stored-if-biased-locking-is-enabled-in-hotspot-jvm)\n    > 如果处于偏向的的对象调用的hashCode方法就会触发撤销偏向锁 \n- 轻量级锁：线程在获取锁之前，当前线程会在栈帧中创建一个Mark Word的拷贝作为锁记录，官方称为Displaced Mark Word。然后将对象头中替换成锁记录的指针（CAS），如果失败则会自旋10次（在1.6之后是采用自适应锁，这个时间已经不能自己配置了），之后升级为重量级锁。\n    > 为什么一定要拷贝到Displaced Mark Word，而不直接就采用一个threadId？一个原因是需要恢复hash和GC分代的信息，一个就是解决重入锁的问题。\n\n- 重量级锁：ObjectMonitor有更多的空间来实现线程同步，可以更好像的实现线程同步（挂起和唤醒）。[轻量级锁为什么要膨胀？](https://www.zhihu.com/question/41930877/answer/136699311)\n\n#### 优缺点\n\n锁 | 优点 | 缺点 | 使用场景\n---|---|---|---\n偏向锁 | 只需比较threadId释放是否是当前线程<br>没有CAS的消耗 | 当出现锁竞争的时候会有锁撤销的消耗 | 单个线程\n轻量级锁 | 线程一直在用户态，不用挂起。没有线程切换的消耗| 自旋会导致CPU做无用功| 同步代码块执行较快。\n重量级锁 | 线程挂起，不用进行自旋 | 用户态到内核态转化，开销大| 同步代码块执行时间较长，锁竞争激烈\n\n### J.U.C中的锁\n上面锁的synchronzied是JVM的内置锁，在1.6之前性能比较差，Doug Lea就写个并发框架(java.util.current)，在1.6之后synchronized的性能已经跟Lock查不不多了，但是还少了锁的获取和释放的操作性，不支持超时，只有一个condition等。\n#### AQS\nAbstractQueueSynchronizer是J.U.C中其他锁或者同步器的基础框架（ReentrantLock,ReentrantReadWriteLock,CountdDownLatch,CyclicBarrier等），这些框架在AQS的基础上进行了扩展，通常是继承AQS然后实现了AQS的几个抽象方法。\n> 我在上面说ObjectMonitor有说到，同步器为了完成同步工作，需要3个东西：\n1. 用于同步的状态量\n2. 一个队列或者一个保存等待线程的容器\n3. 线程的挂起和唤醒\n\n我们看下AQS是怎么围绕这3个部分进行实现的。\n\n##### 1. 同步的状态量(互斥量)\nAQS中维护一个volatile 的int 变量state，线程通过cas来获取这个互斥量。AQS提供一下几个方法来对state变量进行操作。\n- getState()\n- compareAndSetState(int expect, int update)\n- setState(int state)\n\n有了上面的3个方法，同步器就可以实现自旋锁，但是如果想实现公平锁，上面的三个方法或者说单用一个state变量是无法做到了。这个时候就需要一个FIFO的队列来维护这些线程。此外为了实现重入锁，我们还得需要一个变量来存当前持有的锁是什么线程。\n\n##### 2.等待线程队列\nAQS 用了一个CLH的双向队列，Node的数据结构大概如下：\n```\nstatci final class Node{\n    \n    volatile int waitStatus;\n    volatile Node prev;\n    volatile Node next;\n    Node nextWaiter;\n}\n\n```\nAQS维护一个头节点和一个尾节点，入队的时候通过CAS加入到未尾节点中。入队后开始开始自旋。\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            final Node p = node.predecessor();\n            // 前趋节点是头节点，并且获取到互斥量，说明获取锁成功。\n            if (p == head && tryAcquire(arg)) {\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            // 判断是否需要挂起\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n从上面代码片段可以看出，加入队列的线程节点并不是完全的自旋，shouldParkAfterFailedAcquire方法判断当前线程是否需要挂起。\n> 下面的这个方法表明shouldParkAfterFailedAcquire 会在调用1到2次后会返回true（如果期间节点没有发生改变的话）。也就是自旋锁只自旋了2次就会被挂起。\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)\n            /*\n             * This node has already set status asking a release\n             * to signal it, so it can safely park.\n             */\n            return true;\n        if (ws > 0) {\n            /*\n             * Predecessor was cancelled. Skip over predecessors and\n             * indicate retry.\n             */\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {\n            /* \n             * 进行到这里说明前驱节点的waitStatus 是0 或者PROPAGATE ，利用CAS的设置为SIGNAL，这样下次自旋就会阻塞了，这里不返回true的目的是让当前线程再自旋一次，确保挂起前是无法获取到锁（避免发生刚挂起就被唤醒的情况）。\n             * waitStatus must be 0 or PROPAGATE.  Indicate that we\n             * need a signal, but don't park yet.  Caller will need to\n             * retry to make sure it cannot acquire before parking.\n             */\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n\n##### 3.线程的挂起和唤醒\nAQS中实现线程的挂起和唤醒是通过LockSupport这个工具，LockSupport的底层实现是调用Unsafe的native方法。\n```\npublic static void unpark(Thread thread) {\n    if (thread != null)\n        UNSAFE.unpark(thread);\n}\n\npublic static void park(Object blocker) {\n    Thread t = Thread.currentThread();\n    setBlocker(t, blocker);\n    UNSAFE.park(false, 0L);\n    setBlocker(t, null);\n}\n```\n\n##### ConditionObject\nConditionObject 是AQS实现类似object类的wait/notify/notifyAll方法的，ConditionObject提供的是aw\nait/awaitNanos(long nanos)/awaitUtil(Date date)/awaitUniterrutibly()/signal()/signalAll()。底层的实现也是各自维护一个队列，Node.nextWaiter。\n\n- 对于超时机制也是用LockSupport中的实现，但并不是所有情况下都使用系统的休眠，有个休眠的自旋时间阀值`spinForTimeoutThreshold = 1000L` ，默认是1000 纳秒，少于这个阀值的都不用休眠，而是直接自旋。\n\n\n### 参考文章\n- [synchronized 与 object's Monitor](http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html)\n- [AbstractQueuedSynchronizer的介绍和原理分析](http://ifeve.com/introduce-abstractqueuedsynchronizer/)\n- [J.U.C之AQS：阻塞和唤醒线程](https://blog.csdn.net/chenssy/article/details/65449785)\n- [关于synchronized的Monitor Object机制的研究](https://blog.csdn.net/m_xiaoer/article/details/73274642)\n- [Intrinsic Locks and Synchronization](https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html)","slug":"Java中的多线程和锁实现原理","published":1,"updated":"2019-03-23T09:40:54.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bq000bkg88z6lxjmda","content":"<h2 id=\"线程的实现\"><a class=\"markdownIt-Anchor\" href=\"#线程的实现\"></a> 线程的实现</h2>\n<p>Java 规范里面并没有规定JVM要如何实现线程模型，在HotSpot VM 中使用的是1:1的线程模型，即1个java线程对应一个OS的线程（内核线程），在Thread中又很多native方法，就是调用OS的函数进行用户线程和内核线程的绑定。</p>\n<ul>\n<li>每个线程都又一个内核线程与之绑定，用户线程推出，内核线程也会一起退出。</li>\n<li>内核线程的数量是有限制的</li>\n<li>内核线程调用，上下文切换开销很大。</li>\n</ul>\n<h3 id=\"线程调度\"><a class=\"markdownIt-Anchor\" href=\"#线程调度\"></a> 线程调度</h3>\n<h4 id=\"线程的状态-threadstate枚举\"><a class=\"markdownIt-Anchor\" href=\"#线程的状态-threadstate枚举\"></a> 线程的状态 （Thread.State枚举）</h4>\n<ul>\n<li>NEW :</li>\n<li>RUNNABLE : 对应的就绪和运行态</li>\n<li>BLOCKED : 阻塞状态，处于阻塞状态的线程会不断地请求资源，请求成功后就会进入就绪状态。</li>\n<li>WAITING : 等待状态，当线程调用wait,join,park等函数。等待状态下会释放资源，让出CPU和释放锁。需要其他线程唤醒。</li>\n<li>TIMED_WAITING  有限的等待。</li>\n<li>TERMINATED</li>\n</ul>\n<h3 id=\"线程相关的一些文章\"><a class=\"markdownIt-Anchor\" href=\"#线程相关的一些文章\"></a> 线程相关的一些文章</h3>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/27491155/answer/36847691\" target=\"_blank\" rel=\"noopener\">Java的线程管理器能保证每个线程都有执行的机会么?</a></li>\n<li><a href=\"http://www.hainiubl.com/topics/29\" target=\"_blank\" rel=\"noopener\">wait/notify实现原理</a></li>\n</ul>\n<h2 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\"></a> 锁</h2>\n<p>因为多线程的共享数据存在线程安全问题，需要通过一些控制来保证共享数据的读写，JVM层面提供sychronized的锁，而java层面current包下面有许多基于AQS的Lock的实现,在jdk1.6后,synchronized 和 ReentrantLock性能上以及没有太大的差距，ReentrantLock的使用更佳灵活，性能稳定，支持超时机制等，而采用synchronized不需要程序自己控制锁的加锁和释放，不容易出现死锁等问题。</p>\n<h3 id=\"synchronized-的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#synchronized-的实现原理\"></a> synchronized 的实现原理</h3>\n<p>JVM规范规定基于进入和退出monitor对象来控制方法和代码块的同步，也是就是monitorenter和monitorexit两个指令，当程序执行到monitorenter指令时会尝试获取对象的monitor所有权，也就是获取对象的锁。在最开始的JVM实现中是采用重量级锁的实现，线程的切换都涉及到用户态到内核态的切换，比较消化资源，所以在jdk1.6对锁进行优化。</p>\n<h4 id=\"同步原理\"><a class=\"markdownIt-Anchor\" href=\"#同步原理\"></a> 同步原理</h4>\n<blockquote>\n<ul>\n<li>JVM是怎么控制多线程程序的交替访问的？</li>\n</ul>\n</blockquote>\n<p>Java中每个对象都有一个内置锁与之对应，所有需要对该对象进行排他性或者一致性访问时需要获取对象的内置锁（synchronized 中的代码，monitorenter指令）。这个内置锁的信息存在对象的对象头中（一些基本信息，其他的condition，队列等是在native heap中的）。一个对象的Monitor只能被一个线程获取到，其他线程得等待持有的Monitor的线程释放。</p>\n<blockquote>\n<p>在一些官方的注释中说的是ObjectMonitor是一个内联锁对象的封装，就好比JVM层面实现的一个类似JUC框架下的Lock（不是说ObjectMonitor是JUC的Lock实现，说的是他们可能实现思路是一样的）。</p>\n</blockquote>\n<p>做好线程的同步协调，我认为需要这3样东西（ObjectMonitor 和J.U.C的AQS 都是这样的）：</p>\n<ol>\n<li>维护一个竞争的互斥量</li>\n<li>一个队列</li>\n<li>线程的挂起和唤醒</li>\n</ol>\n<blockquote>\n<p>实现同步也可以只用一个互斥量，自旋锁就是这么实现的，但是锁竞争太激烈会导致CPU做无用功。</p>\n</blockquote>\n<p>想继续了解ObjectMonitor的实现可以看这几篇文章：</p>\n<ul>\n<li><a href=\"http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html\" target=\"_blank\" rel=\"noopener\">synchronized 与 object’s Monitor</a></li>\n<li><a href=\"https://www.hollischuang.com/archives/2030\" target=\"_blank\" rel=\"noopener\">Moniter实现原理</a></li>\n</ul>\n<h4 id=\"对象头\"><a class=\"markdownIt-Anchor\" href=\"#对象头\"></a> 对象头</h4>\n<blockquote>\n<ul>\n<li>Object的锁信息是存在在哪里的？</li>\n<li>在获取对象的锁的过程中都用到了对象头的哪些数据？</li>\n</ul>\n</blockquote>\n<p>锁的信息存在java对象头里面。如果对象是数组，这虚拟机会用3个Word(32位虚拟机，32bit)来存对象头，如果对象是非数组类型，则用2个Word来存对象头，其中 有一个word用来存储对象的hashcode和锁信息，32bit，叫Mark word。</p>\n<ul>\n<li>Mark Word 不是一个固定的数据结构，具体的信息分布需要先判断2bit的锁标志位，不同的锁标志位，剩余的30bit可能表示不同的意思。</li>\n<li>32bit的信息是不够存Monitor线程同步（调度）所需要的信息的，所以重量级锁是有另外的native heap存储的，之后再把指针存在Mark word 中。</li>\n</ul>\n<table width=\"500\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td rowspan=\"2\" valign=\"top\" width=\"76\"><strong>锁状态</strong></td>\n<td colspan=\"3\" valign=\"top\" width=\"106\">\n<p align=\"center\">25 bit</p>\n</td>\n<td rowspan=\"2\" valign=\"top\" width=\"85\">\n<p align=\"center\">4bit</p>\n</td>\n<td valign=\"top\" width=\"85\">1bit</td>\n<td valign=\"top\" width=\"78\">2bit</td>\n</tr>\n<tr>\n<td colspan=\"2\" valign=\"top\" width=\"70\">23bit</td>\n<td valign=\"top\" width=\"56\">2bit</td>\n<td valign=\"top\" width=\"120\">是否是偏向锁</td>\n<td valign=\"top\" width=\"100\">锁标志位</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"90\">轻量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向栈中锁记录的指针</td>\n<td valign=\"top\" width=\"78\">00</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">重量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向互斥量（重量级锁）的指针</td>\n<td valign=\"top\" width=\"78\">10</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">GC标记</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">空</td>\n<td valign=\"top\" width=\"78\">11</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">偏向锁</td>\n<td valign=\"top\" width=\"80\">线程ID</td>\n<td colspan=\"2\" valign=\"top\" width=\"80\">Epoch</td>\n<td valign=\"top\" width=\"120\">对象分代年龄</td>\n<td valign=\"top\" width=\"85\">1</td>\n<td valign=\"top\" width=\"78\">01</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"锁的优化\"><a class=\"markdownIt-Anchor\" href=\"#锁的优化\"></a> 锁的优化</h4>\n<p>在jdk1.6之前synchronized是单纯的重量级锁实现，由于重量级锁，线程获取不到锁就需要挂起等待唤醒，这种切换涉及到了用户态到内核态的转换，开销还是比较大的。在jdk1.6加入了偏向锁、轻量级锁。只有一个线程请求对象锁的时候，启用的是偏向锁，当有第二个线程竞争的时候（应该说是偏向状态出现锁竞争），这个时候会升级为轻量级锁（cas 自旋锁），处于轻量级锁状态下，如果自旋10次（可以配置）还是获取锁失败，则锁升级为重量级锁。</p>\n<ul>\n<li>\n<p>偏向锁 ：在大部分情况下一个同步方法或者一个同步代码块不存在多线程的竞争，这样只需要在对象头和当前线程的栈帧中存一个线程ID，每次获取锁的时候只需要判断一些线程ID释放一致就行了，不用进行CAS的加锁和解锁。如果有第二个线程需要竞争锁，这个时候会通过CAS设置Mark Word中的锁状态位，成功则修改为偏向当前线程，失败的话就进行锁的升级，锁升级涉及到偏向锁的撤销，会将偏向锁线程挂起。</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/14717736/where-is-objects-hash-code-stored-if-biased-locking-is-enabled-in-hotspot-jvm\" target=\"_blank\" rel=\"noopener\">偏向锁会将Mark Word设置为当前threadId，那么hashCode存哪里了?</a><br>\n如果处于偏向的的对象调用的hashCode方法就会触发撤销偏向锁</p>\n</blockquote>\n</li>\n<li>\n<p>轻量级锁：线程在获取锁之前，当前线程会在栈帧中创建一个Mark Word的拷贝作为锁记录，官方称为Displaced Mark Word。然后将对象头中替换成锁记录的指针（CAS），如果失败则会自旋10次（在1.6之后是采用自适应锁，这个时间已经不能自己配置了），之后升级为重量级锁。</p>\n<blockquote>\n<p>为什么一定要拷贝到Displaced Mark Word，而不直接就采用一个threadId？一个原因是需要恢复hash和GC分代的信息，一个就是解决重入锁的问题。</p>\n</blockquote>\n</li>\n<li>\n<p>重量级锁：ObjectMonitor有更多的空间来实现线程同步，可以更好像的实现线程同步（挂起和唤醒）。<a href=\"https://www.zhihu.com/question/41930877/answer/136699311\" target=\"_blank\" rel=\"noopener\">轻量级锁为什么要膨胀？</a></p>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a class=\"markdownIt-Anchor\" href=\"#优缺点\"></a> 优缺点</h4>\n<table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁</td>\n<td>只需比较threadId释放是否是当前线程<br>没有CAS的消耗</td>\n<td>当出现锁竞争的时候会有锁撤销的消耗</td>\n<td>单个线程</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>线程一直在用户态，不用挂起。没有线程切换的消耗</td>\n<td>自旋会导致CPU做无用功</td>\n<td>同步代码块执行较快。</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程挂起，不用进行自旋</td>\n<td>用户态到内核态转化，开销大</td>\n<td>同步代码块执行时间较长，锁竞争激烈</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"juc中的锁\"><a class=\"markdownIt-Anchor\" href=\"#juc中的锁\"></a> J.U.C中的锁</h3>\n<p>上面锁的synchronzied是JVM的内置锁，在1.6之前性能比较差，Doug Lea就写个并发框架(java.util.current)，在1.6之后synchronized的性能已经跟Lock查不不多了，但是还少了锁的获取和释放的操作性，不支持超时，只有一个condition等。</p>\n<h4 id=\"aqs\"><a class=\"markdownIt-Anchor\" href=\"#aqs\"></a> AQS</h4>\n<p>AbstractQueueSynchronizer是J.U.C中其他锁或者同步器的基础框架（ReentrantLock,ReentrantReadWriteLock,CountdDownLatch,CyclicBarrier等），这些框架在AQS的基础上进行了扩展，通常是继承AQS然后实现了AQS的几个抽象方法。</p>\n<blockquote>\n<p>我在上面说ObjectMonitor有说到，同步器为了完成同步工作，需要3个东西：</p>\n</blockquote>\n<ol>\n<li>用于同步的状态量</li>\n<li>一个队列或者一个保存等待线程的容器</li>\n<li>线程的挂起和唤醒</li>\n</ol>\n<p>我们看下AQS是怎么围绕这3个部分进行实现的。</p>\n<h5 id=\"1-同步的状态量互斥量\"><a class=\"markdownIt-Anchor\" href=\"#1-同步的状态量互斥量\"></a> 1. 同步的状态量(互斥量)</h5>\n<p>AQS中维护一个volatile 的int 变量state，线程通过cas来获取这个互斥量。AQS提供一下几个方法来对state变量进行操作。</p>\n<ul>\n<li>getState()</li>\n<li>compareAndSetState(int expect, int update)</li>\n<li>setState(int state)</li>\n</ul>\n<p>有了上面的3个方法，同步器就可以实现自旋锁，但是如果想实现公平锁，上面的三个方法或者说单用一个state变量是无法做到了。这个时候就需要一个FIFO的队列来维护这些线程。此外为了实现重入锁，我们还得需要一个变量来存当前持有的锁是什么线程。</p>\n<h5 id=\"2等待线程队列\"><a class=\"markdownIt-Anchor\" href=\"#2等待线程队列\"></a> 2.等待线程队列</h5>\n<p>AQS 用了一个CLH的双向队列，Node的数据结构大概如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">statci final class Node&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    volatile int waitStatus;</span><br><span class=\"line\">    volatile Node prev;</span><br><span class=\"line\">    volatile Node next;</span><br><span class=\"line\">    Node nextWaiter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AQS维护一个头节点和一个尾节点，入队的时候通过CAS加入到未尾节点中。入队后开始开始自旋。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class=\"line\">    boolean failed = true;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        boolean interrupted = false;</span><br><span class=\"line\">        for (;;) &#123;</span><br><span class=\"line\">            final Node p = node.predecessor();</span><br><span class=\"line\">            // 前趋节点是头节点，并且获取到互斥量，说明获取锁成功。</span><br><span class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = null; // help GC</span><br><span class=\"line\">                failed = false;</span><br><span class=\"line\">                return interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 判断是否需要挂起</span><br><span class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        if (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面代码片段可以看出，加入队列的线程节点并不是完全的自旋，shouldParkAfterFailedAcquire方法判断当前线程是否需要挂起。</p>\n<blockquote>\n<p>下面的这个方法表明shouldParkAfterFailedAcquire 会在调用1到2次后会返回true（如果期间节点没有发生改变的话）。也就是自旋锁只自旋了2次就会被挂起。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</span><br><span class=\"line\">        int ws = pred.waitStatus;</span><br><span class=\"line\">        if (ws == Node.SIGNAL)</span><br><span class=\"line\">            /*</span><br><span class=\"line\">             * This node has already set status asking a release</span><br><span class=\"line\">             * to signal it, so it can safely park.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        if (ws &gt; 0) &#123;</span><br><span class=\"line\">            /*</span><br><span class=\"line\">             * Predecessor was cancelled. Skip over predecessors and</span><br><span class=\"line\">             * indicate retry.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                node.prev = pred = pred.prev;</span><br><span class=\"line\">            &#125; while (pred.waitStatus &gt; 0);</span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            /* </span><br><span class=\"line\">             * 进行到这里说明前驱节点的waitStatus 是0 或者PROPAGATE ，利用CAS的设置为SIGNAL，这样下次自旋就会阻塞了，这里不返回true的目的是让当前线程再自旋一次，确保挂起前是无法获取到锁（避免发生刚挂起就被唤醒的情况）。</span><br><span class=\"line\">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class=\"line\">             * need a signal, but don&apos;t park yet.  Caller will need to</span><br><span class=\"line\">             * retry to make sure it cannot acquire before parking.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3线程的挂起和唤醒\"><a class=\"markdownIt-Anchor\" href=\"#3线程的挂起和唤醒\"></a> 3.线程的挂起和唤醒</h5>\n<p>AQS中实现线程的挂起和唤醒是通过LockSupport这个工具，LockSupport的底层实现是调用Unsafe的native方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void unpark(Thread thread) &#123;</span><br><span class=\"line\">    if (thread != null)</span><br><span class=\"line\">        UNSAFE.unpark(thread);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void park(Object blocker) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    setBlocker(t, blocker);</span><br><span class=\"line\">    UNSAFE.park(false, 0L);</span><br><span class=\"line\">    setBlocker(t, null);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"conditionobject\"><a class=\"markdownIt-Anchor\" href=\"#conditionobject\"></a> ConditionObject</h5>\n<p>ConditionObject 是AQS实现类似object类的wait/notify/notifyAll方法的，ConditionObject提供的是aw<br>\nait/awaitNanos(long nanos)/awaitUtil(Date date)/awaitUniterrutibly()/signal()/signalAll()。底层的实现也是各自维护一个队列，Node.nextWaiter。</p>\n<ul>\n<li>对于超时机制也是用LockSupport中的实现，但并不是所有情况下都使用系统的休眠，有个休眠的自旋时间阀值<code>spinForTimeoutThreshold = 1000L</code> ，默认是1000 纳秒，少于这个阀值的都不用休眠，而是直接自旋。</li>\n</ul>\n<h3 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\"></a> 参考文章</h3>\n<ul>\n<li><a href=\"http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html\" target=\"_blank\" rel=\"noopener\">synchronized 与 object’s Monitor</a></li>\n<li><a href=\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer的介绍和原理分析</a></li>\n<li><a href=\"https://blog.csdn.net/chenssy/article/details/65449785\" target=\"_blank\" rel=\"noopener\">J.U.C之AQS：阻塞和唤醒线程</a></li>\n<li><a href=\"https://blog.csdn.net/m_xiaoer/article/details/73274642\" target=\"_blank\" rel=\"noopener\">关于synchronized的Monitor Object机制的研究</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html\" target=\"_blank\" rel=\"noopener\">Intrinsic Locks and Synchronization</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程的实现\"><a class=\"markdownIt-Anchor\" href=\"#线程的实现\"></a> 线程的实现</h2>\n<p>Java 规范里面并没有规定JVM要如何实现线程模型，在HotSpot VM 中使用的是1:1的线程模型，即1个java线程对应一个OS的线程（内核线程），在Thread中又很多native方法，就是调用OS的函数进行用户线程和内核线程的绑定。</p>\n<ul>\n<li>每个线程都又一个内核线程与之绑定，用户线程推出，内核线程也会一起退出。</li>\n<li>内核线程的数量是有限制的</li>\n<li>内核线程调用，上下文切换开销很大。</li>\n</ul>\n<h3 id=\"线程调度\"><a class=\"markdownIt-Anchor\" href=\"#线程调度\"></a> 线程调度</h3>\n<h4 id=\"线程的状态-threadstate枚举\"><a class=\"markdownIt-Anchor\" href=\"#线程的状态-threadstate枚举\"></a> 线程的状态 （Thread.State枚举）</h4>\n<ul>\n<li>NEW :</li>\n<li>RUNNABLE : 对应的就绪和运行态</li>\n<li>BLOCKED : 阻塞状态，处于阻塞状态的线程会不断地请求资源，请求成功后就会进入就绪状态。</li>\n<li>WAITING : 等待状态，当线程调用wait,join,park等函数。等待状态下会释放资源，让出CPU和释放锁。需要其他线程唤醒。</li>\n<li>TIMED_WAITING  有限的等待。</li>\n<li>TERMINATED</li>\n</ul>\n<h3 id=\"线程相关的一些文章\"><a class=\"markdownIt-Anchor\" href=\"#线程相关的一些文章\"></a> 线程相关的一些文章</h3>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/27491155/answer/36847691\" target=\"_blank\" rel=\"noopener\">Java的线程管理器能保证每个线程都有执行的机会么?</a></li>\n<li><a href=\"http://www.hainiubl.com/topics/29\" target=\"_blank\" rel=\"noopener\">wait/notify实现原理</a></li>\n</ul>\n<h2 id=\"锁\"><a class=\"markdownIt-Anchor\" href=\"#锁\"></a> 锁</h2>\n<p>因为多线程的共享数据存在线程安全问题，需要通过一些控制来保证共享数据的读写，JVM层面提供sychronized的锁，而java层面current包下面有许多基于AQS的Lock的实现,在jdk1.6后,synchronized 和 ReentrantLock性能上以及没有太大的差距，ReentrantLock的使用更佳灵活，性能稳定，支持超时机制等，而采用synchronized不需要程序自己控制锁的加锁和释放，不容易出现死锁等问题。</p>\n<h3 id=\"synchronized-的实现原理\"><a class=\"markdownIt-Anchor\" href=\"#synchronized-的实现原理\"></a> synchronized 的实现原理</h3>\n<p>JVM规范规定基于进入和退出monitor对象来控制方法和代码块的同步，也是就是monitorenter和monitorexit两个指令，当程序执行到monitorenter指令时会尝试获取对象的monitor所有权，也就是获取对象的锁。在最开始的JVM实现中是采用重量级锁的实现，线程的切换都涉及到用户态到内核态的切换，比较消化资源，所以在jdk1.6对锁进行优化。</p>\n<h4 id=\"同步原理\"><a class=\"markdownIt-Anchor\" href=\"#同步原理\"></a> 同步原理</h4>\n<blockquote>\n<ul>\n<li>JVM是怎么控制多线程程序的交替访问的？</li>\n</ul>\n</blockquote>\n<p>Java中每个对象都有一个内置锁与之对应，所有需要对该对象进行排他性或者一致性访问时需要获取对象的内置锁（synchronized 中的代码，monitorenter指令）。这个内置锁的信息存在对象的对象头中（一些基本信息，其他的condition，队列等是在native heap中的）。一个对象的Monitor只能被一个线程获取到，其他线程得等待持有的Monitor的线程释放。</p>\n<blockquote>\n<p>在一些官方的注释中说的是ObjectMonitor是一个内联锁对象的封装，就好比JVM层面实现的一个类似JUC框架下的Lock（不是说ObjectMonitor是JUC的Lock实现，说的是他们可能实现思路是一样的）。</p>\n</blockquote>\n<p>做好线程的同步协调，我认为需要这3样东西（ObjectMonitor 和J.U.C的AQS 都是这样的）：</p>\n<ol>\n<li>维护一个竞争的互斥量</li>\n<li>一个队列</li>\n<li>线程的挂起和唤醒</li>\n</ol>\n<blockquote>\n<p>实现同步也可以只用一个互斥量，自旋锁就是这么实现的，但是锁竞争太激烈会导致CPU做无用功。</p>\n</blockquote>\n<p>想继续了解ObjectMonitor的实现可以看这几篇文章：</p>\n<ul>\n<li><a href=\"http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html\" target=\"_blank\" rel=\"noopener\">synchronized 与 object’s Monitor</a></li>\n<li><a href=\"https://www.hollischuang.com/archives/2030\" target=\"_blank\" rel=\"noopener\">Moniter实现原理</a></li>\n</ul>\n<h4 id=\"对象头\"><a class=\"markdownIt-Anchor\" href=\"#对象头\"></a> 对象头</h4>\n<blockquote>\n<ul>\n<li>Object的锁信息是存在在哪里的？</li>\n<li>在获取对象的锁的过程中都用到了对象头的哪些数据？</li>\n</ul>\n</blockquote>\n<p>锁的信息存在java对象头里面。如果对象是数组，这虚拟机会用3个Word(32位虚拟机，32bit)来存对象头，如果对象是非数组类型，则用2个Word来存对象头，其中 有一个word用来存储对象的hashcode和锁信息，32bit，叫Mark word。</p>\n<ul>\n<li>Mark Word 不是一个固定的数据结构，具体的信息分布需要先判断2bit的锁标志位，不同的锁标志位，剩余的30bit可能表示不同的意思。</li>\n<li>32bit的信息是不够存Monitor线程同步（调度）所需要的信息的，所以重量级锁是有另外的native heap存储的，之后再把指针存在Mark word 中。</li>\n</ul>\n<table width=\"500\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td rowspan=\"2\" valign=\"top\" width=\"76\"><strong>锁状态</strong></td>\n<td colspan=\"3\" valign=\"top\" width=\"106\">\n<p align=\"center\">25 bit</p>\n</td>\n<td rowspan=\"2\" valign=\"top\" width=\"85\">\n<p align=\"center\">4bit</p>\n</td>\n<td valign=\"top\" width=\"85\">1bit</td>\n<td valign=\"top\" width=\"78\">2bit</td>\n</tr>\n<tr>\n<td colspan=\"2\" valign=\"top\" width=\"70\">23bit</td>\n<td valign=\"top\" width=\"56\">2bit</td>\n<td valign=\"top\" width=\"120\">是否是偏向锁</td>\n<td valign=\"top\" width=\"100\">锁标志位</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"90\">轻量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向栈中锁记录的指针</td>\n<td valign=\"top\" width=\"78\">00</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">重量级锁</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">指向互斥量（重量级锁）的指针</td>\n<td valign=\"top\" width=\"78\">10</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">GC标记</td>\n<td colspan=\"5\" valign=\"top\" width=\"276\">空</td>\n<td valign=\"top\" width=\"78\">11</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"76\">偏向锁</td>\n<td valign=\"top\" width=\"80\">线程ID</td>\n<td colspan=\"2\" valign=\"top\" width=\"80\">Epoch</td>\n<td valign=\"top\" width=\"120\">对象分代年龄</td>\n<td valign=\"top\" width=\"85\">1</td>\n<td valign=\"top\" width=\"78\">01</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"锁的优化\"><a class=\"markdownIt-Anchor\" href=\"#锁的优化\"></a> 锁的优化</h4>\n<p>在jdk1.6之前synchronized是单纯的重量级锁实现，由于重量级锁，线程获取不到锁就需要挂起等待唤醒，这种切换涉及到了用户态到内核态的转换，开销还是比较大的。在jdk1.6加入了偏向锁、轻量级锁。只有一个线程请求对象锁的时候，启用的是偏向锁，当有第二个线程竞争的时候（应该说是偏向状态出现锁竞争），这个时候会升级为轻量级锁（cas 自旋锁），处于轻量级锁状态下，如果自旋10次（可以配置）还是获取锁失败，则锁升级为重量级锁。</p>\n<ul>\n<li>\n<p>偏向锁 ：在大部分情况下一个同步方法或者一个同步代码块不存在多线程的竞争，这样只需要在对象头和当前线程的栈帧中存一个线程ID，每次获取锁的时候只需要判断一些线程ID释放一致就行了，不用进行CAS的加锁和解锁。如果有第二个线程需要竞争锁，这个时候会通过CAS设置Mark Word中的锁状态位，成功则修改为偏向当前线程，失败的话就进行锁的升级，锁升级涉及到偏向锁的撤销，会将偏向锁线程挂起。</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/14717736/where-is-objects-hash-code-stored-if-biased-locking-is-enabled-in-hotspot-jvm\" target=\"_blank\" rel=\"noopener\">偏向锁会将Mark Word设置为当前threadId，那么hashCode存哪里了?</a><br>\n如果处于偏向的的对象调用的hashCode方法就会触发撤销偏向锁</p>\n</blockquote>\n</li>\n<li>\n<p>轻量级锁：线程在获取锁之前，当前线程会在栈帧中创建一个Mark Word的拷贝作为锁记录，官方称为Displaced Mark Word。然后将对象头中替换成锁记录的指针（CAS），如果失败则会自旋10次（在1.6之后是采用自适应锁，这个时间已经不能自己配置了），之后升级为重量级锁。</p>\n<blockquote>\n<p>为什么一定要拷贝到Displaced Mark Word，而不直接就采用一个threadId？一个原因是需要恢复hash和GC分代的信息，一个就是解决重入锁的问题。</p>\n</blockquote>\n</li>\n<li>\n<p>重量级锁：ObjectMonitor有更多的空间来实现线程同步，可以更好像的实现线程同步（挂起和唤醒）。<a href=\"https://www.zhihu.com/question/41930877/answer/136699311\" target=\"_blank\" rel=\"noopener\">轻量级锁为什么要膨胀？</a></p>\n</li>\n</ul>\n<h4 id=\"优缺点\"><a class=\"markdownIt-Anchor\" href=\"#优缺点\"></a> 优缺点</h4>\n<table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁</td>\n<td>只需比较threadId释放是否是当前线程<br>没有CAS的消耗</td>\n<td>当出现锁竞争的时候会有锁撤销的消耗</td>\n<td>单个线程</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>线程一直在用户态，不用挂起。没有线程切换的消耗</td>\n<td>自旋会导致CPU做无用功</td>\n<td>同步代码块执行较快。</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程挂起，不用进行自旋</td>\n<td>用户态到内核态转化，开销大</td>\n<td>同步代码块执行时间较长，锁竞争激烈</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"juc中的锁\"><a class=\"markdownIt-Anchor\" href=\"#juc中的锁\"></a> J.U.C中的锁</h3>\n<p>上面锁的synchronzied是JVM的内置锁，在1.6之前性能比较差，Doug Lea就写个并发框架(java.util.current)，在1.6之后synchronized的性能已经跟Lock查不不多了，但是还少了锁的获取和释放的操作性，不支持超时，只有一个condition等。</p>\n<h4 id=\"aqs\"><a class=\"markdownIt-Anchor\" href=\"#aqs\"></a> AQS</h4>\n<p>AbstractQueueSynchronizer是J.U.C中其他锁或者同步器的基础框架（ReentrantLock,ReentrantReadWriteLock,CountdDownLatch,CyclicBarrier等），这些框架在AQS的基础上进行了扩展，通常是继承AQS然后实现了AQS的几个抽象方法。</p>\n<blockquote>\n<p>我在上面说ObjectMonitor有说到，同步器为了完成同步工作，需要3个东西：</p>\n</blockquote>\n<ol>\n<li>用于同步的状态量</li>\n<li>一个队列或者一个保存等待线程的容器</li>\n<li>线程的挂起和唤醒</li>\n</ol>\n<p>我们看下AQS是怎么围绕这3个部分进行实现的。</p>\n<h5 id=\"1-同步的状态量互斥量\"><a class=\"markdownIt-Anchor\" href=\"#1-同步的状态量互斥量\"></a> 1. 同步的状态量(互斥量)</h5>\n<p>AQS中维护一个volatile 的int 变量state，线程通过cas来获取这个互斥量。AQS提供一下几个方法来对state变量进行操作。</p>\n<ul>\n<li>getState()</li>\n<li>compareAndSetState(int expect, int update)</li>\n<li>setState(int state)</li>\n</ul>\n<p>有了上面的3个方法，同步器就可以实现自旋锁，但是如果想实现公平锁，上面的三个方法或者说单用一个state变量是无法做到了。这个时候就需要一个FIFO的队列来维护这些线程。此外为了实现重入锁，我们还得需要一个变量来存当前持有的锁是什么线程。</p>\n<h5 id=\"2等待线程队列\"><a class=\"markdownIt-Anchor\" href=\"#2等待线程队列\"></a> 2.等待线程队列</h5>\n<p>AQS 用了一个CLH的双向队列，Node的数据结构大概如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">statci final class Node&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    volatile int waitStatus;</span><br><span class=\"line\">    volatile Node prev;</span><br><span class=\"line\">    volatile Node next;</span><br><span class=\"line\">    Node nextWaiter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AQS维护一个头节点和一个尾节点，入队的时候通过CAS加入到未尾节点中。入队后开始开始自旋。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class=\"line\">    boolean failed = true;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        boolean interrupted = false;</span><br><span class=\"line\">        for (;;) &#123;</span><br><span class=\"line\">            final Node p = node.predecessor();</span><br><span class=\"line\">            // 前趋节点是头节点，并且获取到互斥量，说明获取锁成功。</span><br><span class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                p.next = null; // help GC</span><br><span class=\"line\">                failed = false;</span><br><span class=\"line\">                return interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 判断是否需要挂起</span><br><span class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        if (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面代码片段可以看出，加入队列的线程节点并不是完全的自旋，shouldParkAfterFailedAcquire方法判断当前线程是否需要挂起。</p>\n<blockquote>\n<p>下面的这个方法表明shouldParkAfterFailedAcquire 会在调用1到2次后会返回true（如果期间节点没有发生改变的话）。也就是自旋锁只自旋了2次就会被挂起。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</span><br><span class=\"line\">        int ws = pred.waitStatus;</span><br><span class=\"line\">        if (ws == Node.SIGNAL)</span><br><span class=\"line\">            /*</span><br><span class=\"line\">             * This node has already set status asking a release</span><br><span class=\"line\">             * to signal it, so it can safely park.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        if (ws &gt; 0) &#123;</span><br><span class=\"line\">            /*</span><br><span class=\"line\">             * Predecessor was cancelled. Skip over predecessors and</span><br><span class=\"line\">             * indicate retry.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                node.prev = pred = pred.prev;</span><br><span class=\"line\">            &#125; while (pred.waitStatus &gt; 0);</span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            /* </span><br><span class=\"line\">             * 进行到这里说明前驱节点的waitStatus 是0 或者PROPAGATE ，利用CAS的设置为SIGNAL，这样下次自旋就会阻塞了，这里不返回true的目的是让当前线程再自旋一次，确保挂起前是无法获取到锁（避免发生刚挂起就被唤醒的情况）。</span><br><span class=\"line\">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class=\"line\">             * need a signal, but don&apos;t park yet.  Caller will need to</span><br><span class=\"line\">             * retry to make sure it cannot acquire before parking.</span><br><span class=\"line\">             */</span><br><span class=\"line\">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3线程的挂起和唤醒\"><a class=\"markdownIt-Anchor\" href=\"#3线程的挂起和唤醒\"></a> 3.线程的挂起和唤醒</h5>\n<p>AQS中实现线程的挂起和唤醒是通过LockSupport这个工具，LockSupport的底层实现是调用Unsafe的native方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void unpark(Thread thread) &#123;</span><br><span class=\"line\">    if (thread != null)</span><br><span class=\"line\">        UNSAFE.unpark(thread);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void park(Object blocker) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    setBlocker(t, blocker);</span><br><span class=\"line\">    UNSAFE.park(false, 0L);</span><br><span class=\"line\">    setBlocker(t, null);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"conditionobject\"><a class=\"markdownIt-Anchor\" href=\"#conditionobject\"></a> ConditionObject</h5>\n<p>ConditionObject 是AQS实现类似object类的wait/notify/notifyAll方法的，ConditionObject提供的是aw<br>\nait/awaitNanos(long nanos)/awaitUtil(Date date)/awaitUniterrutibly()/signal()/signalAll()。底层的实现也是各自维护一个队列，Node.nextWaiter。</p>\n<ul>\n<li>对于超时机制也是用LockSupport中的实现，但并不是所有情况下都使用系统的休眠，有个休眠的自旋时间阀值<code>spinForTimeoutThreshold = 1000L</code> ，默认是1000 纳秒，少于这个阀值的都不用休眠，而是直接自旋。</li>\n</ul>\n<h3 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\"></a> 参考文章</h3>\n<ul>\n<li><a href=\"http://moonfacex.github.io/blog/java/2016/03/31/synchronized_and_monitor.html\" target=\"_blank\" rel=\"noopener\">synchronized 与 object’s Monitor</a></li>\n<li><a href=\"http://ifeve.com/introduce-abstractqueuedsynchronizer/\" target=\"_blank\" rel=\"noopener\">AbstractQueuedSynchronizer的介绍和原理分析</a></li>\n<li><a href=\"https://blog.csdn.net/chenssy/article/details/65449785\" target=\"_blank\" rel=\"noopener\">J.U.C之AQS：阻塞和唤醒线程</a></li>\n<li><a href=\"https://blog.csdn.net/m_xiaoer/article/details/73274642\" target=\"_blank\" rel=\"noopener\">关于synchronized的Monitor Object机制的研究</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html\" target=\"_blank\" rel=\"noopener\">Intrinsic Locks and Synchronization</a></li>\n</ul>\n"},{"title":"Java根据指定的country和lang格式化时间","author":"Jiacan Liao","date":"2017-10-16T13:18:00.000Z","_content":"> 服务端或者客户端在做一些多语言的时候可能会涉及到时间戳的格式化，不同的语言或者不同的国家的时间的表达格式可能不同。\n\n```\npublic  String formatDate(Date date,String lang,String country){\n    Locale locale = new Locale(lang,country,\"\");\n    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.MEDIUM,locale);\n    return dateFormat.format(date);\n}\n```","source":"_posts/Java根据指定的country和lang格式化时间.md","raw":"title: Java根据指定的country和lang格式化时间\nauthor: Jiacan Liao\ntags:\n  - java\n  - 业务开发\ncategories: []\ndate: 2017-10-16 21:18:00\n---\n> 服务端或者客户端在做一些多语言的时候可能会涉及到时间戳的格式化，不同的语言或者不同的国家的时间的表达格式可能不同。\n\n```\npublic  String formatDate(Date date,String lang,String country){\n    Locale locale = new Locale(lang,country,\"\");\n    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.MEDIUM,locale);\n    return dateFormat.format(date);\n}\n```","slug":"Java根据指定的country和lang格式化时间","published":1,"updated":"2018-02-08T06:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8br000ckg88baz1mxhh","content":"<blockquote>\n<p>服务端或者客户端在做一些多语言的时候可能会涉及到时间戳的格式化，不同的语言或者不同的国家的时间的表达格式可能不同。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  String formatDate(Date date,String lang,String country)&#123;</span><br><span class=\"line\">    Locale locale = new Locale(lang,country,&quot;&quot;);</span><br><span class=\"line\">    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.MEDIUM,locale);</span><br><span class=\"line\">    return dateFormat.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>服务端或者客户端在做一些多语言的时候可能会涉及到时间戳的格式化，不同的语言或者不同的国家的时间的表达格式可能不同。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public  String formatDate(Date date,String lang,String country)&#123;</span><br><span class=\"line\">    Locale locale = new Locale(lang,country,&quot;&quot;);</span><br><span class=\"line\">    DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.MEDIUM,locale);</span><br><span class=\"line\">    return dateFormat.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux shell命令:cut命令","date":"2017-02-23T08:45:44.000Z","_content":"\n#### 简介\n将一段数据经过分析，取出我们想要的\n\n```\n     cut -- cut out selected portions of each line of a file SYNOPSIS\n     cut -b list [-n] [file ...]\n     cut -c list [file ...]\n     cut -f list [-d delim] [-s] [file ...]\n```\n\n- -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。\n- -c ：以字符为单位进行分割。\n- -d ：自定义分隔符，默认为制表符。\n- -f ：与-d一起使用，指定显示哪个区域。\n- -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除。\n\n\n```\n who | cut -d 3-5 #截取 3-5列的内容\n```\n```\n who | cut -c 3-5 #截取 3-5列的内容 中文字符\n```\n\n```\n cat /etc/passwd|head -n 5|cut -d : -f -2 # 设置分隔符为：\n```","source":"_posts/Linux Shell--cut命令.md","raw":"---\ntitle: Linux shell命令:cut命令\ndate: 2017-02-23 16:45:44\ncategories: \n    - linux\ntags: \n    - linux\n    - shell\n---\n\n#### 简介\n将一段数据经过分析，取出我们想要的\n\n```\n     cut -- cut out selected portions of each line of a file SYNOPSIS\n     cut -b list [-n] [file ...]\n     cut -c list [file ...]\n     cut -f list [-d delim] [-s] [file ...]\n```\n\n- -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。\n- -c ：以字符为单位进行分割。\n- -d ：自定义分隔符，默认为制表符。\n- -f ：与-d一起使用，指定显示哪个区域。\n- -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除。\n\n\n```\n who | cut -d 3-5 #截取 3-5列的内容\n```\n```\n who | cut -c 3-5 #截取 3-5列的内容 中文字符\n```\n\n```\n cat /etc/passwd|head -n 5|cut -d : -f -2 # 设置分隔符为：\n```","slug":"Linux Shell--cut命令","published":1,"updated":"2018-02-08T06:58:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bt000gkg88hwnp4lch","content":"<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h4>\n<p>将一段数据经过分析，取出我们想要的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -- cut out selected portions of each line of a file SYNOPSIS</span><br><span class=\"line\">cut -b list [-n] [file ...]</span><br><span class=\"line\">cut -c list [file ...]</span><br><span class=\"line\">cut -f list [-d delim] [-s] [file ...]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>\n<li>-c ：以字符为单位进行分割。</li>\n<li>-d ：自定义分隔符，默认为制表符。</li>\n<li>-f ：与-d一起使用，指定显示哪个区域。</li>\n<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who | cut -d 3-5 #截取 3-5列的内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who | cut -c 3-5 #截取 3-5列的内容 中文字符</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd|head -n 5|cut -d : -f -2 # 设置分隔符为：</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h4>\n<p>将一段数据经过分析，取出我们想要的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -- cut out selected portions of each line of a file SYNOPSIS</span><br><span class=\"line\">cut -b list [-n] [file ...]</span><br><span class=\"line\">cut -c list [file ...]</span><br><span class=\"line\">cut -f list [-d delim] [-s] [file ...]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>\n<li>-c ：以字符为单位进行分割。</li>\n<li>-d ：自定义分隔符，默认为制表符。</li>\n<li>-f ：与-d一起使用，指定显示哪个区域。</li>\n<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who | cut -d 3-5 #截取 3-5列的内容</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">who | cut -c 3-5 #截取 3-5列的内容 中文字符</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd|head -n 5|cut -d : -f -2 # 设置分隔符为：</span><br></pre></td></tr></table></figure>"},{"title":"Source Tree 配置支持gerrit review","author":"Jiacan Liao","date":"2018-02-07T07:34:45.000Z","_content":"> source tree 可以支持自定义菜单，我们自定义一个菜单，来实现gerrit push review操作\n\n1.先创建一个脚本，这里我叫 git_push_gerrit.sh\n```\n#!/bin/bash\n# Push for gerrit review\n# Created by Liaojiacan on 6.2.2017.\n# Copyright (c) 2018 liaojiacan. All rights reserved.\nbranch=$(git symbolic-ref --short -q HEAD)\ngit push origin HEAD:refs/for/$branch\n```\n2.在SourceTree创建一个自定义操作\n\n![upload successful](/images/pasted-0.png)\n","source":"_posts/Source-Tree-配置支持gerrit-review.md","raw":"title: Source Tree 配置支持gerrit review\nauthor: Jiacan Liao\ndate: 2018-02-07 15:34:45\ntags:\n---\n> source tree 可以支持自定义菜单，我们自定义一个菜单，来实现gerrit push review操作\n\n1.先创建一个脚本，这里我叫 git_push_gerrit.sh\n```\n#!/bin/bash\n# Push for gerrit review\n# Created by Liaojiacan on 6.2.2017.\n# Copyright (c) 2018 liaojiacan. All rights reserved.\nbranch=$(git symbolic-ref --short -q HEAD)\ngit push origin HEAD:refs/for/$branch\n```\n2.在SourceTree创建一个自定义操作\n\n![upload successful](/images/pasted-0.png)\n","slug":"Source-Tree-配置支持gerrit-review","published":1,"updated":"2018-02-08T06:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bv000ikg884xzty81n","content":"<blockquote>\n<p>source tree 可以支持自定义菜单，我们自定义一个菜单，来实现gerrit push review操作</p>\n</blockquote>\n<p>1.先创建一个脚本，这里我叫 git_push_gerrit.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Push for gerrit review</span><br><span class=\"line\"># Created by Liaojiacan on 6.2.2017.</span><br><span class=\"line\"># Copyright (c) 2018 liaojiacan. All rights reserved.</span><br><span class=\"line\">branch=$(git symbolic-ref --short -q HEAD)</span><br><span class=\"line\">git push origin HEAD:refs/for/$branch</span><br></pre></td></tr></table></figure>\n<p>2.在SourceTree创建一个自定义操作</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>source tree 可以支持自定义菜单，我们自定义一个菜单，来实现gerrit push review操作</p>\n</blockquote>\n<p>1.先创建一个脚本，这里我叫 git_push_gerrit.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Push for gerrit review</span><br><span class=\"line\"># Created by Liaojiacan on 6.2.2017.</span><br><span class=\"line\"># Copyright (c) 2018 liaojiacan. All rights reserved.</span><br><span class=\"line\">branch=$(git symbolic-ref --short -q HEAD)</span><br><span class=\"line\">git push origin HEAD:refs/for/$branch</span><br></pre></td></tr></table></figure>\n<p>2.在SourceTree创建一个自定义操作</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n"},{"title":"一种适合后端团队代码的GIT分支管理办法","author":"Jiacan Liao","date":"2019-05-21T08:45:44.000Z","_content":"\n&emsp;&emsp;每个公司甚至公司中的不同团队对代码的分支管理都是有所差别，网上也有很多人分享了他们的分支管理规范，相信很多有一种感觉就是采用了他们的方法然后真正实践起来总是有些水土不服，我个人认为分支的管理需要结合团队规模、应用类型、发布流程等实际的情况来制定规范。下面我将介绍一种适用于后端开发团队且做toC产品业务后台的代码分支管理办法。\n\n\n\n### 不同业务代码的管理需求差异\n\n|          | 业务后台                            | 基础工具SDK/中间件            | 独立部署企业软件                 |\n| -------- | ----------------------------------- | ----------------------------- | -------------------------------- |\n| 多版本   | 不需要                              | 需要                          | 需要                             |\n| 迭代频率 | 1-2周                               | 少更新                        | 少更新                           |\n| 更新方式 | 灰度更新                            | 更新SDK版本号                 | 补丁包更新，不同版本不同的补丁包 |\n| 维护版本 | 最近的2个版本，主要是发布失败会滚用 | 每个release版本都需要单独维护 | 每个客户的版本都要单独维护       |\n\n从上面的对比结果看，在做to C 产品的业务后台的，相对于开源软件，企业软件，中间件等对于版本控制的生命周期没有那么长，不需要对每个release版本进行长时间的维护跟踪，我们的服务更新永远只有一条线，因为我们的服务面向的研发只有自己的团队，就算出现版本兼容，在随后的几个版本也能快速升级上来。需要做好版本控制的仅仅在于最近上线的几个版本中。\n\n\n\n###  一种适合业务后台开发的GIT分支管理模型\n\n![](https://raw.githubusercontent.com/liaojiacan/assets/master/imgGit%20%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%20(6).png)\n\n1.  `develop`： 开发分支，平常开发的代码都提交到这里，为了简化，这里可以不用根据版本号进行细化分支。\n2.  `feature/xxx`: 特性分支，这个目录下的分支，用于开发一些新特性，或者说是最近不需要上线的功能。\n3.  `stage`： 测试分支，这个分支代表测试环境的代码，测试环境的镜像/程序必须通过该分支来构建，保证测试结果与代码的一致性。\n4.  `master`：生产分支，这个分支代表生产环境的代码，生产环境的镜像/程序必须通过该分支来构建，部署后打tag确定release版本，对应我们的场景(业务后台)，我们只需要维护最近的2个release版本，一般情况下只能回滚最近的版本。\n5. `bugfix-xx`: 补丁分支，这个是一个临时分支，从待修复版本的起点开分支，每个分支对应一个补丁程序，在本地验证后，需要把补丁合并到stage进行测试验证，验证通过后再将补丁合并到master进行修复，同样也需要把补丁打到develop。\n\n### 工作中常见的场景\n\n1. **开发周期中，所有的功能在当前周期都能完成，需求评审确认通过且开发任务符合预期**：\n\n&emsp;&emsp;时间线：D1→D2→D3→D4→S3→M2 。因为经过评估在下一个发布时间前开发人员能够将D1到D4的4个功能完成开发，所以在次期间我们只需要保证这个分支的功能能正常演进即可，尽量不要引进太多的分支。\n\n\n\n2. **开发周期中，所有功能在当前周期完成，需求评审确认通过，少部分功能上线时间待定，任务进度符合预期**：\n\n&emsp;&emsp;这个时候可能存在2条线，大部分人参与当前版本的功能开发（develop分支的演进），少部分人进行未来版本上线的需求开发（F1，F2，F3）。F3→S2 这个合并尽量等到需求拍定上线版本后合并到stage给测试人员测试。\n\n\n\n3. **线上BUG的修复**：\n\n&emsp;&emsp;确认BUG后，如果是测试人员反馈回来的一般会是在JIRA 上提单，我们可以根据jira的issue Id，在master 上 创建一个bugfix-jira-xx，接下来在这个分支上完成补丁的开发（B1→B2），之后合并补丁到stage分支进行测试环境的部署（B2→S4），等待测试人员的验证，验证完成后将补丁合并到master和develop分支（B2→M3，B2→D5），并打一个小版本号的tag。\n\n\n\n4. **有个新功能，老板想立马上线，但是发版的时间还没到**：\n\n&emsp;&emsp;这种情况，把这个功能当成一个超前的feature处理，我们上面说的feature是一个未来版本的功能，可以走未来版本的测试上线流程，这里的feature 是一个超前的功能，我们需要走类似bugfix的流程，进行一个快速的开发上线。\n\n\n\n> 如果你们有遇到比较棘手的分支管理问题，欢迎留言交流。","source":"_posts/一种适合后端代码的GIT分支管理办法.md","raw":"---\n\ntitle:  一种适合后端团队代码的GIT分支管理办法\nauthor: Jiacan Liao\n\ndate:  2019-05-21 16:45:44\n\ntags:\n\n  - 开发规范\n  - 代码管理\n  - GIT\n\ncategories:\n\n  - 开发规范\n---\n\n&emsp;&emsp;每个公司甚至公司中的不同团队对代码的分支管理都是有所差别，网上也有很多人分享了他们的分支管理规范，相信很多有一种感觉就是采用了他们的方法然后真正实践起来总是有些水土不服，我个人认为分支的管理需要结合团队规模、应用类型、发布流程等实际的情况来制定规范。下面我将介绍一种适用于后端开发团队且做toC产品业务后台的代码分支管理办法。\n\n\n\n### 不同业务代码的管理需求差异\n\n|          | 业务后台                            | 基础工具SDK/中间件            | 独立部署企业软件                 |\n| -------- | ----------------------------------- | ----------------------------- | -------------------------------- |\n| 多版本   | 不需要                              | 需要                          | 需要                             |\n| 迭代频率 | 1-2周                               | 少更新                        | 少更新                           |\n| 更新方式 | 灰度更新                            | 更新SDK版本号                 | 补丁包更新，不同版本不同的补丁包 |\n| 维护版本 | 最近的2个版本，主要是发布失败会滚用 | 每个release版本都需要单独维护 | 每个客户的版本都要单独维护       |\n\n从上面的对比结果看，在做to C 产品的业务后台的，相对于开源软件，企业软件，中间件等对于版本控制的生命周期没有那么长，不需要对每个release版本进行长时间的维护跟踪，我们的服务更新永远只有一条线，因为我们的服务面向的研发只有自己的团队，就算出现版本兼容，在随后的几个版本也能快速升级上来。需要做好版本控制的仅仅在于最近上线的几个版本中。\n\n\n\n###  一种适合业务后台开发的GIT分支管理模型\n\n![](https://raw.githubusercontent.com/liaojiacan/assets/master/imgGit%20%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%20(6).png)\n\n1.  `develop`： 开发分支，平常开发的代码都提交到这里，为了简化，这里可以不用根据版本号进行细化分支。\n2.  `feature/xxx`: 特性分支，这个目录下的分支，用于开发一些新特性，或者说是最近不需要上线的功能。\n3.  `stage`： 测试分支，这个分支代表测试环境的代码，测试环境的镜像/程序必须通过该分支来构建，保证测试结果与代码的一致性。\n4.  `master`：生产分支，这个分支代表生产环境的代码，生产环境的镜像/程序必须通过该分支来构建，部署后打tag确定release版本，对应我们的场景(业务后台)，我们只需要维护最近的2个release版本，一般情况下只能回滚最近的版本。\n5. `bugfix-xx`: 补丁分支，这个是一个临时分支，从待修复版本的起点开分支，每个分支对应一个补丁程序，在本地验证后，需要把补丁合并到stage进行测试验证，验证通过后再将补丁合并到master进行修复，同样也需要把补丁打到develop。\n\n### 工作中常见的场景\n\n1. **开发周期中，所有的功能在当前周期都能完成，需求评审确认通过且开发任务符合预期**：\n\n&emsp;&emsp;时间线：D1→D2→D3→D4→S3→M2 。因为经过评估在下一个发布时间前开发人员能够将D1到D4的4个功能完成开发，所以在次期间我们只需要保证这个分支的功能能正常演进即可，尽量不要引进太多的分支。\n\n\n\n2. **开发周期中，所有功能在当前周期完成，需求评审确认通过，少部分功能上线时间待定，任务进度符合预期**：\n\n&emsp;&emsp;这个时候可能存在2条线，大部分人参与当前版本的功能开发（develop分支的演进），少部分人进行未来版本上线的需求开发（F1，F2，F3）。F3→S2 这个合并尽量等到需求拍定上线版本后合并到stage给测试人员测试。\n\n\n\n3. **线上BUG的修复**：\n\n&emsp;&emsp;确认BUG后，如果是测试人员反馈回来的一般会是在JIRA 上提单，我们可以根据jira的issue Id，在master 上 创建一个bugfix-jira-xx，接下来在这个分支上完成补丁的开发（B1→B2），之后合并补丁到stage分支进行测试环境的部署（B2→S4），等待测试人员的验证，验证完成后将补丁合并到master和develop分支（B2→M3，B2→D5），并打一个小版本号的tag。\n\n\n\n4. **有个新功能，老板想立马上线，但是发版的时间还没到**：\n\n&emsp;&emsp;这种情况，把这个功能当成一个超前的feature处理，我们上面说的feature是一个未来版本的功能，可以走未来版本的测试上线流程，这里的feature 是一个超前的功能，我们需要走类似bugfix的流程，进行一个快速的开发上线。\n\n\n\n> 如果你们有遇到比较棘手的分支管理问题，欢迎留言交流。","slug":"一种适合后端代码的GIT分支管理办法","published":1,"updated":"2019-05-21T14:02:52.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8by000nkg88wxo27km9","content":"<p>  每个公司甚至公司中的不同团队对代码的分支管理都是有所差别，网上也有很多人分享了他们的分支管理规范，相信很多有一种感觉就是采用了他们的方法然后真正实践起来总是有些水土不服，我个人认为分支的管理需要结合团队规模、应用类型、发布流程等实际的情况来制定规范。下面我将介绍一种适用于后端开发团队且做toC产品业务后台的代码分支管理办法。</p>\n<h3 id=\"不同业务代码的管理需求差异\"><a class=\"markdownIt-Anchor\" href=\"#不同业务代码的管理需求差异\"></a> 不同业务代码的管理需求差异</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>业务后台</th>\n<th>基础工具SDK/中间件</th>\n<th>独立部署企业软件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多版本</td>\n<td>不需要</td>\n<td>需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>迭代频率</td>\n<td>1-2周</td>\n<td>少更新</td>\n<td>少更新</td>\n</tr>\n<tr>\n<td>更新方式</td>\n<td>灰度更新</td>\n<td>更新SDK版本号</td>\n<td>补丁包更新，不同版本不同的补丁包</td>\n</tr>\n<tr>\n<td>维护版本</td>\n<td>最近的2个版本，主要是发布失败会滚用</td>\n<td>每个release版本都需要单独维护</td>\n<td>每个客户的版本都要单独维护</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的对比结果看，在做to C 产品的业务后台的，相对于开源软件，企业软件，中间件等对于版本控制的生命周期没有那么长，不需要对每个release版本进行长时间的维护跟踪，我们的服务更新永远只有一条线，因为我们的服务面向的研发只有自己的团队，就算出现版本兼容，在随后的几个版本也能快速升级上来。需要做好版本控制的仅仅在于最近上线的几个版本中。</p>\n<h3 id=\"一种适合业务后台开发的git分支管理模型\"><a class=\"markdownIt-Anchor\" href=\"#一种适合业务后台开发的git分支管理模型\"></a> 一种适合业务后台开发的GIT分支管理模型</h3>\n<p><img src=\"https://raw.githubusercontent.com/liaojiacan/assets/master/imgGit%20%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%20(6).png\" alt></p>\n<ol>\n<li><code>develop</code>： 开发分支，平常开发的代码都提交到这里，为了简化，这里可以不用根据版本号进行细化分支。</li>\n<li><code>feature/xxx</code>: 特性分支，这个目录下的分支，用于开发一些新特性，或者说是最近不需要上线的功能。</li>\n<li><code>stage</code>： 测试分支，这个分支代表测试环境的代码，测试环境的镜像/程序必须通过该分支来构建，保证测试结果与代码的一致性。</li>\n<li><code>master</code>：生产分支，这个分支代表生产环境的代码，生产环境的镜像/程序必须通过该分支来构建，部署后打tag确定release版本，对应我们的场景(业务后台)，我们只需要维护最近的2个release版本，一般情况下只能回滚最近的版本。</li>\n<li><code>bugfix-xx</code>: 补丁分支，这个是一个临时分支，从待修复版本的起点开分支，每个分支对应一个补丁程序，在本地验证后，需要把补丁合并到stage进行测试验证，验证通过后再将补丁合并到master进行修复，同样也需要把补丁打到develop。</li>\n</ol>\n<h3 id=\"工作中常见的场景\"><a class=\"markdownIt-Anchor\" href=\"#工作中常见的场景\"></a> 工作中常见的场景</h3>\n<ol>\n<li><strong>开发周期中，所有的功能在当前周期都能完成，需求评审确认通过且开发任务符合预期</strong>：</li>\n</ol>\n<p>  时间线：D1→D2→D3→D4→S3→M2 。因为经过评估在下一个发布时间前开发人员能够将D1到D4的4个功能完成开发，所以在次期间我们只需要保证这个分支的功能能正常演进即可，尽量不要引进太多的分支。</p>\n<ol start=\"2\">\n<li><strong>开发周期中，所有功能在当前周期完成，需求评审确认通过，少部分功能上线时间待定，任务进度符合预期</strong>：</li>\n</ol>\n<p>  这个时候可能存在2条线，大部分人参与当前版本的功能开发（develop分支的演进），少部分人进行未来版本上线的需求开发（F1，F2，F3）。F3→S2 这个合并尽量等到需求拍定上线版本后合并到stage给测试人员测试。</p>\n<ol start=\"3\">\n<li><strong>线上BUG的修复</strong>：</li>\n</ol>\n<p>  确认BUG后，如果是测试人员反馈回来的一般会是在JIRA 上提单，我们可以根据jira的issue Id，在master 上 创建一个bugfix-jira-xx，接下来在这个分支上完成补丁的开发（B1→B2），之后合并补丁到stage分支进行测试环境的部署（B2→S4），等待测试人员的验证，验证完成后将补丁合并到master和develop分支（B2→M3，B2→D5），并打一个小版本号的tag。</p>\n<ol start=\"4\">\n<li><strong>有个新功能，老板想立马上线，但是发版的时间还没到</strong>：</li>\n</ol>\n<p>  这种情况，把这个功能当成一个超前的feature处理，我们上面说的feature是一个未来版本的功能，可以走未来版本的测试上线流程，这里的feature 是一个超前的功能，我们需要走类似bugfix的流程，进行一个快速的开发上线。</p>\n<blockquote>\n<p>如果你们有遇到比较棘手的分支管理问题，欢迎留言交流。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>  每个公司甚至公司中的不同团队对代码的分支管理都是有所差别，网上也有很多人分享了他们的分支管理规范，相信很多有一种感觉就是采用了他们的方法然后真正实践起来总是有些水土不服，我个人认为分支的管理需要结合团队规模、应用类型、发布流程等实际的情况来制定规范。下面我将介绍一种适用于后端开发团队且做toC产品业务后台的代码分支管理办法。</p>\n<h3 id=\"不同业务代码的管理需求差异\"><a class=\"markdownIt-Anchor\" href=\"#不同业务代码的管理需求差异\"></a> 不同业务代码的管理需求差异</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>业务后台</th>\n<th>基础工具SDK/中间件</th>\n<th>独立部署企业软件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多版本</td>\n<td>不需要</td>\n<td>需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>迭代频率</td>\n<td>1-2周</td>\n<td>少更新</td>\n<td>少更新</td>\n</tr>\n<tr>\n<td>更新方式</td>\n<td>灰度更新</td>\n<td>更新SDK版本号</td>\n<td>补丁包更新，不同版本不同的补丁包</td>\n</tr>\n<tr>\n<td>维护版本</td>\n<td>最近的2个版本，主要是发布失败会滚用</td>\n<td>每个release版本都需要单独维护</td>\n<td>每个客户的版本都要单独维护</td>\n</tr>\n</tbody>\n</table>\n<p>从上面的对比结果看，在做to C 产品的业务后台的，相对于开源软件，企业软件，中间件等对于版本控制的生命周期没有那么长，不需要对每个release版本进行长时间的维护跟踪，我们的服务更新永远只有一条线，因为我们的服务面向的研发只有自己的团队，就算出现版本兼容，在随后的几个版本也能快速升级上来。需要做好版本控制的仅仅在于最近上线的几个版本中。</p>\n<h3 id=\"一种适合业务后台开发的git分支管理模型\"><a class=\"markdownIt-Anchor\" href=\"#一种适合业务后台开发的git分支管理模型\"></a> 一种适合业务后台开发的GIT分支管理模型</h3>\n<p><img src=\"https://raw.githubusercontent.com/liaojiacan/assets/master/imgGit%20%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%20(6).png\" alt></p>\n<ol>\n<li><code>develop</code>： 开发分支，平常开发的代码都提交到这里，为了简化，这里可以不用根据版本号进行细化分支。</li>\n<li><code>feature/xxx</code>: 特性分支，这个目录下的分支，用于开发一些新特性，或者说是最近不需要上线的功能。</li>\n<li><code>stage</code>： 测试分支，这个分支代表测试环境的代码，测试环境的镜像/程序必须通过该分支来构建，保证测试结果与代码的一致性。</li>\n<li><code>master</code>：生产分支，这个分支代表生产环境的代码，生产环境的镜像/程序必须通过该分支来构建，部署后打tag确定release版本，对应我们的场景(业务后台)，我们只需要维护最近的2个release版本，一般情况下只能回滚最近的版本。</li>\n<li><code>bugfix-xx</code>: 补丁分支，这个是一个临时分支，从待修复版本的起点开分支，每个分支对应一个补丁程序，在本地验证后，需要把补丁合并到stage进行测试验证，验证通过后再将补丁合并到master进行修复，同样也需要把补丁打到develop。</li>\n</ol>\n<h3 id=\"工作中常见的场景\"><a class=\"markdownIt-Anchor\" href=\"#工作中常见的场景\"></a> 工作中常见的场景</h3>\n<ol>\n<li><strong>开发周期中，所有的功能在当前周期都能完成，需求评审确认通过且开发任务符合预期</strong>：</li>\n</ol>\n<p>  时间线：D1→D2→D3→D4→S3→M2 。因为经过评估在下一个发布时间前开发人员能够将D1到D4的4个功能完成开发，所以在次期间我们只需要保证这个分支的功能能正常演进即可，尽量不要引进太多的分支。</p>\n<ol start=\"2\">\n<li><strong>开发周期中，所有功能在当前周期完成，需求评审确认通过，少部分功能上线时间待定，任务进度符合预期</strong>：</li>\n</ol>\n<p>  这个时候可能存在2条线，大部分人参与当前版本的功能开发（develop分支的演进），少部分人进行未来版本上线的需求开发（F1，F2，F3）。F3→S2 这个合并尽量等到需求拍定上线版本后合并到stage给测试人员测试。</p>\n<ol start=\"3\">\n<li><strong>线上BUG的修复</strong>：</li>\n</ol>\n<p>  确认BUG后，如果是测试人员反馈回来的一般会是在JIRA 上提单，我们可以根据jira的issue Id，在master 上 创建一个bugfix-jira-xx，接下来在这个分支上完成补丁的开发（B1→B2），之后合并补丁到stage分支进行测试环境的部署（B2→S4），等待测试人员的验证，验证完成后将补丁合并到master和develop分支（B2→M3，B2→D5），并打一个小版本号的tag。</p>\n<ol start=\"4\">\n<li><strong>有个新功能，老板想立马上线，但是发版的时间还没到</strong>：</li>\n</ol>\n<p>  这种情况，把这个功能当成一个超前的feature处理，我们上面说的feature是一个未来版本的功能，可以走未来版本的测试上线流程，这里的feature 是一个超前的功能，我们需要走类似bugfix的流程，进行一个快速的开发上线。</p>\n<blockquote>\n<p>如果你们有遇到比较棘手的分支管理问题，欢迎留言交流。</p>\n</blockquote>\n"},{"title":"javaagent 的使用","author":"Jiacan Liao","date":"2017-10-10T03:40:00.000Z","_content":"\n>  javaagent 是类似一个JVM的插件，利用JVM提供的Instrumentation API实现获取或者修改加载到JVM中的类字节码。\n\n编写一个javagent的jar的方式如下：\n\n1.实现一个ClassFileTransformer\n\n```\npublic class SimpleTransformer implements ClassFileTransformer {\n\n\n\t@Override\n\tpublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\t\tSystem.out.println(className);\n\t\tSystem.out.println(protectionDomain.toString());\n\t\treturn new byte[0];\n\t}\n}\n```\n\n2.实现一个Premain-Class\n\n```\n\npublic class Main {\n\tpublic static void premain(String agentOps, Instrumentation inst) {\n\t\tinst.addTransformer(new SimpleTransformer());\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"This is a javaagent!\");\n\t}\n}\n\n```\n\n3.MANIFEST.MF配置\n\n```\nManifest-Version: 1.0\nPremain-Class: com.github.liaojiacan.Main\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\nCan-Set-Native-Method-Prefix: true\n```\n\n4.运行命令\n\n```\njava -javaagent:agent.jar -jar app.jar\n```\n\n代码和assembly的打包配置可以参考，[github](https://github.com/liaojiacan/code-snippets/tree/master/javaagent)","source":"_posts/javaagent-的使用.md","raw":"title: javaagent 的使用\nauthor: Jiacan Liao\ntags:\n  - java\n  - java逆向\ncategories:\n  - 逆向\ndate: 2017-10-10 11:40:00\n---\n\n>  javaagent 是类似一个JVM的插件，利用JVM提供的Instrumentation API实现获取或者修改加载到JVM中的类字节码。\n\n编写一个javagent的jar的方式如下：\n\n1.实现一个ClassFileTransformer\n\n```\npublic class SimpleTransformer implements ClassFileTransformer {\n\n\n\t@Override\n\tpublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\t\tSystem.out.println(className);\n\t\tSystem.out.println(protectionDomain.toString());\n\t\treturn new byte[0];\n\t}\n}\n```\n\n2.实现一个Premain-Class\n\n```\n\npublic class Main {\n\tpublic static void premain(String agentOps, Instrumentation inst) {\n\t\tinst.addTransformer(new SimpleTransformer());\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"This is a javaagent!\");\n\t}\n}\n\n```\n\n3.MANIFEST.MF配置\n\n```\nManifest-Version: 1.0\nPremain-Class: com.github.liaojiacan.Main\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\nCan-Set-Native-Method-Prefix: true\n```\n\n4.运行命令\n\n```\njava -javaagent:agent.jar -jar app.jar\n```\n\n代码和assembly的打包配置可以参考，[github](https://github.com/liaojiacan/code-snippets/tree/master/javaagent)","slug":"javaagent-的使用","published":1,"updated":"2018-02-08T06:58:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8bz000pkg88b5nzhzj8","content":"<blockquote>\n<p>javaagent 是类似一个JVM的插件，利用JVM提供的Instrumentation API实现获取或者修改加载到JVM中的类字节码。</p>\n</blockquote>\n<p>编写一个javagent的jar的方式如下：</p>\n<p>1.实现一个ClassFileTransformer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SimpleTransformer implements ClassFileTransformer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class=\"line\">\t\tSystem.out.println(className);</span><br><span class=\"line\">\t\tSystem.out.println(protectionDomain.toString());</span><br><span class=\"line\">\t\treturn new byte[0];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.实现一个Premain-Class</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tpublic static void premain(String agentOps, Instrumentation inst) &#123;</span><br><span class=\"line\">\t\tinst.addTransformer(new SimpleTransformer());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;This is a javaagent!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.MANIFEST.MF配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: com.github.liaojiacan.Main</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\">Can-Set-Native-Method-Prefix: true</span><br></pre></td></tr></table></figure>\n<p>4.运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar app.jar</span><br></pre></td></tr></table></figure>\n<p>代码和assembly的打包配置可以参考，<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/javaagent\" target=\"_blank\" rel=\"noopener\">github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>javaagent 是类似一个JVM的插件，利用JVM提供的Instrumentation API实现获取或者修改加载到JVM中的类字节码。</p>\n</blockquote>\n<p>编写一个javagent的jar的方式如下：</p>\n<p>1.实现一个ClassFileTransformer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SimpleTransformer implements ClassFileTransformer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic byte[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException &#123;</span><br><span class=\"line\">\t\tSystem.out.println(className);</span><br><span class=\"line\">\t\tSystem.out.println(protectionDomain.toString());</span><br><span class=\"line\">\t\treturn new byte[0];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.实现一个Premain-Class</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\tpublic static void premain(String agentOps, Instrumentation inst) &#123;</span><br><span class=\"line\">\t\tinst.addTransformer(new SimpleTransformer());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;This is a javaagent!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.MANIFEST.MF配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: com.github.liaojiacan.Main</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\">Can-Set-Native-Method-Prefix: true</span><br></pre></td></tr></table></figure>\n<p>4.运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar app.jar</span><br></pre></td></tr></table></figure>\n<p>代码和assembly的打包配置可以参考，<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/javaagent\" target=\"_blank\" rel=\"noopener\">github</a></p>\n"},{"title":"proto变量类型与java类型对照表","author":"Jiacan Liao","date":"2017-10-11T02:53:00.000Z","_content":"\nproto type | java type\n---|---\ndouble | double\nfloat | float\nint32 | int\nint64 | long\nuint32 | int\nuint64 | long\nsint32 | int\nsint64 | long\nfixed32 | int\nfixed64 | long\nsfixed32 | int\nsfixed32 | long\nbool | boolean\nstring | string\nbytes | ByteString\n\n\n","source":"_posts/proto变量类型与java类型对照表.md","raw":"title: proto变量类型与java类型对照表\nauthor: Jiacan Liao\ntags:\n  - Protobuf\n  - rpc\ncategories: []\ndate: 2017-10-11 10:53:00\n---\n\nproto type | java type\n---|---\ndouble | double\nfloat | float\nint32 | int\nint64 | long\nuint32 | int\nuint64 | long\nsint32 | int\nsint64 | long\nfixed32 | int\nfixed64 | long\nsfixed32 | int\nsfixed32 | long\nbool | boolean\nstring | string\nbytes | ByteString\n\n\n","slug":"proto变量类型与java类型对照表","published":1,"updated":"2018-02-08T06:58:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8c1000tkg88xinjn7ey","content":"<table>\n<thead>\n<tr>\n<th>proto type</th>\n<th>java type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>fixed64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>long</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>string</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>ByteString</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>proto type</th>\n<th>java type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>fixed64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>long</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>string</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>ByteString</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"proto文件","author":"Jiacan Liao","date":"2017-10-10T11:52:00.000Z","_content":"> proto文件是Proto buffers的描述文件\n\n\n- syntax 指定pd编译器的版本，可以设置proto2或者proto3\n- message 类似java中的class关键字，在PB这里叫消息体\n- service 服务声明\n- 修饰符\n  - required 非空，必须存在\n  - optional 可选\n  - repeated 可重复出现，类似集合的概念吧\n- 更多介绍参考官方文档，[Protocal Buffers](https://developers.google.com/protocol-buffers/docs/proto3#simple)\n\n```\nsyntax = \"proto3\";\n\nservice SearchService{\n    rpc search(SearchRequest) returns (SearchResponse) {}\n}\n\nmessage SearchRequest {\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3;\n}\n\nmessage SearchResponse {\n  string result = 1;\n}\n\n```\n","source":"_posts/proto文件.md","raw":"title: proto文件\nauthor: Jiacan Liao\ntags:\n  - rpc\n  - Protobuf\ncategories: []\ndate: 2017-10-10 19:52:00\n---\n> proto文件是Proto buffers的描述文件\n\n\n- syntax 指定pd编译器的版本，可以设置proto2或者proto3\n- message 类似java中的class关键字，在PB这里叫消息体\n- service 服务声明\n- 修饰符\n  - required 非空，必须存在\n  - optional 可选\n  - repeated 可重复出现，类似集合的概念吧\n- 更多介绍参考官方文档，[Protocal Buffers](https://developers.google.com/protocol-buffers/docs/proto3#simple)\n\n```\nsyntax = \"proto3\";\n\nservice SearchService{\n    rpc search(SearchRequest) returns (SearchResponse) {}\n}\n\nmessage SearchRequest {\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3;\n}\n\nmessage SearchResponse {\n  string result = 1;\n}\n\n```\n","slug":"proto文件","published":1,"updated":"2018-02-08T06:58:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8c3000ukg88qlsfnj39","content":"<blockquote>\n<p>proto文件是Proto buffers的描述文件</p>\n</blockquote>\n<ul>\n<li>syntax 指定pd编译器的版本，可以设置proto2或者proto3</li>\n<li>message 类似java中的class关键字，在PB这里叫消息体</li>\n<li>service 服务声明</li>\n<li>修饰符\n<ul>\n<li>required 非空，必须存在</li>\n<li>optional 可选</li>\n<li>repeated 可重复出现，类似集合的概念吧</li>\n</ul>\n</li>\n<li>更多介绍参考官方文档，<a href=\"https://developers.google.com/protocol-buffers/docs/proto3#simple\" target=\"_blank\" rel=\"noopener\">Protocal Buffers</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service SearchService&#123;</span><br><span class=\"line\">    rpc search(SearchRequest) returns (SearchResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message SearchRequest &#123;</span><br><span class=\"line\">  required string query = 1;</span><br><span class=\"line\">  optional int32 page_number = 2;</span><br><span class=\"line\">  optional int32 result_per_page = 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message SearchResponse &#123;</span><br><span class=\"line\">  string result = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>proto文件是Proto buffers的描述文件</p>\n</blockquote>\n<ul>\n<li>syntax 指定pd编译器的版本，可以设置proto2或者proto3</li>\n<li>message 类似java中的class关键字，在PB这里叫消息体</li>\n<li>service 服务声明</li>\n<li>修饰符\n<ul>\n<li>required 非空，必须存在</li>\n<li>optional 可选</li>\n<li>repeated 可重复出现，类似集合的概念吧</li>\n</ul>\n</li>\n<li>更多介绍参考官方文档，<a href=\"https://developers.google.com/protocol-buffers/docs/proto3#simple\" target=\"_blank\" rel=\"noopener\">Protocal Buffers</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">service SearchService&#123;</span><br><span class=\"line\">    rpc search(SearchRequest) returns (SearchResponse) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message SearchRequest &#123;</span><br><span class=\"line\">  required string query = 1;</span><br><span class=\"line\">  optional int32 page_number = 2;</span><br><span class=\"line\">  optional int32 result_per_page = 3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message SearchResponse &#123;</span><br><span class=\"line\">  string result = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"抽奖业务设计","author":"Jiacan Liao","date":"2017-12-16T08:12:00.000Z","_content":">抽奖是一个比较常见的业务，关于抽奖的算法也有很多种实现，下面介绍一种比较容易实现的方式。\n\n1.根据中奖概率的精确度，取一个权重的基线作为（概率->概率区间）的放大因子。比如，概率的精确度是到万分位，则基线取10000，保证转换后的区间>=1\n\n2.将奖品按对应的中奖概率*基线 转换成权重区间，并记录权重的上限值。\n\n3.在权重上限值的范围内产生一个随机数，利用迭代查找或者二分查找算法找到对应的权重区间，即可获取到对应的奖品。\n\n假设奖品的配置如下：\n\n```\n\"一等奖\":0.01\n\"二等奖\":0.1\n\"三等奖\":0.15\n\"四等奖\":0.2\n\"五等奖\":0.25\n\"六等奖\":0.29\n```\n\n概率转换到权重区间（放大10000倍）：\n\n```\n 一等奖:[0.000000,100.000000)\n 二等奖:[100.000000,1100.000000)\n 三等奖:[1100.000000,2600.000000)\n 四等奖:[2600.000000,4100.000000)\n 五等奖:[4100.000000,6100.000000)\n 六等奖:[6100.000000,8600.000000)\n```\n\n算法实现：[Github](https://github.com/liaojiacan/code-snippets/tree/master/function-design/src/main/java/com/github/liaojiacan/lottery)\n\n```\npublic class LotteryPrize {\n\tprivate String id;\n\tprivate String name;\n\tprivate double possibility;\n\n\tpublic LotteryPrize() {\n\t}\n\n\n\tpublic LotteryPrize(String id, String name, double possibility) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.possibility = possibility;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic double getPossibility() {\n\t\treturn possibility;\n\t}\n\n\tpublic void setPossibility(double possibility) {\n\t\tthis.possibility = possibility;\n\t}\n}\n\n```\n\n\n```\n\npublic class LotteryMachine {\n\n\tprivate PossibilityArea[] table;\n\tprivate int bound = 1;\n\tprivate Random random = new Random();\n\n\tprivate static final int BASE_WEIGHT = 10000;\n\n\tclass PossibilityArea{\n\t\tprivate LotteryPrize prize;\n\t\tprivate double start;\n\t\tprivate double end;\n\t\tpublic PossibilityArea(LotteryPrize prize, double start, double end) {\n\t\t\tthis.prize = prize;\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t\tSystem.out.printf(\"%s:[%f,%f)\\n\",prize.getName(),start,end);\n\t\t}\n\t}\n\n\tpublic LotteryMachine(List<LotteryPrize> prizes) {\n\t\ttable = new PossibilityArea[prizes.size()];\n\t\tdouble start = 0;\n\t\tfor(int i=0;i<prizes.size();i++){\n\t\t\tLotteryPrize prize = prizes.get(i);\n\t\t\tdouble weight = prize.getPossibility() * BASE_WEIGHT;\n\t\t\tDouble end = start + weight;\n\t\t\tPossibilityArea area = new PossibilityArea(prize,start,end);\n\t\t\ttable[i]= area;\n\t\t\tbound = end.intValue();\n\t\t\tstart=end;\n\t\t}\n\t}\n\n\n\tprivate LotteryPrize binarySearch(int rnd){\n\t\tint low = 0;\n\t\tint hight = table.length;\n\t\twhile (low<hight){\n\t\t\tint mid = (low + hight) / 2;\n\t\t\tPossibilityArea area = table[mid];\n\t\t\tif(area.start<=rnd && area.end>rnd){\n\t\t\t\treturn  area.prize;\n\t\t\t}\n\t\t\tif(area.end<=rnd){\n\t\t\t\tlow=mid+1;\n\t\t\t}\n\t\t\tif(area.start>rnd){\n\t\t\t\thight=mid;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\n\t}\n\n\tpublic LotteryPrize go(){\n\t\tint rnd = random.nextInt(bound);\n\t\treturn binarySearch(rnd);\n\t}\n}\n\n```\n\n\n","source":"_posts/抽奖业务设计.md","raw":"title: 抽奖业务设计\nauthor: Jiacan Liao\ntags:\n  - 业务开发\ncategories:\n  - java\ndate: 2017-12-16 16:12:00\n---\n>抽奖是一个比较常见的业务，关于抽奖的算法也有很多种实现，下面介绍一种比较容易实现的方式。\n\n1.根据中奖概率的精确度，取一个权重的基线作为（概率->概率区间）的放大因子。比如，概率的精确度是到万分位，则基线取10000，保证转换后的区间>=1\n\n2.将奖品按对应的中奖概率*基线 转换成权重区间，并记录权重的上限值。\n\n3.在权重上限值的范围内产生一个随机数，利用迭代查找或者二分查找算法找到对应的权重区间，即可获取到对应的奖品。\n\n假设奖品的配置如下：\n\n```\n\"一等奖\":0.01\n\"二等奖\":0.1\n\"三等奖\":0.15\n\"四等奖\":0.2\n\"五等奖\":0.25\n\"六等奖\":0.29\n```\n\n概率转换到权重区间（放大10000倍）：\n\n```\n 一等奖:[0.000000,100.000000)\n 二等奖:[100.000000,1100.000000)\n 三等奖:[1100.000000,2600.000000)\n 四等奖:[2600.000000,4100.000000)\n 五等奖:[4100.000000,6100.000000)\n 六等奖:[6100.000000,8600.000000)\n```\n\n算法实现：[Github](https://github.com/liaojiacan/code-snippets/tree/master/function-design/src/main/java/com/github/liaojiacan/lottery)\n\n```\npublic class LotteryPrize {\n\tprivate String id;\n\tprivate String name;\n\tprivate double possibility;\n\n\tpublic LotteryPrize() {\n\t}\n\n\n\tpublic LotteryPrize(String id, String name, double possibility) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.possibility = possibility;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic double getPossibility() {\n\t\treturn possibility;\n\t}\n\n\tpublic void setPossibility(double possibility) {\n\t\tthis.possibility = possibility;\n\t}\n}\n\n```\n\n\n```\n\npublic class LotteryMachine {\n\n\tprivate PossibilityArea[] table;\n\tprivate int bound = 1;\n\tprivate Random random = new Random();\n\n\tprivate static final int BASE_WEIGHT = 10000;\n\n\tclass PossibilityArea{\n\t\tprivate LotteryPrize prize;\n\t\tprivate double start;\n\t\tprivate double end;\n\t\tpublic PossibilityArea(LotteryPrize prize, double start, double end) {\n\t\t\tthis.prize = prize;\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t\tSystem.out.printf(\"%s:[%f,%f)\\n\",prize.getName(),start,end);\n\t\t}\n\t}\n\n\tpublic LotteryMachine(List<LotteryPrize> prizes) {\n\t\ttable = new PossibilityArea[prizes.size()];\n\t\tdouble start = 0;\n\t\tfor(int i=0;i<prizes.size();i++){\n\t\t\tLotteryPrize prize = prizes.get(i);\n\t\t\tdouble weight = prize.getPossibility() * BASE_WEIGHT;\n\t\t\tDouble end = start + weight;\n\t\t\tPossibilityArea area = new PossibilityArea(prize,start,end);\n\t\t\ttable[i]= area;\n\t\t\tbound = end.intValue();\n\t\t\tstart=end;\n\t\t}\n\t}\n\n\n\tprivate LotteryPrize binarySearch(int rnd){\n\t\tint low = 0;\n\t\tint hight = table.length;\n\t\twhile (low<hight){\n\t\t\tint mid = (low + hight) / 2;\n\t\t\tPossibilityArea area = table[mid];\n\t\t\tif(area.start<=rnd && area.end>rnd){\n\t\t\t\treturn  area.prize;\n\t\t\t}\n\t\t\tif(area.end<=rnd){\n\t\t\t\tlow=mid+1;\n\t\t\t}\n\t\t\tif(area.start>rnd){\n\t\t\t\thight=mid;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\n\t}\n\n\tpublic LotteryPrize go(){\n\t\tint rnd = random.nextInt(bound);\n\t\treturn binarySearch(rnd);\n\t}\n}\n\n```\n\n\n","slug":"抽奖业务设计","published":1,"updated":"2018-02-08T06:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8cg000vkg88wdhr3piq","content":"<blockquote>\n<p>抽奖是一个比较常见的业务，关于抽奖的算法也有很多种实现，下面介绍一种比较容易实现的方式。</p>\n</blockquote>\n<p>1.根据中奖概率的精确度，取一个权重的基线作为（概率-&gt;概率区间）的放大因子。比如，概率的精确度是到万分位，则基线取10000，保证转换后的区间&gt;=1</p>\n<p>2.将奖品按对应的中奖概率*基线 转换成权重区间，并记录权重的上限值。</p>\n<p>3.在权重上限值的范围内产生一个随机数，利用迭代查找或者二分查找算法找到对应的权重区间，即可获取到对应的奖品。</p>\n<p>假设奖品的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;一等奖&quot;:0.01</span><br><span class=\"line\">&quot;二等奖&quot;:0.1</span><br><span class=\"line\">&quot;三等奖&quot;:0.15</span><br><span class=\"line\">&quot;四等奖&quot;:0.2</span><br><span class=\"line\">&quot;五等奖&quot;:0.25</span><br><span class=\"line\">&quot;六等奖&quot;:0.29</span><br></pre></td></tr></table></figure>\n<p>概率转换到权重区间（放大10000倍）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一等奖:[0.000000,100.000000)</span><br><span class=\"line\">二等奖:[100.000000,1100.000000)</span><br><span class=\"line\">三等奖:[1100.000000,2600.000000)</span><br><span class=\"line\">四等奖:[2600.000000,4100.000000)</span><br><span class=\"line\">五等奖:[4100.000000,6100.000000)</span><br><span class=\"line\">六等奖:[6100.000000,8600.000000)</span><br></pre></td></tr></table></figure>\n<p>算法实现：<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/function-design/src/main/java/com/github/liaojiacan/lottery\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LotteryPrize &#123;</span><br><span class=\"line\">\tprivate String id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate double possibility;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize(String id, String name, double possibility) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.possibility = possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setId(String id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getPossibility() &#123;</span><br><span class=\"line\">\t\treturn possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setPossibility(double possibility) &#123;</span><br><span class=\"line\">\t\tthis.possibility = possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class LotteryMachine &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate PossibilityArea[] table;</span><br><span class=\"line\">\tprivate int bound = 1;</span><br><span class=\"line\">\tprivate Random random = new Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static final int BASE_WEIGHT = 10000;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclass PossibilityArea&#123;</span><br><span class=\"line\">\t\tprivate LotteryPrize prize;</span><br><span class=\"line\">\t\tprivate double start;</span><br><span class=\"line\">\t\tprivate double end;</span><br><span class=\"line\">\t\tpublic PossibilityArea(LotteryPrize prize, double start, double end) &#123;</span><br><span class=\"line\">\t\t\tthis.prize = prize;</span><br><span class=\"line\">\t\t\tthis.start = start;</span><br><span class=\"line\">\t\t\tthis.end = end;</span><br><span class=\"line\">\t\t\tSystem.out.printf(&quot;%s:[%f,%f)\\n&quot;,prize.getName(),start,end);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryMachine(List&lt;LotteryPrize&gt; prizes) &#123;</span><br><span class=\"line\">\t\ttable = new PossibilityArea[prizes.size()];</span><br><span class=\"line\">\t\tdouble start = 0;</span><br><span class=\"line\">\t\tfor(int i=0;i&lt;prizes.size();i++)&#123;</span><br><span class=\"line\">\t\t\tLotteryPrize prize = prizes.get(i);</span><br><span class=\"line\">\t\t\tdouble weight = prize.getPossibility() * BASE_WEIGHT;</span><br><span class=\"line\">\t\t\tDouble end = start + weight;</span><br><span class=\"line\">\t\t\tPossibilityArea area = new PossibilityArea(prize,start,end);</span><br><span class=\"line\">\t\t\ttable[i]= area;</span><br><span class=\"line\">\t\t\tbound = end.intValue();</span><br><span class=\"line\">\t\t\tstart=end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate LotteryPrize binarySearch(int rnd)&#123;</span><br><span class=\"line\">\t\tint low = 0;</span><br><span class=\"line\">\t\tint hight = table.length;</span><br><span class=\"line\">\t\twhile (low&lt;hight)&#123;</span><br><span class=\"line\">\t\t\tint mid = (low + hight) / 2;</span><br><span class=\"line\">\t\t\tPossibilityArea area = table[mid];</span><br><span class=\"line\">\t\t\tif(area.start&lt;=rnd &amp;&amp; area.end&gt;rnd)&#123;</span><br><span class=\"line\">\t\t\t\treturn  area.prize;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(area.end&lt;=rnd)&#123;</span><br><span class=\"line\">\t\t\t\tlow=mid+1;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(area.start&gt;rnd)&#123;</span><br><span class=\"line\">\t\t\t\thight=mid;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize go()&#123;</span><br><span class=\"line\">\t\tint rnd = random.nextInt(bound);</span><br><span class=\"line\">\t\treturn binarySearch(rnd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>抽奖是一个比较常见的业务，关于抽奖的算法也有很多种实现，下面介绍一种比较容易实现的方式。</p>\n</blockquote>\n<p>1.根据中奖概率的精确度，取一个权重的基线作为（概率-&gt;概率区间）的放大因子。比如，概率的精确度是到万分位，则基线取10000，保证转换后的区间&gt;=1</p>\n<p>2.将奖品按对应的中奖概率*基线 转换成权重区间，并记录权重的上限值。</p>\n<p>3.在权重上限值的范围内产生一个随机数，利用迭代查找或者二分查找算法找到对应的权重区间，即可获取到对应的奖品。</p>\n<p>假设奖品的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;一等奖&quot;:0.01</span><br><span class=\"line\">&quot;二等奖&quot;:0.1</span><br><span class=\"line\">&quot;三等奖&quot;:0.15</span><br><span class=\"line\">&quot;四等奖&quot;:0.2</span><br><span class=\"line\">&quot;五等奖&quot;:0.25</span><br><span class=\"line\">&quot;六等奖&quot;:0.29</span><br></pre></td></tr></table></figure>\n<p>概率转换到权重区间（放大10000倍）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一等奖:[0.000000,100.000000)</span><br><span class=\"line\">二等奖:[100.000000,1100.000000)</span><br><span class=\"line\">三等奖:[1100.000000,2600.000000)</span><br><span class=\"line\">四等奖:[2600.000000,4100.000000)</span><br><span class=\"line\">五等奖:[4100.000000,6100.000000)</span><br><span class=\"line\">六等奖:[6100.000000,8600.000000)</span><br></pre></td></tr></table></figure>\n<p>算法实现：<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/function-design/src/main/java/com/github/liaojiacan/lottery\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LotteryPrize &#123;</span><br><span class=\"line\">\tprivate String id;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate double possibility;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize(String id, String name, double possibility) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.possibility = possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setId(String id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getPossibility() &#123;</span><br><span class=\"line\">\t\treturn possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setPossibility(double possibility) &#123;</span><br><span class=\"line\">\t\tthis.possibility = possibility;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class LotteryMachine &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate PossibilityArea[] table;</span><br><span class=\"line\">\tprivate int bound = 1;</span><br><span class=\"line\">\tprivate Random random = new Random();</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate static final int BASE_WEIGHT = 10000;</span><br><span class=\"line\"></span><br><span class=\"line\">\tclass PossibilityArea&#123;</span><br><span class=\"line\">\t\tprivate LotteryPrize prize;</span><br><span class=\"line\">\t\tprivate double start;</span><br><span class=\"line\">\t\tprivate double end;</span><br><span class=\"line\">\t\tpublic PossibilityArea(LotteryPrize prize, double start, double end) &#123;</span><br><span class=\"line\">\t\t\tthis.prize = prize;</span><br><span class=\"line\">\t\t\tthis.start = start;</span><br><span class=\"line\">\t\t\tthis.end = end;</span><br><span class=\"line\">\t\t\tSystem.out.printf(&quot;%s:[%f,%f)\\n&quot;,prize.getName(),start,end);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryMachine(List&lt;LotteryPrize&gt; prizes) &#123;</span><br><span class=\"line\">\t\ttable = new PossibilityArea[prizes.size()];</span><br><span class=\"line\">\t\tdouble start = 0;</span><br><span class=\"line\">\t\tfor(int i=0;i&lt;prizes.size();i++)&#123;</span><br><span class=\"line\">\t\t\tLotteryPrize prize = prizes.get(i);</span><br><span class=\"line\">\t\t\tdouble weight = prize.getPossibility() * BASE_WEIGHT;</span><br><span class=\"line\">\t\t\tDouble end = start + weight;</span><br><span class=\"line\">\t\t\tPossibilityArea area = new PossibilityArea(prize,start,end);</span><br><span class=\"line\">\t\t\ttable[i]= area;</span><br><span class=\"line\">\t\t\tbound = end.intValue();</span><br><span class=\"line\">\t\t\tstart=end;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate LotteryPrize binarySearch(int rnd)&#123;</span><br><span class=\"line\">\t\tint low = 0;</span><br><span class=\"line\">\t\tint hight = table.length;</span><br><span class=\"line\">\t\twhile (low&lt;hight)&#123;</span><br><span class=\"line\">\t\t\tint mid = (low + hight) / 2;</span><br><span class=\"line\">\t\t\tPossibilityArea area = table[mid];</span><br><span class=\"line\">\t\t\tif(area.start&lt;=rnd &amp;&amp; area.end&gt;rnd)&#123;</span><br><span class=\"line\">\t\t\t\treturn  area.prize;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(area.end&lt;=rnd)&#123;</span><br><span class=\"line\">\t\t\t\tlow=mid+1;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif(area.start&gt;rnd)&#123;</span><br><span class=\"line\">\t\t\t\thight=mid;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic LotteryPrize go()&#123;</span><br><span class=\"line\">\t\tint rnd = random.nextInt(bound);</span><br><span class=\"line\">\t\treturn binarySearch(rnd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"自定义ClassLoader实现一个支持热加载的应用启动器","author":"Jiacan Liao","date":"2019-03-17T08:46:00.000Z","_content":"JVM 默认是不支持Class的热加载的，也就是说我们的代码有变动，就要重启JVM来达到加载新的Class目的，但是很多容器如Tomcat、Jetty等都可以支持热加载，其底层的原理就是自定义ClassLoader。OSGI更是将类加载器玩到极至。我们来看看怎么实现一个简单的支持热加载的应用启动器。\n\n### 一、实现的目标\n- 支持热加载\n- 可配置的启动类\n\n\n### 二、实现\n\n#### 1. 支持热加载\n关于类的加载，必然要说一下ClassLoader，JDK中存在这几个ClassLoader：\n- BootstrapClassLoader 加载基础类\n- ExtClassLoader 加载拓展类，父加载器是BootstrapClassLoader\n- AppClassLoader 加载应用程序类 ，父加载器是ExtClassLoader\n\n**双亲委派：**\n官方建议开发者，实现类加载器时遵循双亲委派规则，就是加载一个类时，先交给父加载器加载，如果父加载器无法加载，再由当前类加载器加载，从代码上来说，AppClassLoader已经写好了这个模版类，我们只需要覆盖findClass的逻辑即可。\n> 实现热加载需要违背双亲委派规则吗？\n\n由于ClassLoader中的defineClass方法会对已加载的类进行校验，所以我们无法对一个类进行重复加载，要实现热加载只能创建一个新的ClassLoader，假如我们采用双亲委派规则，那么我们需要加载的类会先被父加载器（AppClassLoader）给加载缓存起来，之后我们无论怎么创建一个新的加载器也无法达到热加载的目的。\n\n```\npublic class HotSwapClassLoader extends ClassLoader {\n\n\t/**\n\t * 指定目录下的类可以热加载\n\t */\n\tprivate String basePath;\n\n\tpublic HotSwapClassLoader(String basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t@Override\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n\t\tClass<?> c = findLoadedClass(name);\n\t\t// 加载指定目录下的class\n\t\tif (c == null) {\n\t\t\ttry {\n\t\t\t\tc = findClass(name);\n\t\t\t\tif (c != null) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\treturn super.loadClass(name);\n\t\t\t}\n\n\t\t}\n\t\treturn super.loadClass(name);\n\t}\n\n\t@Override\n\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n\n\t\tString classResourcePath = this.basePath + \"/\" + name.replaceAll(\"\\\\.\", \"/\");\n\n\t\ttry {\n\t\t\tFileInputStream fileInputStream = new FileInputStream(new File(classResourcePath));\n\t\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n\t\t\tint len;\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\twhile ((len = fileInputStream.read(buffer)) > 0) {\n\t\t\t\tbyteArrayOutputStream.write(buffer, 0, len);\n\t\t\t}\n\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();\n\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ClassNotFoundException(name);\n\t\t}\n\n\t}\n}\n```\n\n#### 2. 启动器\n\n上面我们已经实现了一个可以随时替换的ClassLoader，我们还需要一个引导类去维护我们的ClassLoader 还有我们的应用启动入口，管理启动和关闭的时机，就好比Tomcat的Catalina一样，或者说我们的任何类的Main函数。\n\n```\npublic class Bootstrap {\n\n\tprivate String basePath;\n\tprivate Object application;\n\tprivate String applicationClassName;\n\tprivate volatile ClassLoader applicationClassLoader;\n\n\n\tpublic Bootstrap(String basePath, String applicationClassName) {\n\t\tthis.basePath = basePath;\n\t\tthis.applicationClassLoader = new HotSwapClassLoader(this.basePath);\n\t\tthis.applicationClassName = applicationClassName;\n\t\ttry {\n\t\t\tthis.application = getApplication();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n    \n}\n```\n有了上面的那些成员，我们就可以利用Java的反射来实现自定义的Application类的启动（这个类可以方在任意位置，就好比我们的war包可以方在任意位置，只要在tomcat的server.xml中配置好baseApps的路径就好了）\n```\n\tprivate void startApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n\t\tthis.application.getClass().getDeclaredMethod(\"start\", null).invoke(this.application, new Object[0]);\n\t}\n\n\tprivate void stopApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n\t\tthis.application.getClass().getDeclaredMethod(\"stop\", null).invoke(this.application, new Object[0]);\n\t}\n```\n最后，剩下最后一个问题就是，我们怎么知道我们的类需要加载呢？有2种方式就是主动刷新，还有一种就是程序监听文件夹的文件变动。我们可以利用jdk7之后提供的WatchService来监控文件或者目录的变动情况，一发生变动，则先注销之前的Application 然后再创建一个新的HotSwapClassLoader来启动新的Application。\n\n```\nprivate void registerResourceWatcher() {\n\t\ttry {\n\t\t\tWatchService watchService = FileSystems.getDefault().newWatchService();\n\t\t\tPath p = Paths.get(basePath);\n\t\t\tp.register(watchService, new WatchEvent.Kind[]{ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE});\n\t\t\twhile (true) {\n\t\t\t\tWatchKey k = watchService.take();\n\t\t\t\tfor (WatchEvent<?> e : k.pollEvents()) {\n\t\t\t\t\treloadApplication();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk.reset();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n### 三、测试\n```\npublic class Application {\n\n\tpublic Integer version = 46;\n\n\t/**\n\t * 应用的启动入口\n\t */\n\tpublic void start() {\n\t\tSystem.out.println(\"Start... version=\" + version);\n\t}\n\n\t/**\n\t * 应用的停止入口\n\t */\n\tpublic void stop() {\n\t\tSystem.out.println(\"Stop... version=\" + version);\n\t}\n}\n\n```\n\n```\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tnew Bootstrap(\"/Users/liaojiacan/Workspace/java/personal/code-snippets/java-language/target/classes\"\n\t\t\t\t,\"com.github.liaojiacan.classloader.app.Application\").boot();\n\t}\n}\n```\n启动后，我们修改Application的 version=47，然后rebuild project，这个时候这个文件就会发生改变,输出如下：\n\n```\nStart... version=46\nStop... version=46\nStart... version=47\n```\n完整代码见Github :[https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader](https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader)\n","source":"_posts/自定义ClassLoader实现一个支持热加载的应用启动器.md","raw":"title: 自定义ClassLoader实现一个支持热加载的应用启动器\nauthor: Jiacan Liao\ntags:\n  - ClassLoader\n  - 热加载\ncategories:\n  - JDK\ndate: 2019-03-17 16:46:00\n---\nJVM 默认是不支持Class的热加载的，也就是说我们的代码有变动，就要重启JVM来达到加载新的Class目的，但是很多容器如Tomcat、Jetty等都可以支持热加载，其底层的原理就是自定义ClassLoader。OSGI更是将类加载器玩到极至。我们来看看怎么实现一个简单的支持热加载的应用启动器。\n\n### 一、实现的目标\n- 支持热加载\n- 可配置的启动类\n\n\n### 二、实现\n\n#### 1. 支持热加载\n关于类的加载，必然要说一下ClassLoader，JDK中存在这几个ClassLoader：\n- BootstrapClassLoader 加载基础类\n- ExtClassLoader 加载拓展类，父加载器是BootstrapClassLoader\n- AppClassLoader 加载应用程序类 ，父加载器是ExtClassLoader\n\n**双亲委派：**\n官方建议开发者，实现类加载器时遵循双亲委派规则，就是加载一个类时，先交给父加载器加载，如果父加载器无法加载，再由当前类加载器加载，从代码上来说，AppClassLoader已经写好了这个模版类，我们只需要覆盖findClass的逻辑即可。\n> 实现热加载需要违背双亲委派规则吗？\n\n由于ClassLoader中的defineClass方法会对已加载的类进行校验，所以我们无法对一个类进行重复加载，要实现热加载只能创建一个新的ClassLoader，假如我们采用双亲委派规则，那么我们需要加载的类会先被父加载器（AppClassLoader）给加载缓存起来，之后我们无论怎么创建一个新的加载器也无法达到热加载的目的。\n\n```\npublic class HotSwapClassLoader extends ClassLoader {\n\n\t/**\n\t * 指定目录下的类可以热加载\n\t */\n\tprivate String basePath;\n\n\tpublic HotSwapClassLoader(String basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t@Override\n\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n\t\tClass<?> c = findLoadedClass(name);\n\t\t// 加载指定目录下的class\n\t\tif (c == null) {\n\t\t\ttry {\n\t\t\t\tc = findClass(name);\n\t\t\t\tif (c != null) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\treturn super.loadClass(name);\n\t\t\t}\n\n\t\t}\n\t\treturn super.loadClass(name);\n\t}\n\n\t@Override\n\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n\n\t\tString classResourcePath = this.basePath + \"/\" + name.replaceAll(\"\\\\.\", \"/\");\n\n\t\ttry {\n\t\t\tFileInputStream fileInputStream = new FileInputStream(new File(classResourcePath));\n\t\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n\t\t\tint len;\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\twhile ((len = fileInputStream.read(buffer)) > 0) {\n\t\t\t\tbyteArrayOutputStream.write(buffer, 0, len);\n\t\t\t}\n\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();\n\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ClassNotFoundException(name);\n\t\t}\n\n\t}\n}\n```\n\n#### 2. 启动器\n\n上面我们已经实现了一个可以随时替换的ClassLoader，我们还需要一个引导类去维护我们的ClassLoader 还有我们的应用启动入口，管理启动和关闭的时机，就好比Tomcat的Catalina一样，或者说我们的任何类的Main函数。\n\n```\npublic class Bootstrap {\n\n\tprivate String basePath;\n\tprivate Object application;\n\tprivate String applicationClassName;\n\tprivate volatile ClassLoader applicationClassLoader;\n\n\n\tpublic Bootstrap(String basePath, String applicationClassName) {\n\t\tthis.basePath = basePath;\n\t\tthis.applicationClassLoader = new HotSwapClassLoader(this.basePath);\n\t\tthis.applicationClassName = applicationClassName;\n\t\ttry {\n\t\t\tthis.application = getApplication();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n    \n}\n```\n有了上面的那些成员，我们就可以利用Java的反射来实现自定义的Application类的启动（这个类可以方在任意位置，就好比我们的war包可以方在任意位置，只要在tomcat的server.xml中配置好baseApps的路径就好了）\n```\n\tprivate void startApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n\t\tthis.application.getClass().getDeclaredMethod(\"start\", null).invoke(this.application, new Object[0]);\n\t}\n\n\tprivate void stopApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n\t\tthis.application.getClass().getDeclaredMethod(\"stop\", null).invoke(this.application, new Object[0]);\n\t}\n```\n最后，剩下最后一个问题就是，我们怎么知道我们的类需要加载呢？有2种方式就是主动刷新，还有一种就是程序监听文件夹的文件变动。我们可以利用jdk7之后提供的WatchService来监控文件或者目录的变动情况，一发生变动，则先注销之前的Application 然后再创建一个新的HotSwapClassLoader来启动新的Application。\n\n```\nprivate void registerResourceWatcher() {\n\t\ttry {\n\t\t\tWatchService watchService = FileSystems.getDefault().newWatchService();\n\t\t\tPath p = Paths.get(basePath);\n\t\t\tp.register(watchService, new WatchEvent.Kind[]{ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE});\n\t\t\twhile (true) {\n\t\t\t\tWatchKey k = watchService.take();\n\t\t\t\tfor (WatchEvent<?> e : k.pollEvents()) {\n\t\t\t\t\treloadApplication();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tk.reset();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n```\n\n### 三、测试\n```\npublic class Application {\n\n\tpublic Integer version = 46;\n\n\t/**\n\t * 应用的启动入口\n\t */\n\tpublic void start() {\n\t\tSystem.out.println(\"Start... version=\" + version);\n\t}\n\n\t/**\n\t * 应用的停止入口\n\t */\n\tpublic void stop() {\n\t\tSystem.out.println(\"Stop... version=\" + version);\n\t}\n}\n\n```\n\n```\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\n\t\tnew Bootstrap(\"/Users/liaojiacan/Workspace/java/personal/code-snippets/java-language/target/classes\"\n\t\t\t\t,\"com.github.liaojiacan.classloader.app.Application\").boot();\n\t}\n}\n```\n启动后，我们修改Application的 version=47，然后rebuild project，这个时候这个文件就会发生改变,输出如下：\n\n```\nStart... version=46\nStop... version=46\nStart... version=47\n```\n完整代码见Github :[https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader](https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader)\n","slug":"自定义ClassLoader实现一个支持热加载的应用启动器","published":1,"updated":"2019-03-17T08:46:51.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8ci0010kg88l6q6szrk","content":"<p>JVM 默认是不支持Class的热加载的，也就是说我们的代码有变动，就要重启JVM来达到加载新的Class目的，但是很多容器如Tomcat、Jetty等都可以支持热加载，其底层的原理就是自定义ClassLoader。OSGI更是将类加载器玩到极至。我们来看看怎么实现一个简单的支持热加载的应用启动器。</p>\n<h3 id=\"一-实现的目标\"><a class=\"markdownIt-Anchor\" href=\"#一-实现的目标\"></a> 一、实现的目标</h3>\n<ul>\n<li>支持热加载</li>\n<li>可配置的启动类</li>\n</ul>\n<h3 id=\"二-实现\"><a class=\"markdownIt-Anchor\" href=\"#二-实现\"></a> 二、实现</h3>\n<h4 id=\"1-支持热加载\"><a class=\"markdownIt-Anchor\" href=\"#1-支持热加载\"></a> 1. 支持热加载</h4>\n<p>关于类的加载，必然要说一下ClassLoader，JDK中存在这几个ClassLoader：</p>\n<ul>\n<li>BootstrapClassLoader 加载基础类</li>\n<li>ExtClassLoader 加载拓展类，父加载器是BootstrapClassLoader</li>\n<li>AppClassLoader 加载应用程序类 ，父加载器是ExtClassLoader</li>\n</ul>\n<p><strong>双亲委派：</strong><br>\n官方建议开发者，实现类加载器时遵循双亲委派规则，就是加载一个类时，先交给父加载器加载，如果父加载器无法加载，再由当前类加载器加载，从代码上来说，AppClassLoader已经写好了这个模版类，我们只需要覆盖findClass的逻辑即可。</p>\n<blockquote>\n<p>实现热加载需要违背双亲委派规则吗？</p>\n</blockquote>\n<p>由于ClassLoader中的defineClass方法会对已加载的类进行校验，所以我们无法对一个类进行重复加载，要实现热加载只能创建一个新的ClassLoader，假如我们采用双亲委派规则，那么我们需要加载的类会先被父加载器（AppClassLoader）给加载缓存起来，之后我们无论怎么创建一个新的加载器也无法达到热加载的目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HotSwapClassLoader extends ClassLoader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 指定目录下的类可以热加载</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String basePath;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HotSwapClassLoader(String basePath) &#123;</span><br><span class=\"line\">\t\tthis.basePath = basePath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">\t\t// 加载指定目录下的class</span><br><span class=\"line\">\t\tif (c == null) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t\t\tif (c != null) &#123;</span><br><span class=\"line\">\t\t\t\t\treturn c;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\treturn super.loadClass(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn super.loadClass(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString classResourcePath = this.basePath + &quot;/&quot; + name.replaceAll(&quot;\\\\.&quot;, &quot;/&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tFileInputStream fileInputStream = new FileInputStream(new File(classResourcePath));</span><br><span class=\"line\">\t\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br><span class=\"line\">\t\t\tint len;</span><br><span class=\"line\">\t\t\tbyte[] buffer = new byte[1024];</span><br><span class=\"line\">\t\t\twhile ((len = fileInputStream.read(buffer)) &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tbyteArrayOutputStream.write(buffer, 0, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class=\"line\">\t\t\treturn defineClass(name, bytes, 0, bytes.length);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tthrow new ClassNotFoundException(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动器\"><a class=\"markdownIt-Anchor\" href=\"#2-启动器\"></a> 2. 启动器</h4>\n<p>上面我们已经实现了一个可以随时替换的ClassLoader，我们还需要一个引导类去维护我们的ClassLoader 还有我们的应用启动入口，管理启动和关闭的时机，就好比Tomcat的Catalina一样，或者说我们的任何类的Main函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bootstrap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String basePath;</span><br><span class=\"line\">\tprivate Object application;</span><br><span class=\"line\">\tprivate String applicationClassName;</span><br><span class=\"line\">\tprivate volatile ClassLoader applicationClassLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Bootstrap(String basePath, String applicationClassName) &#123;</span><br><span class=\"line\">\t\tthis.basePath = basePath;</span><br><span class=\"line\">\t\tthis.applicationClassLoader = new HotSwapClassLoader(this.basePath);</span><br><span class=\"line\">\t\tthis.applicationClassName = applicationClassName;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tthis.application = getApplication();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了上面的那些成员，我们就可以利用Java的反射来实现自定义的Application类的启动（这个类可以方在任意位置，就好比我们的war包可以方在任意位置，只要在tomcat的server.xml中配置好baseApps的路径就好了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">\tthis.application.getClass().getDeclaredMethod(&quot;start&quot;, null).invoke(this.application, new Object[0]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void stopApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">\tthis.application.getClass().getDeclaredMethod(&quot;stop&quot;, null).invoke(this.application, new Object[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，剩下最后一个问题就是，我们怎么知道我们的类需要加载呢？有2种方式就是主动刷新，还有一种就是程序监听文件夹的文件变动。我们可以利用jdk7之后提供的WatchService来监控文件或者目录的变动情况，一发生变动，则先注销之前的Application 然后再创建一个新的HotSwapClassLoader来启动新的Application。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void registerResourceWatcher() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tWatchService watchService = FileSystems.getDefault().newWatchService();</span><br><span class=\"line\">\t\t\tPath p = Paths.get(basePath);</span><br><span class=\"line\">\t\t\tp.register(watchService, new WatchEvent.Kind[]&#123;ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE&#125;);</span><br><span class=\"line\">\t\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\t\tWatchKey k = watchService.take();</span><br><span class=\"line\">\t\t\t\tfor (WatchEvent&lt;?&gt; e : k.pollEvents()) &#123;</span><br><span class=\"line\">\t\t\t\t\treloadApplication();</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tk.reset();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-测试\"><a class=\"markdownIt-Anchor\" href=\"#三-测试\"></a> 三、测试</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Integer version = 46;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 应用的启动入口</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void start() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Start... version=&quot; + version);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 应用的停止入口</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void stop() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Stop... version=&quot; + version);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnew Bootstrap(&quot;/Users/liaojiacan/Workspace/java/personal/code-snippets/java-language/target/classes&quot;</span><br><span class=\"line\">\t\t\t\t,&quot;com.github.liaojiacan.classloader.app.Application&quot;).boot();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动后，我们修改Application的 version=47，然后rebuild project，这个时候这个文件就会发生改变,输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Start... version=46</span><br><span class=\"line\">Stop... version=46</span><br><span class=\"line\">Start... version=47</span><br></pre></td></tr></table></figure>\n<p>完整代码见Github :<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader\" target=\"_blank\" rel=\"noopener\">https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JVM 默认是不支持Class的热加载的，也就是说我们的代码有变动，就要重启JVM来达到加载新的Class目的，但是很多容器如Tomcat、Jetty等都可以支持热加载，其底层的原理就是自定义ClassLoader。OSGI更是将类加载器玩到极至。我们来看看怎么实现一个简单的支持热加载的应用启动器。</p>\n<h3 id=\"一-实现的目标\"><a class=\"markdownIt-Anchor\" href=\"#一-实现的目标\"></a> 一、实现的目标</h3>\n<ul>\n<li>支持热加载</li>\n<li>可配置的启动类</li>\n</ul>\n<h3 id=\"二-实现\"><a class=\"markdownIt-Anchor\" href=\"#二-实现\"></a> 二、实现</h3>\n<h4 id=\"1-支持热加载\"><a class=\"markdownIt-Anchor\" href=\"#1-支持热加载\"></a> 1. 支持热加载</h4>\n<p>关于类的加载，必然要说一下ClassLoader，JDK中存在这几个ClassLoader：</p>\n<ul>\n<li>BootstrapClassLoader 加载基础类</li>\n<li>ExtClassLoader 加载拓展类，父加载器是BootstrapClassLoader</li>\n<li>AppClassLoader 加载应用程序类 ，父加载器是ExtClassLoader</li>\n</ul>\n<p><strong>双亲委派：</strong><br>\n官方建议开发者，实现类加载器时遵循双亲委派规则，就是加载一个类时，先交给父加载器加载，如果父加载器无法加载，再由当前类加载器加载，从代码上来说，AppClassLoader已经写好了这个模版类，我们只需要覆盖findClass的逻辑即可。</p>\n<blockquote>\n<p>实现热加载需要违背双亲委派规则吗？</p>\n</blockquote>\n<p>由于ClassLoader中的defineClass方法会对已加载的类进行校验，所以我们无法对一个类进行重复加载，要实现热加载只能创建一个新的ClassLoader，假如我们采用双亲委派规则，那么我们需要加载的类会先被父加载器（AppClassLoader）给加载缓存起来，之后我们无论怎么创建一个新的加载器也无法达到热加载的目的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HotSwapClassLoader extends ClassLoader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 指定目录下的类可以热加载</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate String basePath;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic HotSwapClassLoader(String basePath) &#123;</span><br><span class=\"line\">\t\tthis.basePath = basePath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">\t\t// 加载指定目录下的class</span><br><span class=\"line\">\t\tif (c == null) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t\t\tif (c != null) &#123;</span><br><span class=\"line\">\t\t\t\t\treturn c;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\treturn super.loadClass(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn super.loadClass(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString classResourcePath = this.basePath + &quot;/&quot; + name.replaceAll(&quot;\\\\.&quot;, &quot;/&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tFileInputStream fileInputStream = new FileInputStream(new File(classResourcePath));</span><br><span class=\"line\">\t\t\tByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span><br><span class=\"line\">\t\t\tint len;</span><br><span class=\"line\">\t\t\tbyte[] buffer = new byte[1024];</span><br><span class=\"line\">\t\t\twhile ((len = fileInputStream.read(buffer)) &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tbyteArrayOutputStream.write(buffer, 0, len);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbyte[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class=\"line\">\t\t\treturn defineClass(name, bytes, 0, bytes.length);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tthrow new ClassNotFoundException(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-启动器\"><a class=\"markdownIt-Anchor\" href=\"#2-启动器\"></a> 2. 启动器</h4>\n<p>上面我们已经实现了一个可以随时替换的ClassLoader，我们还需要一个引导类去维护我们的ClassLoader 还有我们的应用启动入口，管理启动和关闭的时机，就好比Tomcat的Catalina一样，或者说我们的任何类的Main函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bootstrap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String basePath;</span><br><span class=\"line\">\tprivate Object application;</span><br><span class=\"line\">\tprivate String applicationClassName;</span><br><span class=\"line\">\tprivate volatile ClassLoader applicationClassLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Bootstrap(String basePath, String applicationClassName) &#123;</span><br><span class=\"line\">\t\tthis.basePath = basePath;</span><br><span class=\"line\">\t\tthis.applicationClassLoader = new HotSwapClassLoader(this.basePath);</span><br><span class=\"line\">\t\tthis.applicationClassName = applicationClassName;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tthis.application = getApplication();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了上面的那些成员，我们就可以利用Java的反射来实现自定义的Application类的启动（这个类可以方在任意位置，就好比我们的war包可以方在任意位置，只要在tomcat的server.xml中配置好baseApps的路径就好了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void startApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">\tthis.application.getClass().getDeclaredMethod(&quot;start&quot;, null).invoke(this.application, new Object[0]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void stopApplication() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class=\"line\">\tthis.application.getClass().getDeclaredMethod(&quot;stop&quot;, null).invoke(this.application, new Object[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，剩下最后一个问题就是，我们怎么知道我们的类需要加载呢？有2种方式就是主动刷新，还有一种就是程序监听文件夹的文件变动。我们可以利用jdk7之后提供的WatchService来监控文件或者目录的变动情况，一发生变动，则先注销之前的Application 然后再创建一个新的HotSwapClassLoader来启动新的Application。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void registerResourceWatcher() &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tWatchService watchService = FileSystems.getDefault().newWatchService();</span><br><span class=\"line\">\t\t\tPath p = Paths.get(basePath);</span><br><span class=\"line\">\t\t\tp.register(watchService, new WatchEvent.Kind[]&#123;ENTRY_MODIFY, ENTRY_CREATE, ENTRY_DELETE&#125;);</span><br><span class=\"line\">\t\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\t\tWatchKey k = watchService.take();</span><br><span class=\"line\">\t\t\t\tfor (WatchEvent&lt;?&gt; e : k.pollEvents()) &#123;</span><br><span class=\"line\">\t\t\t\t\treloadApplication();</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tk.reset();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-测试\"><a class=\"markdownIt-Anchor\" href=\"#三-测试\"></a> 三、测试</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Application &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Integer version = 46;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 应用的启动入口</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void start() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Start... version=&quot; + version);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 应用的停止入口</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void stop() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Stop... version=&quot; + version);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws IOException, InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnew Bootstrap(&quot;/Users/liaojiacan/Workspace/java/personal/code-snippets/java-language/target/classes&quot;</span><br><span class=\"line\">\t\t\t\t,&quot;com.github.liaojiacan.classloader.app.Application&quot;).boot();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动后，我们修改Application的 version=47，然后rebuild project，这个时候这个文件就会发生改变,输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Start... version=46</span><br><span class=\"line\">Stop... version=46</span><br><span class=\"line\">Start... version=47</span><br></pre></td></tr></table></figure>\n<p>完整代码见Github :<a href=\"https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader\" target=\"_blank\" rel=\"noopener\">https://github.com/liaojiacan/code-snippets/tree/master/java-language/src/main/java/com/github/liaojiacan/classloader</a></p>\n"},{"title":"谈谈多语言设计（一）之客户端多语言与服务端多语言","author":"Jiacan Liao","date":"2018-03-07T03:56:00.000Z","_content":"&emsp;&emsp;2017年的一个风口就是移动互联网的出海，很多公司都战略性地在海外做起了互联网商业化，最近也是接触了一些国际的项目，用户散落在各个国家地区，刚开始大部分是由客户端进行多语言的适配，后来由于产品觉得灵活性太差，于是把部分功能移到服务端来实现，但是发现无论是客户端实现还是服务端实现都存在一些弊端。\n\n## 我们先思考一下以下几个问题：\n1. 完全由服务端实现多语言有什么弊端?\n> 对于大部分应用场景，多语言都可以在服务端实现，但有一种情况不适合使用服务端多语言。比如目标用户语言非唯一，IM群发，推送等业务场景，虽然大部分消息推送服务可以按用户属性或者标签进行推送，服务端可以分开推送来实现，但是对于用户群推地域很分散的应用显然不是很合适。\n\n2. 完全由客户端实现多语言由什么弊端？\n> 大部分情况下都是采用的客户端写多语言配置进行适配，不管是android 还是iOS 还是常见的前端框架都是支持i18n的配置。这种方式有个缺点就是灵活性比较差，修改文案必须发包。\n\n3. 对于移动应用多语言是该客户端做还是服务端做，如何找到一个平衡点？\n>无论是客户端多语言还是服务端多语言都有各自的优劣，主要还是看应用场景。\n个人认为对于移动应用的多语言，应该把两者结合起来使用。对于UI等相对固定的部分采用客户端多语言。对于变动比较大的部分，采用服务端进行多语言的处理，比如名称，描述这些可能会根据运营场景进行调整的信息。\n4. 为什么不采用服务端生成配置客户端加载配置的方式？\n> 这种方式是一种比较灵活的方式，但是对于协议的定义不是很友好（key必须唯一，势必导致接口的返回体变大），而且无论是客户端还是服务端解析也比较耗资源，接口可读性比较差。而且把业务跟多语言的耦合太重，无论是客户端和服务端在编码的时候应该把多语言与业务解构，即便没有多语言部分也不影响业务的执行。\n    \n5. 如果将客户端多语言和服务端多语言结合使用，怎么规范比较适合？\n    >简单来说，就是以下几点:\n\n    - UI部分由客户端实现多语言\n    - 所有客户端主动向服务端拉取的由服务端实现\n    - 对于群发等应用场景，由服务端生成语言包，客户端在一定时机拉取并加载到应用中。","source":"_posts/谈谈多语言设计（一）之-客户端多语言与服务端多语言.md","raw":"title: 谈谈多语言设计（一）之客户端多语言与服务端多语言\nauthor: Jiacan Liao\ntags:\n  - 多语言\n  - i18n\ncategories:\n  - 架构总结\ndate: 2018-03-07 11:56:00\n---\n&emsp;&emsp;2017年的一个风口就是移动互联网的出海，很多公司都战略性地在海外做起了互联网商业化，最近也是接触了一些国际的项目，用户散落在各个国家地区，刚开始大部分是由客户端进行多语言的适配，后来由于产品觉得灵活性太差，于是把部分功能移到服务端来实现，但是发现无论是客户端实现还是服务端实现都存在一些弊端。\n\n## 我们先思考一下以下几个问题：\n1. 完全由服务端实现多语言有什么弊端?\n> 对于大部分应用场景，多语言都可以在服务端实现，但有一种情况不适合使用服务端多语言。比如目标用户语言非唯一，IM群发，推送等业务场景，虽然大部分消息推送服务可以按用户属性或者标签进行推送，服务端可以分开推送来实现，但是对于用户群推地域很分散的应用显然不是很合适。\n\n2. 完全由客户端实现多语言由什么弊端？\n> 大部分情况下都是采用的客户端写多语言配置进行适配，不管是android 还是iOS 还是常见的前端框架都是支持i18n的配置。这种方式有个缺点就是灵活性比较差，修改文案必须发包。\n\n3. 对于移动应用多语言是该客户端做还是服务端做，如何找到一个平衡点？\n>无论是客户端多语言还是服务端多语言都有各自的优劣，主要还是看应用场景。\n个人认为对于移动应用的多语言，应该把两者结合起来使用。对于UI等相对固定的部分采用客户端多语言。对于变动比较大的部分，采用服务端进行多语言的处理，比如名称，描述这些可能会根据运营场景进行调整的信息。\n4. 为什么不采用服务端生成配置客户端加载配置的方式？\n> 这种方式是一种比较灵活的方式，但是对于协议的定义不是很友好（key必须唯一，势必导致接口的返回体变大），而且无论是客户端还是服务端解析也比较耗资源，接口可读性比较差。而且把业务跟多语言的耦合太重，无论是客户端和服务端在编码的时候应该把多语言与业务解构，即便没有多语言部分也不影响业务的执行。\n    \n5. 如果将客户端多语言和服务端多语言结合使用，怎么规范比较适合？\n    >简单来说，就是以下几点:\n\n    - UI部分由客户端实现多语言\n    - 所有客户端主动向服务端拉取的由服务端实现\n    - 对于群发等应用场景，由服务端生成语言包，客户端在一定时机拉取并加载到应用中。","slug":"谈谈多语言设计（一）之-客户端多语言与服务端多语言","published":1,"updated":"2018-03-08T11:10:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8cj0012kg88wpdzu4a0","content":"<p>  2017年的一个风口就是移动互联网的出海，很多公司都战略性地在海外做起了互联网商业化，最近也是接触了一些国际的项目，用户散落在各个国家地区，刚开始大部分是由客户端进行多语言的适配，后来由于产品觉得灵活性太差，于是把部分功能移到服务端来实现，但是发现无论是客户端实现还是服务端实现都存在一些弊端。</p>\n<h2 id=\"我们先思考一下以下几个问题\"><a class=\"markdownIt-Anchor\" href=\"#我们先思考一下以下几个问题\"></a> 我们先思考一下以下几个问题：</h2>\n<ol>\n<li>完全由服务端实现多语言有什么弊端?</li>\n</ol>\n<blockquote>\n<p>对于大部分应用场景，多语言都可以在服务端实现，但有一种情况不适合使用服务端多语言。比如目标用户语言非唯一，IM群发，推送等业务场景，虽然大部分消息推送服务可以按用户属性或者标签进行推送，服务端可以分开推送来实现，但是对于用户群推地域很分散的应用显然不是很合适。</p>\n</blockquote>\n<ol start=\"2\">\n<li>完全由客户端实现多语言由什么弊端？</li>\n</ol>\n<blockquote>\n<p>大部分情况下都是采用的客户端写多语言配置进行适配，不管是android 还是iOS 还是常见的前端框架都是支持i18n的配置。这种方式有个缺点就是灵活性比较差，修改文案必须发包。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于移动应用多语言是该客户端做还是服务端做，如何找到一个平衡点？</li>\n</ol>\n<blockquote>\n<p>无论是客户端多语言还是服务端多语言都有各自的优劣，主要还是看应用场景。<br>\n个人认为对于移动应用的多语言，应该把两者结合起来使用。对于UI等相对固定的部分采用客户端多语言。对于变动比较大的部分，采用服务端进行多语言的处理，比如名称，描述这些可能会根据运营场景进行调整的信息。</p>\n</blockquote>\n<ol start=\"4\">\n<li>为什么不采用服务端生成配置客户端加载配置的方式？</li>\n</ol>\n<blockquote>\n<p>这种方式是一种比较灵活的方式，但是对于协议的定义不是很友好（key必须唯一，势必导致接口的返回体变大），而且无论是客户端还是服务端解析也比较耗资源，接口可读性比较差。而且把业务跟多语言的耦合太重，无论是客户端和服务端在编码的时候应该把多语言与业务解构，即便没有多语言部分也不影响业务的执行。</p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>如果将客户端多语言和服务端多语言结合使用，怎么规范比较适合？</p>\n<blockquote>\n<p>简单来说，就是以下几点:</p>\n</blockquote>\n<ul>\n<li>UI部分由客户端实现多语言</li>\n<li>所有客户端主动向服务端拉取的由服务端实现</li>\n<li>对于群发等应用场景，由服务端生成语言包，客户端在一定时机拉取并加载到应用中。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>  2017年的一个风口就是移动互联网的出海，很多公司都战略性地在海外做起了互联网商业化，最近也是接触了一些国际的项目，用户散落在各个国家地区，刚开始大部分是由客户端进行多语言的适配，后来由于产品觉得灵活性太差，于是把部分功能移到服务端来实现，但是发现无论是客户端实现还是服务端实现都存在一些弊端。</p>\n<h2 id=\"我们先思考一下以下几个问题\"><a class=\"markdownIt-Anchor\" href=\"#我们先思考一下以下几个问题\"></a> 我们先思考一下以下几个问题：</h2>\n<ol>\n<li>完全由服务端实现多语言有什么弊端?</li>\n</ol>\n<blockquote>\n<p>对于大部分应用场景，多语言都可以在服务端实现，但有一种情况不适合使用服务端多语言。比如目标用户语言非唯一，IM群发，推送等业务场景，虽然大部分消息推送服务可以按用户属性或者标签进行推送，服务端可以分开推送来实现，但是对于用户群推地域很分散的应用显然不是很合适。</p>\n</blockquote>\n<ol start=\"2\">\n<li>完全由客户端实现多语言由什么弊端？</li>\n</ol>\n<blockquote>\n<p>大部分情况下都是采用的客户端写多语言配置进行适配，不管是android 还是iOS 还是常见的前端框架都是支持i18n的配置。这种方式有个缺点就是灵活性比较差，修改文案必须发包。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于移动应用多语言是该客户端做还是服务端做，如何找到一个平衡点？</li>\n</ol>\n<blockquote>\n<p>无论是客户端多语言还是服务端多语言都有各自的优劣，主要还是看应用场景。<br>\n个人认为对于移动应用的多语言，应该把两者结合起来使用。对于UI等相对固定的部分采用客户端多语言。对于变动比较大的部分，采用服务端进行多语言的处理，比如名称，描述这些可能会根据运营场景进行调整的信息。</p>\n</blockquote>\n<ol start=\"4\">\n<li>为什么不采用服务端生成配置客户端加载配置的方式？</li>\n</ol>\n<blockquote>\n<p>这种方式是一种比较灵活的方式，但是对于协议的定义不是很友好（key必须唯一，势必导致接口的返回体变大），而且无论是客户端还是服务端解析也比较耗资源，接口可读性比较差。而且把业务跟多语言的耦合太重，无论是客户端和服务端在编码的时候应该把多语言与业务解构，即便没有多语言部分也不影响业务的执行。</p>\n</blockquote>\n<ol start=\"5\">\n<li>\n<p>如果将客户端多语言和服务端多语言结合使用，怎么规范比较适合？</p>\n<blockquote>\n<p>简单来说，就是以下几点:</p>\n</blockquote>\n<ul>\n<li>UI部分由客户端实现多语言</li>\n<li>所有客户端主动向服务端拉取的由服务端实现</li>\n<li>对于群发等应用场景，由服务端生成语言包，客户端在一定时机拉取并加载到应用中。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"谈谈多语言设计（三）Spring-i18n 拓展之自定义MessageSource","author":"Jiacan Liao","date":"2018-04-13T08:08:00.000Z","_content":"&emsp;&emsp;Spring框架中有两个MessageSource的实现，分别是ResourceBundleMessageSource和ReloadableResourceBundleMessageSource，前者第一次初始化就固定下来，后者可以根据配置文件是否发生变进行更新。\n\n&emsp;&emsp;对于Web网页（UI上的文案），这种配置在配置文件的方式是可以接受的，因为一般这些文案都是固定的。但是对于一些需要动态新增配置的场景显然就是不适合了，比如商品信息，抽奖的奖品，直播间的道具，礼物等，这些都是根据运营人员需要动态调整的，显然需要把配置存储在数据库中。\n\n&emsp;&emsp;在写这部分的实现的时候，参考了一个开源项目，[https://github.com/synyx/messagesource](https://github.com/synyx/messagesource)。\n感兴趣的同学，可以在我的Github查看完整的代码。[https://github.com/liaojiacan/spring-i18n-support](https://github.com/liaojiacan/spring-i18n-support)\n\n\n## UML\n\n![upload successful](/images/pasted-3.png)\n\n##  关于MessageSourceProvider\n&emsp;&emsp; 在MessageSource的实现中 ，抽出一个Provider层将存储介质解耦，可以在最后的应用中，选择使用JDBC还是Redis还是远程的配置服务中心的实现。\n```\npublic interface MessageSourceProvider {\n\n\tList<MessageEntry> load();\n\n\tint addMessage(Locale locale,String code,String type,String message);\n\n\tint updateMessage(Locale locale,String code,String type,String message);\n\n\tint deleteMessage(Locale locale,String code);\n\n}\n\n```\n## JdbcMessageSoucreProvider\n&emsp;&emsp; 因为只是简单的对数据进行CURD，所以采用JdbcTemple的方式减少相关的依赖，采用java原生的jdbc也是可以的。\n\n```\n-- ----------------------------\n-- Table structure for i18n_message\n-- ----------------------------\nDROP TABLE IF EXISTS `i18n_message`;\nCREATE TABLE `i18n_message` (\n  `code` varchar(250) NOT NULL COMMENT 'mapping code',\n  `locale` varchar(100) NOT NULL COMMENT 'language tag',\n  `type` varchar(100) DEFAULT NULL COMMENT 'type for group',\n  `message` text NOT NULL COMMENT 'message content',\n  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'last modify time',\n  PRIMARY KEY (`code`,`locale`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='i18n message data';\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n```\npublic class JdbcMessageSoucreProvider implements MessageSourceProvider {\n\n\tprivate JdbcTemplate jdbcTemplate;\n\n\tprotected static final String QUERY_TPL_INSERT_MESSAGE_ENTRY =\n\t\t\t\"INSERT INTO %s (%s, %s, %s, %s) VALUES (?, ?, ?, ?)\";\n\tprotected static final String QUERY_TPL_DELETE_MESSAGE_ENTRY = \"DELETE FROM %s WHERE %s = ? and %s= ?\";\n\tprotected static final String QUERY_TPL_SELECT_MESSAGE_ENTRIES = \"SELECT %s,%s,%s,%s FROM %s\";\n\tprotected static final String QUERY_TPL_UPDATE_MESSAGE_ENTRY = \"UPDATE %s set %s=?,%s=?,%s=? WHERE %s=? and %s=?\";\n\n\tprivate String localeColumn = \"locale\";\n\tprivate String typeColumn = \"type\";\n\tprivate String codeColumn = \"code\";\n\tprivate String messageColumn = \"message\";\n\tprivate String tableName = \"i18n_message\";\n\tprivate String delimiter = \"`\";\n\n\n\t@Override\n\tpublic List<MessageEntry> load() {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplSelectMessageEntries(),\n\t\t\t\taddDelimiter(getCodeColumn()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()),\n\t\t\t\taddDelimiter(getTableName()));\n\t\treturn jdbcTemplate.query(sql,new BeanPropertyRowMapper(MessageEntry.class));\n\t\t// @formatter:on\n\t}\n\n\t@Override\n\tpublic int addMessage(Locale locale, String code, String type, String message) {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplInsertMessageEntry(),\n\t\t\t\taddDelimiter(getTableName()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getCodeColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()));\n\t\t// @formatter:on\n\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),code,type,message);\n\t}\n\n\n\t@Override\n\tpublic int updateMessage(Locale locale, String code, String type, String message) {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplUpdateMessageEntry(),\n\t\t\t\taddDelimiter(getTableName()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()),\n\t\t\t\taddDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));\n\t\t// @formatter:on\n\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),type,message,code,locale.toLanguageTag());\n\t}\n\n\t@Override\n\tpublic int deleteMessage(Locale locale, String code) {\n\t\tString sql = String.format(getQueryTplDeleteMessageEntry(),addDelimiter(getTableName()),addDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));\n\t\treturn jdbcTemplate.update(sql,code,locale.toLanguageTag());\n\t}\n\n\t/**\n\t * Method that \"wraps\" a field-name (or table-name) into the delimiter.\n\t * @param name the name of the field/table\n\t * @return the wrapped field/table\n\t */\n\tprotected String addDelimiter(String name) {\n\t\treturn String.format(\"%s%s%s\", delimiter, name, delimiter);\n\t}\n\n\n\tpublic JdbcTemplate getJdbcTemplate() {\n\t\treturn jdbcTemplate;\n\t}\n\n\tpublic void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic static String getQueryTplInsertMessageEntry() {\n\t\treturn QUERY_TPL_INSERT_MESSAGE_ENTRY;\n\t}\n\n\tpublic static String getQueryTplDeleteMessageEntry() {\n\t\treturn QUERY_TPL_DELETE_MESSAGE_ENTRY;\n\t}\n\n\tpublic static String getQueryTplSelectMessageEntries() {\n\t\treturn QUERY_TPL_SELECT_MESSAGE_ENTRIES;\n\t}\n\n\tpublic static String getQueryTplUpdateMessageEntry() {\n\t\treturn QUERY_TPL_UPDATE_MESSAGE_ENTRY;\n\t}\n\n\tpublic String getLocaleColumn() {\n\t\treturn localeColumn;\n\t}\n\n\tpublic void setLocaleColumn(String localeColumn) {\n\t\tthis.localeColumn = localeColumn;\n\t}\n\n\tpublic String getTypeColumn() {\n\t\treturn typeColumn;\n\t}\n\n\tpublic void setTypeColumn(String typeColumn) {\n\t\tthis.typeColumn = typeColumn;\n\t}\n\n\tpublic String getCodeColumn() {\n\t\treturn codeColumn;\n\t}\n\n\tpublic void setCodeColumn(String codeColumn) {\n\t\tthis.codeColumn = codeColumn;\n\t}\n\n\tpublic String getMessageColumn() {\n\t\treturn messageColumn;\n\t}\n\n\tpublic void setMessageColumn(String messageColumn) {\n\t\tthis.messageColumn = messageColumn;\n\t}\n\n\tpublic String getTableName() {\n\t\treturn tableName;\n\t}\n\n\tpublic void setTableName(String tableName) {\n\t\tthis.tableName = tableName;\n\t}\n\n\tpublic String getDelimiter() {\n\t\treturn delimiter;\n\t}\n\n\tpublic void setDelimiter(String delimiter) {\n\t\tthis.delimiter = delimiter;\n\t}\n```\n\n## RefreshableMessageSource\n&emsp;&emsp;RefreshableMessageSource的实现相对简单，在初始化的时候将MessageSourceProvider的数据解析成MessageFormat存在Map中，解析的时候根据code和locale索引到对应的MessageFormat。\n\n```\n/**\n * @author liaojiacan https://github.com/liaojiacan\n */\npublic class RefreshableMessageSource extends AbstractMessageSource implements Refreshable,InitializingBean{\n\n\tprivate MessageSourceProvider provider;\n\n\t/**\n\t * Setting : return origin code when the message not found.\n\t */\n\tprotected Boolean returnUnresolvedCode = false;\n\n\t/**\n\t * The MessageFormat cache\n\t */\n\tprivate Map<String,Map<Locale,MessageFormat>> messageEntryMap = Collections.emptyMap();\n\n\tpublic RefreshableMessageSource(MessageSourceProvider provider) {\n\t\tthis.provider = provider;\n\t}\n\n\t@Override\n\tpublic void refresh(){\n\t\tList<MessageEntry> messageEntries = provider.load();\n\t\tif(!CollectionUtils.isEmpty(messageEntries)){\n\t\t\tfinal Map<String,Map<Locale,MessageFormat>> finalMap = new HashMap<>();\n\t\t\tmessageEntries.forEach(messageEntry -> {\n\t\t\t\tString code  = messageEntry.getCode();\n\t\t\t\tLocale locale = Locale.forLanguageTag(messageEntry.getLocale());\n\t\t\t\tMap<Locale, MessageFormat> localeMapping = finalMap.get(code);\n\t\t\t\tif(localeMapping == null){\n\t\t\t\t\tlocaleMapping = new HashMap<>();\n\t\t\t\t\tfinalMap.put(code,localeMapping);\n\t\t\t\t}\n\t\t\t\tlocaleMapping.put(locale,createMessageFormat(messageEntry.getMessage(),locale));\n\n\t\t\t});\n\t\t\tmessageEntryMap = finalMap;\n\t\t}\n\t}\n\n\t@Override\n\tprotected MessageFormat resolveCode(String code, Locale locale) {\n\t\tMap<Locale, MessageFormat> localeMessageMap = messageEntryMap.get(code);\n\t\tif(localeMessageMap != null ){\n\t\t\tMessageFormat mf = localeMessageMap.get(locale);\n\t\t\tif(mf!=null){\n\t\t\t\treturn  mf;\n\t\t\t}\n\t\t}\n\t\tif(returnUnresolvedCode){\n\t\t\treturn createMessageFormat(code,locale);\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tthis.refresh();\n\t}\n\n\tpublic MessageSourceProvider getProvider() {\n\t\treturn provider;\n\t}\n\n\tpublic void setProvider(MessageSourceProvider provider) {\n\t\tthis.provider = provider;\n\t}\n\n\tpublic Boolean getReturnUnresolvedCode() {\n\t\treturn returnUnresolvedCode;\n\t}\n\n\tpublic void setReturnUnresolvedCode(Boolean returnUnresolvedCode) {\n\t\tthis.returnUnresolvedCode = returnUnresolvedCode;\n\t}\n}\n```","source":"_posts/谈谈多语言设计（三）Spring-i18n-拓展之自定义MessageSource.md","raw":"title: 谈谈多语言设计（三）Spring-i18n 拓展之自定义MessageSource\nauthor: Jiacan Liao\ntags:\n  - i18n\n  - 多语言\ncategories:\n  - 架构总结\ndate: 2018-04-13 16:08:00\n---\n&emsp;&emsp;Spring框架中有两个MessageSource的实现，分别是ResourceBundleMessageSource和ReloadableResourceBundleMessageSource，前者第一次初始化就固定下来，后者可以根据配置文件是否发生变进行更新。\n\n&emsp;&emsp;对于Web网页（UI上的文案），这种配置在配置文件的方式是可以接受的，因为一般这些文案都是固定的。但是对于一些需要动态新增配置的场景显然就是不适合了，比如商品信息，抽奖的奖品，直播间的道具，礼物等，这些都是根据运营人员需要动态调整的，显然需要把配置存储在数据库中。\n\n&emsp;&emsp;在写这部分的实现的时候，参考了一个开源项目，[https://github.com/synyx/messagesource](https://github.com/synyx/messagesource)。\n感兴趣的同学，可以在我的Github查看完整的代码。[https://github.com/liaojiacan/spring-i18n-support](https://github.com/liaojiacan/spring-i18n-support)\n\n\n## UML\n\n![upload successful](/images/pasted-3.png)\n\n##  关于MessageSourceProvider\n&emsp;&emsp; 在MessageSource的实现中 ，抽出一个Provider层将存储介质解耦，可以在最后的应用中，选择使用JDBC还是Redis还是远程的配置服务中心的实现。\n```\npublic interface MessageSourceProvider {\n\n\tList<MessageEntry> load();\n\n\tint addMessage(Locale locale,String code,String type,String message);\n\n\tint updateMessage(Locale locale,String code,String type,String message);\n\n\tint deleteMessage(Locale locale,String code);\n\n}\n\n```\n## JdbcMessageSoucreProvider\n&emsp;&emsp; 因为只是简单的对数据进行CURD，所以采用JdbcTemple的方式减少相关的依赖，采用java原生的jdbc也是可以的。\n\n```\n-- ----------------------------\n-- Table structure for i18n_message\n-- ----------------------------\nDROP TABLE IF EXISTS `i18n_message`;\nCREATE TABLE `i18n_message` (\n  `code` varchar(250) NOT NULL COMMENT 'mapping code',\n  `locale` varchar(100) NOT NULL COMMENT 'language tag',\n  `type` varchar(100) DEFAULT NULL COMMENT 'type for group',\n  `message` text NOT NULL COMMENT 'message content',\n  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'create time',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'last modify time',\n  PRIMARY KEY (`code`,`locale`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='i18n message data';\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n```\npublic class JdbcMessageSoucreProvider implements MessageSourceProvider {\n\n\tprivate JdbcTemplate jdbcTemplate;\n\n\tprotected static final String QUERY_TPL_INSERT_MESSAGE_ENTRY =\n\t\t\t\"INSERT INTO %s (%s, %s, %s, %s) VALUES (?, ?, ?, ?)\";\n\tprotected static final String QUERY_TPL_DELETE_MESSAGE_ENTRY = \"DELETE FROM %s WHERE %s = ? and %s= ?\";\n\tprotected static final String QUERY_TPL_SELECT_MESSAGE_ENTRIES = \"SELECT %s,%s,%s,%s FROM %s\";\n\tprotected static final String QUERY_TPL_UPDATE_MESSAGE_ENTRY = \"UPDATE %s set %s=?,%s=?,%s=? WHERE %s=? and %s=?\";\n\n\tprivate String localeColumn = \"locale\";\n\tprivate String typeColumn = \"type\";\n\tprivate String codeColumn = \"code\";\n\tprivate String messageColumn = \"message\";\n\tprivate String tableName = \"i18n_message\";\n\tprivate String delimiter = \"`\";\n\n\n\t@Override\n\tpublic List<MessageEntry> load() {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplSelectMessageEntries(),\n\t\t\t\taddDelimiter(getCodeColumn()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()),\n\t\t\t\taddDelimiter(getTableName()));\n\t\treturn jdbcTemplate.query(sql,new BeanPropertyRowMapper(MessageEntry.class));\n\t\t// @formatter:on\n\t}\n\n\t@Override\n\tpublic int addMessage(Locale locale, String code, String type, String message) {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplInsertMessageEntry(),\n\t\t\t\taddDelimiter(getTableName()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getCodeColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()));\n\t\t// @formatter:on\n\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),code,type,message);\n\t}\n\n\n\t@Override\n\tpublic int updateMessage(Locale locale, String code, String type, String message) {\n\t\t// @formatter:off\n\t\tString sql = String.format(getQueryTplUpdateMessageEntry(),\n\t\t\t\taddDelimiter(getTableName()),\n\t\t\t\taddDelimiter(getLocaleColumn()),\n\t\t\t\taddDelimiter(getTypeColumn()),\n\t\t\t\taddDelimiter(getMessageColumn()),\n\t\t\t\taddDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));\n\t\t// @formatter:on\n\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),type,message,code,locale.toLanguageTag());\n\t}\n\n\t@Override\n\tpublic int deleteMessage(Locale locale, String code) {\n\t\tString sql = String.format(getQueryTplDeleteMessageEntry(),addDelimiter(getTableName()),addDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));\n\t\treturn jdbcTemplate.update(sql,code,locale.toLanguageTag());\n\t}\n\n\t/**\n\t * Method that \"wraps\" a field-name (or table-name) into the delimiter.\n\t * @param name the name of the field/table\n\t * @return the wrapped field/table\n\t */\n\tprotected String addDelimiter(String name) {\n\t\treturn String.format(\"%s%s%s\", delimiter, name, delimiter);\n\t}\n\n\n\tpublic JdbcTemplate getJdbcTemplate() {\n\t\treturn jdbcTemplate;\n\t}\n\n\tpublic void setJdbcTemplate(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic static String getQueryTplInsertMessageEntry() {\n\t\treturn QUERY_TPL_INSERT_MESSAGE_ENTRY;\n\t}\n\n\tpublic static String getQueryTplDeleteMessageEntry() {\n\t\treturn QUERY_TPL_DELETE_MESSAGE_ENTRY;\n\t}\n\n\tpublic static String getQueryTplSelectMessageEntries() {\n\t\treturn QUERY_TPL_SELECT_MESSAGE_ENTRIES;\n\t}\n\n\tpublic static String getQueryTplUpdateMessageEntry() {\n\t\treturn QUERY_TPL_UPDATE_MESSAGE_ENTRY;\n\t}\n\n\tpublic String getLocaleColumn() {\n\t\treturn localeColumn;\n\t}\n\n\tpublic void setLocaleColumn(String localeColumn) {\n\t\tthis.localeColumn = localeColumn;\n\t}\n\n\tpublic String getTypeColumn() {\n\t\treturn typeColumn;\n\t}\n\n\tpublic void setTypeColumn(String typeColumn) {\n\t\tthis.typeColumn = typeColumn;\n\t}\n\n\tpublic String getCodeColumn() {\n\t\treturn codeColumn;\n\t}\n\n\tpublic void setCodeColumn(String codeColumn) {\n\t\tthis.codeColumn = codeColumn;\n\t}\n\n\tpublic String getMessageColumn() {\n\t\treturn messageColumn;\n\t}\n\n\tpublic void setMessageColumn(String messageColumn) {\n\t\tthis.messageColumn = messageColumn;\n\t}\n\n\tpublic String getTableName() {\n\t\treturn tableName;\n\t}\n\n\tpublic void setTableName(String tableName) {\n\t\tthis.tableName = tableName;\n\t}\n\n\tpublic String getDelimiter() {\n\t\treturn delimiter;\n\t}\n\n\tpublic void setDelimiter(String delimiter) {\n\t\tthis.delimiter = delimiter;\n\t}\n```\n\n## RefreshableMessageSource\n&emsp;&emsp;RefreshableMessageSource的实现相对简单，在初始化的时候将MessageSourceProvider的数据解析成MessageFormat存在Map中，解析的时候根据code和locale索引到对应的MessageFormat。\n\n```\n/**\n * @author liaojiacan https://github.com/liaojiacan\n */\npublic class RefreshableMessageSource extends AbstractMessageSource implements Refreshable,InitializingBean{\n\n\tprivate MessageSourceProvider provider;\n\n\t/**\n\t * Setting : return origin code when the message not found.\n\t */\n\tprotected Boolean returnUnresolvedCode = false;\n\n\t/**\n\t * The MessageFormat cache\n\t */\n\tprivate Map<String,Map<Locale,MessageFormat>> messageEntryMap = Collections.emptyMap();\n\n\tpublic RefreshableMessageSource(MessageSourceProvider provider) {\n\t\tthis.provider = provider;\n\t}\n\n\t@Override\n\tpublic void refresh(){\n\t\tList<MessageEntry> messageEntries = provider.load();\n\t\tif(!CollectionUtils.isEmpty(messageEntries)){\n\t\t\tfinal Map<String,Map<Locale,MessageFormat>> finalMap = new HashMap<>();\n\t\t\tmessageEntries.forEach(messageEntry -> {\n\t\t\t\tString code  = messageEntry.getCode();\n\t\t\t\tLocale locale = Locale.forLanguageTag(messageEntry.getLocale());\n\t\t\t\tMap<Locale, MessageFormat> localeMapping = finalMap.get(code);\n\t\t\t\tif(localeMapping == null){\n\t\t\t\t\tlocaleMapping = new HashMap<>();\n\t\t\t\t\tfinalMap.put(code,localeMapping);\n\t\t\t\t}\n\t\t\t\tlocaleMapping.put(locale,createMessageFormat(messageEntry.getMessage(),locale));\n\n\t\t\t});\n\t\t\tmessageEntryMap = finalMap;\n\t\t}\n\t}\n\n\t@Override\n\tprotected MessageFormat resolveCode(String code, Locale locale) {\n\t\tMap<Locale, MessageFormat> localeMessageMap = messageEntryMap.get(code);\n\t\tif(localeMessageMap != null ){\n\t\t\tMessageFormat mf = localeMessageMap.get(locale);\n\t\t\tif(mf!=null){\n\t\t\t\treturn  mf;\n\t\t\t}\n\t\t}\n\t\tif(returnUnresolvedCode){\n\t\t\treturn createMessageFormat(code,locale);\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void afterPropertiesSet() throws Exception {\n\t\tthis.refresh();\n\t}\n\n\tpublic MessageSourceProvider getProvider() {\n\t\treturn provider;\n\t}\n\n\tpublic void setProvider(MessageSourceProvider provider) {\n\t\tthis.provider = provider;\n\t}\n\n\tpublic Boolean getReturnUnresolvedCode() {\n\t\treturn returnUnresolvedCode;\n\t}\n\n\tpublic void setReturnUnresolvedCode(Boolean returnUnresolvedCode) {\n\t\tthis.returnUnresolvedCode = returnUnresolvedCode;\n\t}\n}\n```","slug":"谈谈多语言设计（三）Spring-i18n-拓展之自定义MessageSource","published":1,"updated":"2018-04-13T08:11:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8cl0016kg88qr4attyx","content":"<p>  Spring框架中有两个MessageSource的实现，分别是ResourceBundleMessageSource和ReloadableResourceBundleMessageSource，前者第一次初始化就固定下来，后者可以根据配置文件是否发生变进行更新。</p>\n<p>  对于Web网页（UI上的文案），这种配置在配置文件的方式是可以接受的，因为一般这些文案都是固定的。但是对于一些需要动态新增配置的场景显然就是不适合了，比如商品信息，抽奖的奖品，直播间的道具，礼物等，这些都是根据运营人员需要动态调整的，显然需要把配置存储在数据库中。</p>\n<p>  在写这部分的实现的时候，参考了一个开源项目，<a href=\"https://github.com/synyx/messagesource\" target=\"_blank\" rel=\"noopener\">https://github.com/synyx/messagesource</a>。<br>\n感兴趣的同学，可以在我的Github查看完整的代码。<a href=\"https://github.com/liaojiacan/spring-i18n-support\" target=\"_blank\" rel=\"noopener\">https://github.com/liaojiacan/spring-i18n-support</a></p>\n<h2 id=\"uml\"><a class=\"markdownIt-Anchor\" href=\"#uml\"></a> UML</h2>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<h2 id=\"关于messagesourceprovider\"><a class=\"markdownIt-Anchor\" href=\"#关于messagesourceprovider\"></a> 关于MessageSourceProvider</h2>\n<p>   在MessageSource的实现中 ，抽出一个Provider层将存储介质解耦，可以在最后的应用中，选择使用JDBC还是Redis还是远程的配置服务中心的实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface MessageSourceProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;MessageEntry&gt; load();</span><br><span class=\"line\"></span><br><span class=\"line\">\tint addMessage(Locale locale,String code,String type,String message);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint updateMessage(Locale locale,String code,String type,String message);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint deleteMessage(Locale locale,String code);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbcmessagesoucreprovider\"><a class=\"markdownIt-Anchor\" href=\"#jdbcmessagesoucreprovider\"></a> JdbcMessageSoucreProvider</h2>\n<p>   因为只是简单的对数据进行CURD，所以采用JdbcTemple的方式减少相关的依赖，采用java原生的jdbc也是可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- ----------------------------</span><br><span class=\"line\">-- Table structure for i18n_message</span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\">DROP TABLE IF EXISTS `i18n_message`;</span><br><span class=\"line\">CREATE TABLE `i18n_message` (</span><br><span class=\"line\">  `code` varchar(250) NOT NULL COMMENT &apos;mapping code&apos;,</span><br><span class=\"line\">  `locale` varchar(100) NOT NULL COMMENT &apos;language tag&apos;,</span><br><span class=\"line\">  `type` varchar(100) DEFAULT NULL COMMENT &apos;type for group&apos;,</span><br><span class=\"line\">  `message` text NOT NULL COMMENT &apos;message content&apos;,</span><br><span class=\"line\">  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &apos;create time&apos;,</span><br><span class=\"line\">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;last modify time&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`code`,`locale`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;i18n message data&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JdbcMessageSoucreProvider implements MessageSourceProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected static final String QUERY_TPL_INSERT_MESSAGE_ENTRY =</span><br><span class=\"line\">\t\t\t&quot;INSERT INTO %s (%s, %s, %s, %s) VALUES (?, ?, ?, ?)&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_DELETE_MESSAGE_ENTRY = &quot;DELETE FROM %s WHERE %s = ? and %s= ?&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_SELECT_MESSAGE_ENTRIES = &quot;SELECT %s,%s,%s,%s FROM %s&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_UPDATE_MESSAGE_ENTRY = &quot;UPDATE %s set %s=?,%s=?,%s=? WHERE %s=? and %s=?&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String localeColumn = &quot;locale&quot;;</span><br><span class=\"line\">\tprivate String typeColumn = &quot;type&quot;;</span><br><span class=\"line\">\tprivate String codeColumn = &quot;code&quot;;</span><br><span class=\"line\">\tprivate String messageColumn = &quot;message&quot;;</span><br><span class=\"line\">\tprivate String tableName = &quot;i18n_message&quot;;</span><br><span class=\"line\">\tprivate String delimiter = &quot;`&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;MessageEntry&gt; load() &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplSelectMessageEntries(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()));</span><br><span class=\"line\">\t\treturn jdbcTemplate.query(sql,new BeanPropertyRowMapper(MessageEntry.class));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int addMessage(Locale locale, String code, String type, String message) &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplInsertMessageEntry(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),code,type,message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int updateMessage(Locale locale, String code, String type, String message) &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplUpdateMessageEntry(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),type,message,code,locale.toLanguageTag());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int deleteMessage(Locale locale, String code) &#123;</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplDeleteMessageEntry(),addDelimiter(getTableName()),addDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,code,locale.toLanguageTag());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Method that &quot;wraps&quot; a field-name (or table-name) into the delimiter.</span><br><span class=\"line\">\t * @param name the name of the field/table</span><br><span class=\"line\">\t * @return the wrapped field/table</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected String addDelimiter(String name) &#123;</span><br><span class=\"line\">\t\treturn String.format(&quot;%s%s%s&quot;, delimiter, name, delimiter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic JdbcTemplate getJdbcTemplate() &#123;</span><br><span class=\"line\">\t\treturn jdbcTemplate;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class=\"line\">\t\tthis.jdbcTemplate = jdbcTemplate;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplInsertMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_INSERT_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplDeleteMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_DELETE_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplSelectMessageEntries() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_SELECT_MESSAGE_ENTRIES;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplUpdateMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_UPDATE_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getLocaleColumn() &#123;</span><br><span class=\"line\">\t\treturn localeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLocaleColumn(String localeColumn) &#123;</span><br><span class=\"line\">\t\tthis.localeColumn = localeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTypeColumn() &#123;</span><br><span class=\"line\">\t\treturn typeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTypeColumn(String typeColumn) &#123;</span><br><span class=\"line\">\t\tthis.typeColumn = typeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getCodeColumn() &#123;</span><br><span class=\"line\">\t\treturn codeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCodeColumn(String codeColumn) &#123;</span><br><span class=\"line\">\t\tthis.codeColumn = codeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getMessageColumn() &#123;</span><br><span class=\"line\">\t\treturn messageColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setMessageColumn(String messageColumn) &#123;</span><br><span class=\"line\">\t\tthis.messageColumn = messageColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTableName() &#123;</span><br><span class=\"line\">\t\treturn tableName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTableName(String tableName) &#123;</span><br><span class=\"line\">\t\tthis.tableName = tableName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getDelimiter() &#123;</span><br><span class=\"line\">\t\treturn delimiter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setDelimiter(String delimiter) &#123;</span><br><span class=\"line\">\t\tthis.delimiter = delimiter;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"refreshablemessagesource\"><a class=\"markdownIt-Anchor\" href=\"#refreshablemessagesource\"></a> RefreshableMessageSource</h2>\n<p>  RefreshableMessageSource的实现相对简单，在初始化的时候将MessageSourceProvider的数据解析成MessageFormat存在Map中，解析的时候根据code和locale索引到对应的MessageFormat。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author liaojiacan https://github.com/liaojiacan</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RefreshableMessageSource extends AbstractMessageSource implements Refreshable,InitializingBean&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate MessageSourceProvider provider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Setting : return origin code when the message not found.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected Boolean returnUnresolvedCode = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * The MessageFormat cache</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate Map&lt;String,Map&lt;Locale,MessageFormat&gt;&gt; messageEntryMap = Collections.emptyMap();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RefreshableMessageSource(MessageSourceProvider provider) &#123;</span><br><span class=\"line\">\t\tthis.provider = provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void refresh()&#123;</span><br><span class=\"line\">\t\tList&lt;MessageEntry&gt; messageEntries = provider.load();</span><br><span class=\"line\">\t\tif(!CollectionUtils.isEmpty(messageEntries))&#123;</span><br><span class=\"line\">\t\t\tfinal Map&lt;String,Map&lt;Locale,MessageFormat&gt;&gt; finalMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\tmessageEntries.forEach(messageEntry -&gt; &#123;</span><br><span class=\"line\">\t\t\t\tString code  = messageEntry.getCode();</span><br><span class=\"line\">\t\t\t\tLocale locale = Locale.forLanguageTag(messageEntry.getLocale());</span><br><span class=\"line\">\t\t\t\tMap&lt;Locale, MessageFormat&gt; localeMapping = finalMap.get(code);</span><br><span class=\"line\">\t\t\t\tif(localeMapping == null)&#123;</span><br><span class=\"line\">\t\t\t\t\tlocaleMapping = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tfinalMap.put(code,localeMapping);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tlocaleMapping.put(locale,createMessageFormat(messageEntry.getMessage(),locale));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tmessageEntryMap = finalMap;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected MessageFormat resolveCode(String code, Locale locale) &#123;</span><br><span class=\"line\">\t\tMap&lt;Locale, MessageFormat&gt; localeMessageMap = messageEntryMap.get(code);</span><br><span class=\"line\">\t\tif(localeMessageMap != null )&#123;</span><br><span class=\"line\">\t\t\tMessageFormat mf = localeMessageMap.get(locale);</span><br><span class=\"line\">\t\t\tif(mf!=null)&#123;</span><br><span class=\"line\">\t\t\t\treturn  mf;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(returnUnresolvedCode)&#123;</span><br><span class=\"line\">\t\t\treturn createMessageFormat(code,locale);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\">\t\tthis.refresh();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic MessageSourceProvider getProvider() &#123;</span><br><span class=\"line\">\t\treturn provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setProvider(MessageSourceProvider provider) &#123;</span><br><span class=\"line\">\t\tthis.provider = provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Boolean getReturnUnresolvedCode() &#123;</span><br><span class=\"line\">\t\treturn returnUnresolvedCode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setReturnUnresolvedCode(Boolean returnUnresolvedCode) &#123;</span><br><span class=\"line\">\t\tthis.returnUnresolvedCode = returnUnresolvedCode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>  Spring框架中有两个MessageSource的实现，分别是ResourceBundleMessageSource和ReloadableResourceBundleMessageSource，前者第一次初始化就固定下来，后者可以根据配置文件是否发生变进行更新。</p>\n<p>  对于Web网页（UI上的文案），这种配置在配置文件的方式是可以接受的，因为一般这些文案都是固定的。但是对于一些需要动态新增配置的场景显然就是不适合了，比如商品信息，抽奖的奖品，直播间的道具，礼物等，这些都是根据运营人员需要动态调整的，显然需要把配置存储在数据库中。</p>\n<p>  在写这部分的实现的时候，参考了一个开源项目，<a href=\"https://github.com/synyx/messagesource\" target=\"_blank\" rel=\"noopener\">https://github.com/synyx/messagesource</a>。<br>\n感兴趣的同学，可以在我的Github查看完整的代码。<a href=\"https://github.com/liaojiacan/spring-i18n-support\" target=\"_blank\" rel=\"noopener\">https://github.com/liaojiacan/spring-i18n-support</a></p>\n<h2 id=\"uml\"><a class=\"markdownIt-Anchor\" href=\"#uml\"></a> UML</h2>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<h2 id=\"关于messagesourceprovider\"><a class=\"markdownIt-Anchor\" href=\"#关于messagesourceprovider\"></a> 关于MessageSourceProvider</h2>\n<p>   在MessageSource的实现中 ，抽出一个Provider层将存储介质解耦，可以在最后的应用中，选择使用JDBC还是Redis还是远程的配置服务中心的实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface MessageSourceProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;MessageEntry&gt; load();</span><br><span class=\"line\"></span><br><span class=\"line\">\tint addMessage(Locale locale,String code,String type,String message);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint updateMessage(Locale locale,String code,String type,String message);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint deleteMessage(Locale locale,String code);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbcmessagesoucreprovider\"><a class=\"markdownIt-Anchor\" href=\"#jdbcmessagesoucreprovider\"></a> JdbcMessageSoucreProvider</h2>\n<p>   因为只是简单的对数据进行CURD，所以采用JdbcTemple的方式减少相关的依赖，采用java原生的jdbc也是可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- ----------------------------</span><br><span class=\"line\">-- Table structure for i18n_message</span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\">DROP TABLE IF EXISTS `i18n_message`;</span><br><span class=\"line\">CREATE TABLE `i18n_message` (</span><br><span class=\"line\">  `code` varchar(250) NOT NULL COMMENT &apos;mapping code&apos;,</span><br><span class=\"line\">  `locale` varchar(100) NOT NULL COMMENT &apos;language tag&apos;,</span><br><span class=\"line\">  `type` varchar(100) DEFAULT NULL COMMENT &apos;type for group&apos;,</span><br><span class=\"line\">  `message` text NOT NULL COMMENT &apos;message content&apos;,</span><br><span class=\"line\">  `create_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT &apos;create time&apos;,</span><br><span class=\"line\">  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &apos;last modify time&apos;,</span><br><span class=\"line\">  PRIMARY KEY (`code`,`locale`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;i18n message data&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JdbcMessageSoucreProvider implements MessageSourceProvider &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected static final String QUERY_TPL_INSERT_MESSAGE_ENTRY =</span><br><span class=\"line\">\t\t\t&quot;INSERT INTO %s (%s, %s, %s, %s) VALUES (?, ?, ?, ?)&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_DELETE_MESSAGE_ENTRY = &quot;DELETE FROM %s WHERE %s = ? and %s= ?&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_SELECT_MESSAGE_ENTRIES = &quot;SELECT %s,%s,%s,%s FROM %s&quot;;</span><br><span class=\"line\">\tprotected static final String QUERY_TPL_UPDATE_MESSAGE_ENTRY = &quot;UPDATE %s set %s=?,%s=?,%s=? WHERE %s=? and %s=?&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String localeColumn = &quot;locale&quot;;</span><br><span class=\"line\">\tprivate String typeColumn = &quot;type&quot;;</span><br><span class=\"line\">\tprivate String codeColumn = &quot;code&quot;;</span><br><span class=\"line\">\tprivate String messageColumn = &quot;message&quot;;</span><br><span class=\"line\">\tprivate String tableName = &quot;i18n_message&quot;;</span><br><span class=\"line\">\tprivate String delimiter = &quot;`&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;MessageEntry&gt; load() &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplSelectMessageEntries(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()));</span><br><span class=\"line\">\t\treturn jdbcTemplate.query(sql,new BeanPropertyRowMapper(MessageEntry.class));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int addMessage(Locale locale, String code, String type, String message) &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplInsertMessageEntry(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),code,type,message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int updateMessage(Locale locale, String code, String type, String message) &#123;</span><br><span class=\"line\">\t\t// @formatter:off</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplUpdateMessageEntry(),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTableName()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getLocaleColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getTypeColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getMessageColumn()),</span><br><span class=\"line\">\t\t\t\taddDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));</span><br><span class=\"line\">\t\t// @formatter:on</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,locale.toLanguageTag(),type,message,code,locale.toLanguageTag());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int deleteMessage(Locale locale, String code) &#123;</span><br><span class=\"line\">\t\tString sql = String.format(getQueryTplDeleteMessageEntry(),addDelimiter(getTableName()),addDelimiter(getCodeColumn()),addDelimiter(getLocaleColumn()));</span><br><span class=\"line\">\t\treturn jdbcTemplate.update(sql,code,locale.toLanguageTag());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Method that &quot;wraps&quot; a field-name (or table-name) into the delimiter.</span><br><span class=\"line\">\t * @param name the name of the field/table</span><br><span class=\"line\">\t * @return the wrapped field/table</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected String addDelimiter(String name) &#123;</span><br><span class=\"line\">\t\treturn String.format(&quot;%s%s%s&quot;, delimiter, name, delimiter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic JdbcTemplate getJdbcTemplate() &#123;</span><br><span class=\"line\">\t\treturn jdbcTemplate;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class=\"line\">\t\tthis.jdbcTemplate = jdbcTemplate;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplInsertMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_INSERT_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplDeleteMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_DELETE_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplSelectMessageEntries() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_SELECT_MESSAGE_ENTRIES;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static String getQueryTplUpdateMessageEntry() &#123;</span><br><span class=\"line\">\t\treturn QUERY_TPL_UPDATE_MESSAGE_ENTRY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getLocaleColumn() &#123;</span><br><span class=\"line\">\t\treturn localeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLocaleColumn(String localeColumn) &#123;</span><br><span class=\"line\">\t\tthis.localeColumn = localeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTypeColumn() &#123;</span><br><span class=\"line\">\t\treturn typeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTypeColumn(String typeColumn) &#123;</span><br><span class=\"line\">\t\tthis.typeColumn = typeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getCodeColumn() &#123;</span><br><span class=\"line\">\t\treturn codeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setCodeColumn(String codeColumn) &#123;</span><br><span class=\"line\">\t\tthis.codeColumn = codeColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getMessageColumn() &#123;</span><br><span class=\"line\">\t\treturn messageColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setMessageColumn(String messageColumn) &#123;</span><br><span class=\"line\">\t\tthis.messageColumn = messageColumn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getTableName() &#123;</span><br><span class=\"line\">\t\treturn tableName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTableName(String tableName) &#123;</span><br><span class=\"line\">\t\tthis.tableName = tableName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getDelimiter() &#123;</span><br><span class=\"line\">\t\treturn delimiter;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setDelimiter(String delimiter) &#123;</span><br><span class=\"line\">\t\tthis.delimiter = delimiter;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"refreshablemessagesource\"><a class=\"markdownIt-Anchor\" href=\"#refreshablemessagesource\"></a> RefreshableMessageSource</h2>\n<p>  RefreshableMessageSource的实现相对简单，在初始化的时候将MessageSourceProvider的数据解析成MessageFormat存在Map中，解析的时候根据code和locale索引到对应的MessageFormat。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @author liaojiacan https://github.com/liaojiacan</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class RefreshableMessageSource extends AbstractMessageSource implements Refreshable,InitializingBean&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate MessageSourceProvider provider;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Setting : return origin code when the message not found.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprotected Boolean returnUnresolvedCode = false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * The MessageFormat cache</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tprivate Map&lt;String,Map&lt;Locale,MessageFormat&gt;&gt; messageEntryMap = Collections.emptyMap();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic RefreshableMessageSource(MessageSourceProvider provider) &#123;</span><br><span class=\"line\">\t\tthis.provider = provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void refresh()&#123;</span><br><span class=\"line\">\t\tList&lt;MessageEntry&gt; messageEntries = provider.load();</span><br><span class=\"line\">\t\tif(!CollectionUtils.isEmpty(messageEntries))&#123;</span><br><span class=\"line\">\t\t\tfinal Map&lt;String,Map&lt;Locale,MessageFormat&gt;&gt; finalMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\tmessageEntries.forEach(messageEntry -&gt; &#123;</span><br><span class=\"line\">\t\t\t\tString code  = messageEntry.getCode();</span><br><span class=\"line\">\t\t\t\tLocale locale = Locale.forLanguageTag(messageEntry.getLocale());</span><br><span class=\"line\">\t\t\t\tMap&lt;Locale, MessageFormat&gt; localeMapping = finalMap.get(code);</span><br><span class=\"line\">\t\t\t\tif(localeMapping == null)&#123;</span><br><span class=\"line\">\t\t\t\t\tlocaleMapping = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tfinalMap.put(code,localeMapping);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tlocaleMapping.put(locale,createMessageFormat(messageEntry.getMessage(),locale));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tmessageEntryMap = finalMap;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tprotected MessageFormat resolveCode(String code, Locale locale) &#123;</span><br><span class=\"line\">\t\tMap&lt;Locale, MessageFormat&gt; localeMessageMap = messageEntryMap.get(code);</span><br><span class=\"line\">\t\tif(localeMessageMap != null )&#123;</span><br><span class=\"line\">\t\t\tMessageFormat mf = localeMessageMap.get(locale);</span><br><span class=\"line\">\t\t\tif(mf!=null)&#123;</span><br><span class=\"line\">\t\t\t\treturn  mf;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(returnUnresolvedCode)&#123;</span><br><span class=\"line\">\t\t\treturn createMessageFormat(code,locale);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void afterPropertiesSet() throws Exception &#123;</span><br><span class=\"line\">\t\tthis.refresh();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic MessageSourceProvider getProvider() &#123;</span><br><span class=\"line\">\t\treturn provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setProvider(MessageSourceProvider provider) &#123;</span><br><span class=\"line\">\t\tthis.provider = provider;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Boolean getReturnUnresolvedCode() &#123;</span><br><span class=\"line\">\t\treturn returnUnresolvedCode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setReturnUnresolvedCode(Boolean returnUnresolvedCode) &#123;</span><br><span class=\"line\">\t\tthis.returnUnresolvedCode = returnUnresolvedCode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"谈谈多语言设计（二）之Spring多语言","author":"Jiacan Liao","date":"2018-03-08T11:07:00.000Z","_content":"&emsp;&emsp;现在大部分成熟的web框架默认就支持多语言，如果业务比较简单，使用框架自身的多语言支持就可以了。本文将以SpringMvc为例介绍一下JavaWeb的多语言中的一些关键类。\n## 关键字\n- i18n\n- Locale\n- LocaleContext\n- MessageSource\n\n## I18N\n&emsp;&emsp; i18n(其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数),除了i18n还有L10n、g11n、m17n。\n\n## Locale\n&emsp;&emsp;Locale是区域信息，通常locale信息包含应该语言信息和区域标识符，如zh_CN:zh为中文,CN为中国的国家代码。常见的Locale代码可以上网获取。[ Locale Codes](https://www.science.co.il/language/Locale-codes.php)。java中的Locale.java 也定义了常见的区域信息。我们应该尽量使用Locale类型来表达地域信息变量，不应该使用String类型\n\n```\n static public final Locale ENGLISH = createConstant(\"en\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale FRENCH = createConstant(\"fr\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale GERMAN = createConstant(\"de\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale ITALIAN = createConstant(\"it\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale JAPANESE = createConstant(\"ja\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale KOREAN = createConstant(\"ko\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale CHINESE = createConstant(\"zh\", \"\");\n```\n\n\n```\n //从Locale的构造方法中，也看出Locale中可包含语言（language）,国家(country),变体（variant）\n public Locale(String language, String country, String variant) {\n        if (language== null || country == null || variant == null) {\n            throw new NullPointerException();\n        }\n        baseLocale = BaseLocale.getInstance(convertOldISOCodes(language), \"\", country, variant);\n        localeExtensions = getCompatibilityExtensions(language, \"\", country, variant);\n}\n```\n## LocaleContext\n&emsp;&emsp; Spring中存储用户地域信息的上下文，LocaleContext中采用的是ThreadLocal变量来存储信息，线程隔离，这样就可以让locale参数从各层的方法参数中移除。我们在写业务代码时也尽量不要将Locale参数通过方法参数中传入，利用LocaleContext可以让代码显得更优雅点。此外Spring也提供一些LocaleChangeInterceptor 的实现，并不需要我们自己维护这些信息。\n- AcceptHeaderLocaleResolver  通过Accept-Language加载locale信息\n- CookieLocaleResolver 通过Cookie加载locale信息\n- FixedLocaleResolver  全局静态的，返回一个默认的Locale\n- SessionLocaleResolver 通过SessionLocaleResolver加载locale信息\n\n## MessageSource\n&emsp;&emsp; 对于多语言的翻译，无非就是先定义一些key，然后根据给这些key配置各种locale对应的文本。而Spring中的MessageSource就是维护这些配置信息的组件，Spring中有ResourceBundleMessageSource 和 ReloadableResourceBundleMessageSource的实现，可以将多语言的配置在${basename}_${locale}.properties文件中。ResourceBundleMessageSource 每次修改配置需要重启服务才能生效，而ReloadableResourceBundleMessageSource可以热更新。\n\n&emsp;&emsp; 当然我们也可以自己实现一个MessageSource从DB或者从其他存储源加载配置，后面我将单独写一篇文章介绍如何自定义MessageSource进行拓展的。\n\n\n## 多语言的处理流程\n\n![upload successful](/images/pasted-1.png)","source":"_posts/谈谈多语言设计（二）之Spring多语言.md","raw":"title: 谈谈多语言设计（二）之Spring多语言\nauthor: Jiacan Liao\ntags:\n  - i18n\n  - 多语言\ncategories:\n  - 架构总结\ndate: 2018-03-08 19:07:00\n---\n&emsp;&emsp;现在大部分成熟的web框架默认就支持多语言，如果业务比较简单，使用框架自身的多语言支持就可以了。本文将以SpringMvc为例介绍一下JavaWeb的多语言中的一些关键类。\n## 关键字\n- i18n\n- Locale\n- LocaleContext\n- MessageSource\n\n## I18N\n&emsp;&emsp; i18n(其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数),除了i18n还有L10n、g11n、m17n。\n\n## Locale\n&emsp;&emsp;Locale是区域信息，通常locale信息包含应该语言信息和区域标识符，如zh_CN:zh为中文,CN为中国的国家代码。常见的Locale代码可以上网获取。[ Locale Codes](https://www.science.co.il/language/Locale-codes.php)。java中的Locale.java 也定义了常见的区域信息。我们应该尽量使用Locale类型来表达地域信息变量，不应该使用String类型\n\n```\n static public final Locale ENGLISH = createConstant(\"en\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale FRENCH = createConstant(\"fr\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale GERMAN = createConstant(\"de\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale ITALIAN = createConstant(\"it\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale JAPANESE = createConstant(\"ja\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale KOREAN = createConstant(\"ko\", \"\");\n\n    /** Useful constant for language.\n     */\n    static public final Locale CHINESE = createConstant(\"zh\", \"\");\n```\n\n\n```\n //从Locale的构造方法中，也看出Locale中可包含语言（language）,国家(country),变体（variant）\n public Locale(String language, String country, String variant) {\n        if (language== null || country == null || variant == null) {\n            throw new NullPointerException();\n        }\n        baseLocale = BaseLocale.getInstance(convertOldISOCodes(language), \"\", country, variant);\n        localeExtensions = getCompatibilityExtensions(language, \"\", country, variant);\n}\n```\n## LocaleContext\n&emsp;&emsp; Spring中存储用户地域信息的上下文，LocaleContext中采用的是ThreadLocal变量来存储信息，线程隔离，这样就可以让locale参数从各层的方法参数中移除。我们在写业务代码时也尽量不要将Locale参数通过方法参数中传入，利用LocaleContext可以让代码显得更优雅点。此外Spring也提供一些LocaleChangeInterceptor 的实现，并不需要我们自己维护这些信息。\n- AcceptHeaderLocaleResolver  通过Accept-Language加载locale信息\n- CookieLocaleResolver 通过Cookie加载locale信息\n- FixedLocaleResolver  全局静态的，返回一个默认的Locale\n- SessionLocaleResolver 通过SessionLocaleResolver加载locale信息\n\n## MessageSource\n&emsp;&emsp; 对于多语言的翻译，无非就是先定义一些key，然后根据给这些key配置各种locale对应的文本。而Spring中的MessageSource就是维护这些配置信息的组件，Spring中有ResourceBundleMessageSource 和 ReloadableResourceBundleMessageSource的实现，可以将多语言的配置在${basename}_${locale}.properties文件中。ResourceBundleMessageSource 每次修改配置需要重启服务才能生效，而ReloadableResourceBundleMessageSource可以热更新。\n\n&emsp;&emsp; 当然我们也可以自己实现一个MessageSource从DB或者从其他存储源加载配置，后面我将单独写一篇文章介绍如何自定义MessageSource进行拓展的。\n\n\n## 多语言的处理流程\n\n![upload successful](/images/pasted-1.png)","slug":"谈谈多语言设计（二）之Spring多语言","published":1,"updated":"2018-03-08T11:09:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvysq8cm0017kg88txbm9qm1","content":"<p>  现在大部分成熟的web框架默认就支持多语言，如果业务比较简单，使用框架自身的多语言支持就可以了。本文将以SpringMvc为例介绍一下JavaWeb的多语言中的一些关键类。</p>\n<h2 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h2>\n<ul>\n<li>i18n</li>\n<li>Locale</li>\n<li>LocaleContext</li>\n<li>MessageSource</li>\n</ul>\n<h2 id=\"i18n\"><a class=\"markdownIt-Anchor\" href=\"#i18n\"></a> I18N</h2>\n<p>   i18n(其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数),除了i18n还有L10n、g11n、m17n。</p>\n<h2 id=\"locale\"><a class=\"markdownIt-Anchor\" href=\"#locale\"></a> Locale</h2>\n<p>  Locale是区域信息，通常locale信息包含应该语言信息和区域标识符，如zh_CN:zh为中文,CN为中国的国家代码。常见的Locale代码可以上网获取。<a href=\"https://www.science.co.il/language/Locale-codes.php\" target=\"_blank\" rel=\"noopener\"> Locale Codes</a>。java中的Locale.java 也定义了常见的区域信息。我们应该尽量使用Locale类型来表达地域信息变量，不应该使用String类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static public final Locale ENGLISH = createConstant(&quot;en&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale FRENCH = createConstant(&quot;fr&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale GERMAN = createConstant(&quot;de&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale ITALIAN = createConstant(&quot;it&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale JAPANESE = createConstant(&quot;ja&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale KOREAN = createConstant(&quot;ko&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale CHINESE = createConstant(&quot;zh&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //从Locale的构造方法中，也看出Locale中可包含语言（language）,国家(country),变体（variant）</span><br><span class=\"line\"> public Locale(String language, String country, String variant) &#123;</span><br><span class=\"line\">        if (language== null || country == null || variant == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        baseLocale = BaseLocale.getInstance(convertOldISOCodes(language), &quot;&quot;, country, variant);</span><br><span class=\"line\">        localeExtensions = getCompatibilityExtensions(language, &quot;&quot;, country, variant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"localecontext\"><a class=\"markdownIt-Anchor\" href=\"#localecontext\"></a> LocaleContext</h2>\n<p>   Spring中存储用户地域信息的上下文，LocaleContext中采用的是ThreadLocal变量来存储信息，线程隔离，这样就可以让locale参数从各层的方法参数中移除。我们在写业务代码时也尽量不要将Locale参数通过方法参数中传入，利用LocaleContext可以让代码显得更优雅点。此外Spring也提供一些LocaleChangeInterceptor 的实现，并不需要我们自己维护这些信息。</p>\n<ul>\n<li>AcceptHeaderLocaleResolver  通过Accept-Language加载locale信息</li>\n<li>CookieLocaleResolver 通过Cookie加载locale信息</li>\n<li>FixedLocaleResolver  全局静态的，返回一个默认的Locale</li>\n<li>SessionLocaleResolver 通过SessionLocaleResolver加载locale信息</li>\n</ul>\n<h2 id=\"messagesource\"><a class=\"markdownIt-Anchor\" href=\"#messagesource\"></a> MessageSource</h2>\n<p>   对于多语言的翻译，无非就是先定义一些key，然后根据给这些key配置各种locale对应的文本。而Spring中的MessageSource就是维护这些配置信息的组件，Spring中有ResourceBundleMessageSource 和 ReloadableResourceBundleMessageSource的实现，可以将多语言的配置在<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected group after &#039;_&#039; at position 11: {basename}_̲\">{basename}_</span>{locale}.properties文件中。ResourceBundleMessageSource 每次修改配置需要重启服务才能生效，而ReloadableResourceBundleMessageSource可以热更新。</p>\n<p>   当然我们也可以自己实现一个MessageSource从DB或者从其他存储源加载配置，后面我将单独写一篇文章介绍如何自定义MessageSource进行拓展的。</p>\n<h2 id=\"多语言的处理流程\"><a class=\"markdownIt-Anchor\" href=\"#多语言的处理流程\"></a> 多语言的处理流程</h2>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>  现在大部分成熟的web框架默认就支持多语言，如果业务比较简单，使用框架自身的多语言支持就可以了。本文将以SpringMvc为例介绍一下JavaWeb的多语言中的一些关键类。</p>\n<h2 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h2>\n<ul>\n<li>i18n</li>\n<li>Locale</li>\n<li>LocaleContext</li>\n<li>MessageSource</li>\n</ul>\n<h2 id=\"i18n\"><a class=\"markdownIt-Anchor\" href=\"#i18n\"></a> I18N</h2>\n<p>   i18n(其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数),除了i18n还有L10n、g11n、m17n。</p>\n<h2 id=\"locale\"><a class=\"markdownIt-Anchor\" href=\"#locale\"></a> Locale</h2>\n<p>  Locale是区域信息，通常locale信息包含应该语言信息和区域标识符，如zh_CN:zh为中文,CN为中国的国家代码。常见的Locale代码可以上网获取。<a href=\"https://www.science.co.il/language/Locale-codes.php\" target=\"_blank\" rel=\"noopener\"> Locale Codes</a>。java中的Locale.java 也定义了常见的区域信息。我们应该尽量使用Locale类型来表达地域信息变量，不应该使用String类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static public final Locale ENGLISH = createConstant(&quot;en&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale FRENCH = createConstant(&quot;fr&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale GERMAN = createConstant(&quot;de&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale ITALIAN = createConstant(&quot;it&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale JAPANESE = createConstant(&quot;ja&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale KOREAN = createConstant(&quot;ko&quot;, &quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   /** Useful constant for language.</span><br><span class=\"line\">    */</span><br><span class=\"line\">   static public final Locale CHINESE = createConstant(&quot;zh&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //从Locale的构造方法中，也看出Locale中可包含语言（language）,国家(country),变体（variant）</span><br><span class=\"line\"> public Locale(String language, String country, String variant) &#123;</span><br><span class=\"line\">        if (language== null || country == null || variant == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        baseLocale = BaseLocale.getInstance(convertOldISOCodes(language), &quot;&quot;, country, variant);</span><br><span class=\"line\">        localeExtensions = getCompatibilityExtensions(language, &quot;&quot;, country, variant);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"localecontext\"><a class=\"markdownIt-Anchor\" href=\"#localecontext\"></a> LocaleContext</h2>\n<p>   Spring中存储用户地域信息的上下文，LocaleContext中采用的是ThreadLocal变量来存储信息，线程隔离，这样就可以让locale参数从各层的方法参数中移除。我们在写业务代码时也尽量不要将Locale参数通过方法参数中传入，利用LocaleContext可以让代码显得更优雅点。此外Spring也提供一些LocaleChangeInterceptor 的实现，并不需要我们自己维护这些信息。</p>\n<ul>\n<li>AcceptHeaderLocaleResolver  通过Accept-Language加载locale信息</li>\n<li>CookieLocaleResolver 通过Cookie加载locale信息</li>\n<li>FixedLocaleResolver  全局静态的，返回一个默认的Locale</li>\n<li>SessionLocaleResolver 通过SessionLocaleResolver加载locale信息</li>\n</ul>\n<h2 id=\"messagesource\"><a class=\"markdownIt-Anchor\" href=\"#messagesource\"></a> MessageSource</h2>\n<p>   对于多语言的翻译，无非就是先定义一些key，然后根据给这些key配置各种locale对应的文本。而Spring中的MessageSource就是维护这些配置信息的组件，Spring中有ResourceBundleMessageSource 和 ReloadableResourceBundleMessageSource的实现，可以将多语言的配置在<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected group after &#039;_&#039; at position 11: {basename}_̲\">{basename}_</span>{locale}.properties文件中。ResourceBundleMessageSource 每次修改配置需要重启服务才能生效，而ReloadableResourceBundleMessageSource可以热更新。</p>\n<p>   当然我们也可以自己实现一个MessageSource从DB或者从其他存储源加载配置，后面我将单独写一篇文章介绍如何自定义MessageSource进行拓展的。</p>\n<h2 id=\"多语言的处理流程\"><a class=\"markdownIt-Anchor\" href=\"#多语言的处理流程\"></a> 多语言的处理流程</h2>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvysq8b60001kg88zwqgecna","category_id":"cjvysq8bf0004kg8819swj8ct","_id":"cjvysq8bs000dkg886vgddvb9"},{"post_id":"cjvysq8bc0003kg88phingq15","category_id":"cjvysq8bp0009kg88hd3mwubf","_id":"cjvysq8bw000kkg884lm3c4p2"},{"post_id":"cjvysq8bk0006kg88my4tzfmy","category_id":"cjvysq8bt000ekg885d2kk008","_id":"cjvysq8c1000qkg88ry5xeho9"},{"post_id":"cjvysq8bz000pkg88b5nzhzj8","category_id":"cjvysq8bp0009kg88hd3mwubf","_id":"cjvysq8ci000wkg881rkhzgue"},{"post_id":"cjvysq8bn0008kg88wpcmjid5","category_id":"cjvysq8c1000rkg880yhzci5x","_id":"cjvysq8ck0013kg885elr9lmw"},{"post_id":"cjvysq8bq000bkg88z6lxjmda","category_id":"cjvysq8ci000xkg88lah1wk9h","_id":"cjvysq8cn0018kg88iz1064em"},{"post_id":"cjvysq8bt000gkg88hwnp4lch","category_id":"cjvysq8ck0014kg88ftcjsv5w","_id":"cjvysq8co001dkg8898oxhyhd"},{"post_id":"cjvysq8by000nkg88wxo27km9","category_id":"cjvysq8cn0019kg88ivt3lakl","_id":"cjvysq8cp001hkg88zsf1vbij"},{"post_id":"cjvysq8bm0007kg88cwot7ql4","category_id":"cjvysq8bw000lkg88p2av9i5k","_id":"cjvysq8cq001kkg880beqiv0q"},{"post_id":"cjvysq8bm0007kg88cwot7ql4","category_id":"cjvysq8co001ekg889nb9n9w2","_id":"cjvysq8cq001nkg88q3a1ewls"},{"post_id":"cjvysq8cg000vkg88wdhr3piq","category_id":"cjvysq8cp001ikg88p55bn0hu","_id":"cjvysq8cr001okg88wgjfj0kz"},{"post_id":"cjvysq8ci0010kg88l6q6szrk","category_id":"cjvysq8cq001lkg88cxci9ddx","_id":"cjvysq8cs001tkg88tcyjwvwk"},{"post_id":"cjvysq8cj0012kg88wpdzu4a0","category_id":"cjvysq8cr001pkg884a34wfhi","_id":"cjvysq8cw001ykg88s5fiyvys"},{"post_id":"cjvysq8cl0016kg88qr4attyx","category_id":"cjvysq8cr001pkg884a34wfhi","_id":"cjvysq8cx0021kg886a4j5k39"},{"post_id":"cjvysq8cm0017kg88txbm9qm1","category_id":"cjvysq8cr001pkg884a34wfhi","_id":"cjvysq8cy0024kg88cjuw795j"}],"PostTag":[{"post_id":"cjvysq8b60001kg88zwqgecna","tag_id":"cjvysq8bj0005kg88hzlxuhll","_id":"cjvysq8bv000hkg88272xvg0w"},{"post_id":"cjvysq8b60001kg88zwqgecna","tag_id":"cjvysq8bp000akg88zcfk3u1k","_id":"cjvysq8bw000jkg88v7p6mivg"},{"post_id":"cjvysq8bc0003kg88phingq15","tag_id":"cjvysq8bt000fkg88fa0k856h","_id":"cjvysq8bz000okg88b5jslufb"},{"post_id":"cjvysq8bk0006kg88my4tzfmy","tag_id":"cjvysq8bx000mkg88rjs48ezi","_id":"cjvysq8ci000zkg88jilzqfm3"},{"post_id":"cjvysq8bk0006kg88my4tzfmy","tag_id":"cjvysq8c1000skg88ljcbfp7h","_id":"cjvysq8cj0011kg882m5g31c0"},{"post_id":"cjvysq8bm0007kg88cwot7ql4","tag_id":"cjvysq8ci000ykg8882ywk22l","_id":"cjvysq8co001bkg888n3q4lzl"},{"post_id":"cjvysq8bm0007kg88cwot7ql4","tag_id":"cjvysq8cl0015kg88y1tan0wt","_id":"cjvysq8co001ckg88bh9ff54m"},{"post_id":"cjvysq8bn0008kg88wpcmjid5","tag_id":"cjvysq8cn001akg88p0bmh2lu","_id":"cjvysq8cp001gkg88bfs0dx5e"},{"post_id":"cjvysq8bq000bkg88z6lxjmda","tag_id":"cjvysq8co001fkg88ysnzfu6c","_id":"cjvysq8cs001rkg88zlnrsu6c"},{"post_id":"cjvysq8bq000bkg88z6lxjmda","tag_id":"cjvysq8cp001jkg88zbp5iog7","_id":"cjvysq8cs001skg88x5r7st5y"},{"post_id":"cjvysq8bq000bkg88z6lxjmda","tag_id":"cjvysq8cq001mkg88jm06ox5i","_id":"cjvysq8cv001wkg88simopx7b"},{"post_id":"cjvysq8br000ckg88baz1mxhh","tag_id":"cjvysq8cr001qkg88syu0y88h","_id":"cjvysq8cx0020kg88uqyzpcuq"},{"post_id":"cjvysq8br000ckg88baz1mxhh","tag_id":"cjvysq8ct001vkg88317hmamt","_id":"cjvysq8cx0022kg88rzgq5as3"},{"post_id":"cjvysq8bt000gkg88hwnp4lch","tag_id":"cjvysq8cx001zkg88zkumbu20","_id":"cjvysq8cz0026kg88b5fl4wpb"},{"post_id":"cjvysq8bt000gkg88hwnp4lch","tag_id":"cjvysq8cx0023kg88mk8vhf8l","_id":"cjvysq8cz0027kg888xbtxsw1"},{"post_id":"cjvysq8by000nkg88wxo27km9","tag_id":"cjvysq8cy0025kg88ydp66wuf","_id":"cjvysq8d0002bkg88mfqvcvgw"},{"post_id":"cjvysq8by000nkg88wxo27km9","tag_id":"cjvysq8cz0028kg88innkiqyk","_id":"cjvysq8d1002ckg88ubf6bw0l"},{"post_id":"cjvysq8by000nkg88wxo27km9","tag_id":"cjvysq8d00029kg88aw7395wr","_id":"cjvysq8d1002ekg88wzs9htai"},{"post_id":"cjvysq8bz000pkg88b5nzhzj8","tag_id":"cjvysq8cr001qkg88syu0y88h","_id":"cjvysq8d1002fkg881oznkckg"},{"post_id":"cjvysq8bz000pkg88b5nzhzj8","tag_id":"cjvysq8bt000fkg88fa0k856h","_id":"cjvysq8d1002hkg88gq2zm334"},{"post_id":"cjvysq8c1000tkg88xinjn7ey","tag_id":"cjvysq8d1002dkg88tzwc386r","_id":"cjvysq8d2002jkg887uek5xh8"},{"post_id":"cjvysq8c1000tkg88xinjn7ey","tag_id":"cjvysq8d1002gkg88yp5zkqwc","_id":"cjvysq8d2002kkg887gytvu0u"},{"post_id":"cjvysq8c3000ukg88qlsfnj39","tag_id":"cjvysq8d1002gkg88yp5zkqwc","_id":"cjvysq8d3002nkg88iw245rat"},{"post_id":"cjvysq8c3000ukg88qlsfnj39","tag_id":"cjvysq8d1002dkg88tzwc386r","_id":"cjvysq8d4002okg88fyv4rkiq"},{"post_id":"cjvysq8cg000vkg88wdhr3piq","tag_id":"cjvysq8ct001vkg88317hmamt","_id":"cjvysq8d5002qkg88ckiv56bc"},{"post_id":"cjvysq8ci0010kg88l6q6szrk","tag_id":"cjvysq8d4002pkg88n6hrngi3","_id":"cjvysq8d5002tkg882po496cg"},{"post_id":"cjvysq8ci0010kg88l6q6szrk","tag_id":"cjvysq8d5002rkg880t2ovpxa","_id":"cjvysq8d5002ukg88kc2qezcr"},{"post_id":"cjvysq8cj0012kg88wpdzu4a0","tag_id":"cjvysq8d5002skg88d0v2098h","_id":"cjvysq8d7002xkg88fat4ch79"},{"post_id":"cjvysq8cj0012kg88wpdzu4a0","tag_id":"cjvysq8d5002vkg88jxu9d3cy","_id":"cjvysq8d7002ykg88t3x73mey"},{"post_id":"cjvysq8cl0016kg88qr4attyx","tag_id":"cjvysq8d5002vkg88jxu9d3cy","_id":"cjvysq8d80031kg88wnm4e8ma"},{"post_id":"cjvysq8cl0016kg88qr4attyx","tag_id":"cjvysq8d5002skg88d0v2098h","_id":"cjvysq8d80032kg88ovg69eai"},{"post_id":"cjvysq8cm0017kg88txbm9qm1","tag_id":"cjvysq8d5002vkg88jxu9d3cy","_id":"cjvysq8d90034kg88xvd44tuy"},{"post_id":"cjvysq8cm0017kg88txbm9qm1","tag_id":"cjvysq8d5002skg88d0v2098h","_id":"cjvysq8d90035kg886yzwjom1"}],"Tag":[{"name":"Idea","_id":"cjvysq8bj0005kg88hzlxuhll"},{"name":"archetypeCatalog","_id":"cjvysq8bp000akg88zcfk3u1k"},{"name":"java逆向","_id":"cjvysq8bt000fkg88fa0k856h"},{"name":"MySQL","_id":"cjvysq8bx000mkg88rjs48ezi"},{"name":"innodb","_id":"cjvysq8c1000skg88ljcbfp7h"},{"name":"J.U.C","_id":"cjvysq8ci000ykg8882ywk22l"},{"name":"ConcurrentHashMap","_id":"cjvysq8cl0015kg88y1tan0wt"},{"name":"Innodb","_id":"cjvysq8cn001akg88p0bmh2lu"},{"name":"多线程","_id":"cjvysq8co001fkg88ysnzfu6c"},{"name":"synchronized","_id":"cjvysq8cp001jkg88zbp5iog7"},{"name":"AQS","_id":"cjvysq8cq001mkg88jm06ox5i"},{"name":"java","_id":"cjvysq8cr001qkg88syu0y88h"},{"name":"业务开发","_id":"cjvysq8ct001vkg88317hmamt"},{"name":"linux","_id":"cjvysq8cx001zkg88zkumbu20"},{"name":"shell","_id":"cjvysq8cx0023kg88mk8vhf8l"},{"name":"开发规范","_id":"cjvysq8cy0025kg88ydp66wuf"},{"name":"代码管理","_id":"cjvysq8cz0028kg88innkiqyk"},{"name":"GIT","_id":"cjvysq8d00029kg88aw7395wr"},{"name":"Protobuf","_id":"cjvysq8d1002dkg88tzwc386r"},{"name":"rpc","_id":"cjvysq8d1002gkg88yp5zkqwc"},{"name":"ClassLoader","_id":"cjvysq8d4002pkg88n6hrngi3"},{"name":"热加载","_id":"cjvysq8d5002rkg880t2ovpxa"},{"name":"多语言","_id":"cjvysq8d5002skg88d0v2098h"},{"name":"i18n","_id":"cjvysq8d5002vkg88jxu9d3cy"}]}}